
rtos_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afe0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002638  0800b180  0800b180  0001b180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7b8  0800d7b8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7b8  0800d7b8  0001d7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7c0  0800d7c0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7c0  0800d7c0  0001d7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7c4  0800d7c4  0001d7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d7c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004474  200001e0  0800d9a8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004654  0800d9a8  00024654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   000192b3  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004052  00000000  00000000  00039506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001848  00000000  00000000  0003d558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aec7  00000000  00000000  0003eda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d101  00000000  00000000  00059c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a19e7  00000000  00000000  00076d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000012ce  00000000  00000000  0011874f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000772c  00000000  00000000  00119a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0012114c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b168 	.word	0x0800b168

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800b168 	.word	0x0800b168

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <ILI9341_Select+0x14>)
 8000f5e:	f002 fcef 	bl	8003940 <HAL_GPIO_WritePin>
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40020400 	.word	0x40020400

08000f6c <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2101      	movs	r1, #1
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <ILI9341_Unselect+0x14>)
 8000f76:	f002 fce3 	bl	8003940 <HAL_GPIO_WritePin>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020400 	.word	0x40020400

08000f84 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <ILI9341_Reset+0x24>)
 8000f8e:	f002 fcd7 	bl	8003940 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000f92:	2005      	movs	r0, #5
 8000f94:	f001 ff48 	bl	8002e28 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <ILI9341_Reset+0x24>)
 8000f9e:	f002 fccf 	bl	8003940 <HAL_GPIO_WritePin>
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40020400 	.word	0x40020400

08000fac <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fbc:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <ILI9341_WriteCommand+0x2c>)
 8000fbe:	f002 fcbf 	bl	8003940 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000fc2:	1df9      	adds	r1, r7, #7
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4804      	ldr	r0, [pc, #16]	; (8000fdc <ILI9341_WriteCommand+0x30>)
 8000fcc:	f004 fdf5 	bl	8005bba <HAL_SPI_Transmit>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	200004c8 	.word	0x200004c8

08000fe0 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff0:	4810      	ldr	r0, [pc, #64]	; (8001034 <ILI9341_WriteData+0x54>)
 8000ff2:	f002 fca5 	bl	8003940 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000ff6:	e015      	b.n	8001024 <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ffe:	bf28      	it	cs
 8001000:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8001004:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001006:	89fa      	ldrh	r2, [r7, #14]
 8001008:	f04f 33ff 	mov.w	r3, #4294967295
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	480a      	ldr	r0, [pc, #40]	; (8001038 <ILI9341_WriteData+0x58>)
 8001010:	f004 fdd3 	bl	8005bba <HAL_SPI_Transmit>
        buff += chunk_size;
 8001014:	89fb      	ldrh	r3, [r7, #14]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 800101c:	89fb      	ldrh	r3, [r7, #14]
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1e6      	bne.n	8000ff8 <ILI9341_WriteData+0x18>
    }
}
 800102a:	bf00      	nop
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40020400 	.word	0x40020400
 8001038:	200004c8 	.word	0x200004c8

0800103c <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	4604      	mov	r4, r0
 8001044:	4608      	mov	r0, r1
 8001046:	4611      	mov	r1, r2
 8001048:	461a      	mov	r2, r3
 800104a:	4623      	mov	r3, r4
 800104c:	80fb      	strh	r3, [r7, #6]
 800104e:	4603      	mov	r3, r0
 8001050:	80bb      	strh	r3, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	807b      	strh	r3, [r7, #2]
 8001056:	4613      	mov	r3, r2
 8001058:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 800105a:	202a      	movs	r0, #42	; 0x2a
 800105c:	f7ff ffa6 	bl	8000fac <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	0a1b      	lsrs	r3, r3, #8
 8001064:	b29b      	uxth	r3, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	733b      	strb	r3, [r7, #12]
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	737b      	strb	r3, [r7, #13]
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	b29b      	uxth	r3, r3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	73bb      	strb	r3, [r7, #14]
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2104      	movs	r1, #4
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ffaa 	bl	8000fe0 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 800108c:	202b      	movs	r0, #43	; 0x2b
 800108e:	f7ff ff8d 	bl	8000fac <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8001092:	88bb      	ldrh	r3, [r7, #4]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	b29b      	uxth	r3, r3
 8001098:	b2db      	uxtb	r3, r3
 800109a:	723b      	strb	r3, [r7, #8]
 800109c:	88bb      	ldrh	r3, [r7, #4]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	727b      	strb	r3, [r7, #9]
 80010a2:	883b      	ldrh	r3, [r7, #0]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	72bb      	strb	r3, [r7, #10]
 80010ac:	883b      	ldrh	r3, [r7, #0]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	2104      	movs	r1, #4
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff91 	bl	8000fe0 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 80010be:	202c      	movs	r0, #44	; 0x2c
 80010c0:	f7ff ff74 	bl	8000fac <ILI9341_WriteCommand>
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd90      	pop	{r4, r7, pc}

080010cc <ILI9341_Init>:

void ILI9341_Init() {
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b09b      	sub	sp, #108	; 0x6c
 80010d0:	af00      	add	r7, sp, #0
    ILI9341_Select();
 80010d2:	f7ff ff3f 	bl	8000f54 <ILI9341_Select>
    ILI9341_Reset();
 80010d6:	f7ff ff55 	bl	8000f84 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 80010da:	2001      	movs	r0, #1
 80010dc:	f7ff ff66 	bl	8000fac <ILI9341_WriteCommand>
    HAL_Delay(1000);
 80010e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010e4:	f001 fea0 	bl	8002e28 <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 80010e8:	20cb      	movs	r0, #203	; 0xcb
 80010ea:	f7ff ff5f 	bl	8000fac <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 80010ee:	4a87      	ldr	r2, [pc, #540]	; (800130c <ILI9341_Init+0x240>)
 80010f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010f8:	6018      	str	r0, [r3, #0]
 80010fa:	3304      	adds	r3, #4
 80010fc:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80010fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001102:	2105      	movs	r1, #5
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff6b 	bl	8000fe0 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 800110a:	20cf      	movs	r0, #207	; 0xcf
 800110c:	f7ff ff4e 	bl	8000fac <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8001110:	4a7f      	ldr	r2, [pc, #508]	; (8001310 <ILI9341_Init+0x244>)
 8001112:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001116:	6812      	ldr	r2, [r2, #0]
 8001118:	4611      	mov	r1, r2
 800111a:	8019      	strh	r1, [r3, #0]
 800111c:	3302      	adds	r3, #2
 800111e:	0c12      	lsrs	r2, r2, #16
 8001120:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001122:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001126:	2103      	movs	r1, #3
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff59 	bl	8000fe0 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 800112e:	20e8      	movs	r0, #232	; 0xe8
 8001130:	f7ff ff3c 	bl	8000fac <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8001134:	4a77      	ldr	r2, [pc, #476]	; (8001314 <ILI9341_Init+0x248>)
 8001136:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800113a:	6812      	ldr	r2, [r2, #0]
 800113c:	4611      	mov	r1, r2
 800113e:	8019      	strh	r1, [r3, #0]
 8001140:	3302      	adds	r3, #2
 8001142:	0c12      	lsrs	r2, r2, #16
 8001144:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001146:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800114a:	2103      	movs	r1, #3
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff47 	bl	8000fe0 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8001152:	20ea      	movs	r0, #234	; 0xea
 8001154:	f7ff ff2a 	bl	8000fac <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8001158:	2300      	movs	r3, #0
 800115a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 800115e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001162:	2102      	movs	r1, #2
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff3b 	bl	8000fe0 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 800116a:	20ed      	movs	r0, #237	; 0xed
 800116c:	f7ff ff1e 	bl	8000fac <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8001170:	4b69      	ldr	r3, [pc, #420]	; (8001318 <ILI9341_Init+0x24c>)
 8001172:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 8001174:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001178:	2104      	movs	r1, #4
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff30 	bl	8000fe0 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8001180:	20f7      	movs	r0, #247	; 0xf7
 8001182:	f7ff ff13 	bl	8000fac <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8001186:	2320      	movs	r3, #32
 8001188:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 800118c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001190:	2101      	movs	r1, #1
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff24 	bl	8000fe0 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8001198:	20c0      	movs	r0, #192	; 0xc0
 800119a:	f7ff ff07 	bl	8000fac <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 800119e:	2323      	movs	r3, #35	; 0x23
 80011a0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 80011a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011a8:	2101      	movs	r1, #1
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff18 	bl	8000fe0 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 80011b0:	20c1      	movs	r0, #193	; 0xc1
 80011b2:	f7ff fefb 	bl	8000fac <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 80011b6:	2310      	movs	r3, #16
 80011b8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 80011bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff0c 	bl	8000fe0 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80011c8:	20c5      	movs	r0, #197	; 0xc5
 80011ca:	f7ff feef 	bl	8000fac <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 80011ce:	f642 033e 	movw	r3, #10302	; 0x283e
 80011d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 80011d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011da:	2102      	movs	r1, #2
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff feff 	bl	8000fe0 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 80011e2:	20c7      	movs	r0, #199	; 0xc7
 80011e4:	f7ff fee2 	bl	8000fac <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 80011e8:	2386      	movs	r3, #134	; 0x86
 80011ea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 80011ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011f2:	2101      	movs	r1, #1
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fef3 	bl	8000fe0 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 80011fa:	2036      	movs	r0, #54	; 0x36
 80011fc:	f7ff fed6 	bl	8000fac <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8001200:	2348      	movs	r3, #72	; 0x48
 8001202:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 8001206:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800120a:	2101      	movs	r1, #1
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fee7 	bl	8000fe0 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8001212:	203a      	movs	r0, #58	; 0x3a
 8001214:	f7ff feca 	bl	8000fac <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8001218:	2355      	movs	r3, #85	; 0x55
 800121a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 800121e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001222:	2101      	movs	r1, #1
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fedb 	bl	8000fe0 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 800122a:	20b1      	movs	r0, #177	; 0xb1
 800122c:	f7ff febe 	bl	8000fac <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8001230:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001234:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 8001236:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800123a:	2102      	movs	r1, #2
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fecf 	bl	8000fe0 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8001242:	20b6      	movs	r0, #182	; 0xb6
 8001244:	f7ff feb2 	bl	8000fac <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8001248:	4a34      	ldr	r2, [pc, #208]	; (800131c <ILI9341_Init+0x250>)
 800124a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	4611      	mov	r1, r2
 8001252:	8019      	strh	r1, [r3, #0]
 8001254:	3302      	adds	r3, #2
 8001256:	0c12      	lsrs	r2, r2, #16
 8001258:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800125a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800125e:	2103      	movs	r1, #3
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff febd 	bl	8000fe0 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8001266:	20f2      	movs	r0, #242	; 0xf2
 8001268:	f7ff fea0 	bl	8000fac <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 800126c:	2300      	movs	r3, #0
 800126e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 8001272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001276:	2101      	movs	r1, #1
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff feb1 	bl	8000fe0 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 800127e:	2026      	movs	r0, #38	; 0x26
 8001280:	f7ff fe94 	bl	8000fac <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8001284:	2301      	movs	r3, #1
 8001286:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 800128a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128e:	2101      	movs	r1, #1
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fea5 	bl	8000fe0 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8001296:	20e0      	movs	r0, #224	; 0xe0
 8001298:	f7ff fe88 	bl	8000fac <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 800129c:	4b20      	ldr	r3, [pc, #128]	; (8001320 <ILI9341_Init+0x254>)
 800129e:	f107 0414 	add.w	r4, r7, #20
 80012a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012a4:	c407      	stmia	r4!, {r0, r1, r2}
 80012a6:	8023      	strh	r3, [r4, #0]
 80012a8:	3402      	adds	r4, #2
 80012aa:	0c1b      	lsrs	r3, r3, #16
 80012ac:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	210f      	movs	r1, #15
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fe93 	bl	8000fe0 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 80012ba:	20e1      	movs	r0, #225	; 0xe1
 80012bc:	f7ff fe76 	bl	8000fac <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80012c0:	4b18      	ldr	r3, [pc, #96]	; (8001324 <ILI9341_Init+0x258>)
 80012c2:	1d3c      	adds	r4, r7, #4
 80012c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c6:	c407      	stmia	r4!, {r0, r1, r2}
 80012c8:	8023      	strh	r3, [r4, #0]
 80012ca:	3402      	adds	r4, #2
 80012cc:	0c1b      	lsrs	r3, r3, #16
 80012ce:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	210f      	movs	r1, #15
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fe83 	bl	8000fe0 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 80012da:	2011      	movs	r0, #17
 80012dc:	f7ff fe66 	bl	8000fac <ILI9341_WriteCommand>
    HAL_Delay(120);
 80012e0:	2078      	movs	r0, #120	; 0x78
 80012e2:	f001 fda1 	bl	8002e28 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 80012e6:	2029      	movs	r0, #41	; 0x29
 80012e8:	f7ff fe60 	bl	8000fac <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 80012ec:	2036      	movs	r0, #54	; 0x36
 80012ee:	f7ff fe5d 	bl	8000fac <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 80012f2:	2328      	movs	r3, #40	; 0x28
 80012f4:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 80012f6:	463b      	mov	r3, r7
 80012f8:	2101      	movs	r1, #1
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fe70 	bl	8000fe0 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8001300:	f7ff fe34 	bl	8000f6c <ILI9341_Unselect>
}
 8001304:	bf00      	nop
 8001306:	376c      	adds	r7, #108	; 0x6c
 8001308:	46bd      	mov	sp, r7
 800130a:	bd90      	pop	{r4, r7, pc}
 800130c:	0800b180 	.word	0x0800b180
 8001310:	0800b188 	.word	0x0800b188
 8001314:	0800b18c 	.word	0x0800b18c
 8001318:	81120364 	.word	0x81120364
 800131c:	0800b190 	.word	0x0800b190
 8001320:	0800b194 	.word	0x0800b194
 8001324:	0800b1a4 	.word	0x0800b1a4

08001328 <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001328:	b082      	sub	sp, #8
 800132a:	b590      	push	{r4, r7, lr}
 800132c:	b089      	sub	sp, #36	; 0x24
 800132e:	af00      	add	r7, sp, #0
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
 8001332:	4603      	mov	r3, r0
 8001334:	80fb      	strh	r3, [r7, #6]
 8001336:	460b      	mov	r3, r1
 8001338:	80bb      	strh	r3, [r7, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800133e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001342:	b29a      	uxth	r2, r3
 8001344:	88fb      	ldrh	r3, [r7, #6]
 8001346:	4413      	add	r3, r2
 8001348:	b29b      	uxth	r3, r3
 800134a:	3b01      	subs	r3, #1
 800134c:	b29c      	uxth	r4, r3
 800134e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001352:	b29a      	uxth	r2, r3
 8001354:	88bb      	ldrh	r3, [r7, #4]
 8001356:	4413      	add	r3, r2
 8001358:	b29b      	uxth	r3, r3
 800135a:	3b01      	subs	r3, #1
 800135c:	b29b      	uxth	r3, r3
 800135e:	88b9      	ldrh	r1, [r7, #4]
 8001360:	88f8      	ldrh	r0, [r7, #6]
 8001362:	4622      	mov	r2, r4
 8001364:	f7ff fe6a 	bl	800103c <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	e043      	b.n	80013f6 <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 800136e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	3b20      	subs	r3, #32
 8001374:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001378:	fb01 f303 	mul.w	r3, r1, r3
 800137c:	4619      	mov	r1, r3
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	440b      	add	r3, r1
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]
 800138e:	e029      	b.n	80013e4 <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00e      	beq.n	80013be <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80013a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80013a2:	0a1b      	lsrs	r3, r3, #8
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	743b      	strb	r3, [r7, #16]
 80013aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	2102      	movs	r1, #2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fe12 	bl	8000fe0 <ILI9341_WriteData>
 80013bc:	e00f      	b.n	80013de <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80013be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013c2:	0a1b      	lsrs	r3, r3, #8
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	733b      	strb	r3, [r7, #12]
 80013ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	2102      	movs	r1, #2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fe01 	bl	8000fe0 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	3301      	adds	r3, #1
 80013e2:	61bb      	str	r3, [r7, #24]
 80013e4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80013e8:	461a      	mov	r2, r3
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d3cf      	bcc.n	8001390 <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	3301      	adds	r3, #1
 80013f4:	61fb      	str	r3, [r7, #28]
 80013f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80013fa:	461a      	mov	r2, r3
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	4293      	cmp	r3, r2
 8001400:	d3b5      	bcc.n	800136e <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 8001402:	bf00      	nop
 8001404:	bf00      	nop
 8001406:	3724      	adds	r7, #36	; 0x24
 8001408:	46bd      	mov	sp, r7
 800140a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800140e:	b002      	add	sp, #8
 8001410:	4770      	bx	lr

08001412 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001412:	b082      	sub	sp, #8
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af04      	add	r7, sp, #16
 800141a:	603a      	str	r2, [r7, #0]
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	4603      	mov	r3, r0
 8001420:	80fb      	strh	r3, [r7, #6]
 8001422:	460b      	mov	r3, r1
 8001424:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8001426:	f7ff fd95 	bl	8000f54 <ILI9341_Select>

    while(*str) {
 800142a:	e02e      	b.n	800148a <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	7d3a      	ldrb	r2, [r7, #20]
 8001430:	4413      	add	r3, r2
 8001432:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001436:	db13      	blt.n	8001460 <ILI9341_WriteString+0x4e>
            x = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800143c:	7d7b      	ldrb	r3, [r7, #21]
 800143e:	b29a      	uxth	r2, r3
 8001440:	88bb      	ldrh	r3, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8001446:	88bb      	ldrh	r3, [r7, #4]
 8001448:	7d7a      	ldrb	r2, [r7, #21]
 800144a:	4413      	add	r3, r2
 800144c:	2bef      	cmp	r3, #239	; 0xef
 800144e:	dc21      	bgt.n	8001494 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b20      	cmp	r3, #32
 8001456:	d103      	bne.n	8001460 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	603b      	str	r3, [r7, #0]
                continue;
 800145e:	e014      	b.n	800148a <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	88b9      	ldrh	r1, [r7, #4]
 8001466:	88f8      	ldrh	r0, [r7, #6]
 8001468:	8c3b      	ldrh	r3, [r7, #32]
 800146a:	9302      	str	r3, [sp, #8]
 800146c:	8bbb      	ldrh	r3, [r7, #28]
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f7ff ff57 	bl	8001328 <ILI9341_WriteChar>
        x += font.width;
 800147a:	7d3b      	ldrb	r3, [r7, #20]
 800147c:	b29a      	uxth	r2, r3
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	4413      	add	r3, r2
 8001482:	80fb      	strh	r3, [r7, #6]
        str++;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	603b      	str	r3, [r7, #0]
    while(*str) {
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1cc      	bne.n	800142c <ILI9341_WriteString+0x1a>
 8001492:	e000      	b.n	8001496 <ILI9341_WriteString+0x84>
                break;
 8001494:	bf00      	nop
    }

    ILI9341_Unselect();
 8001496:	f7ff fd69 	bl	8000f6c <ILI9341_Unselect>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014a4:	b002      	add	sp, #8
 80014a6:	4770      	bx	lr

080014a8 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4604      	mov	r4, r0
 80014b0:	4608      	mov	r0, r1
 80014b2:	4611      	mov	r1, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4623      	mov	r3, r4
 80014b8:	80fb      	strh	r3, [r7, #6]
 80014ba:	4603      	mov	r3, r0
 80014bc:	80bb      	strh	r3, [r7, #4]
 80014be:	460b      	mov	r3, r1
 80014c0:	807b      	strh	r3, [r7, #2]
 80014c2:	4613      	mov	r3, r2
 80014c4:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80014cc:	d253      	bcs.n	8001576 <ILI9341_FillRectangle+0xce>
 80014ce:	88bb      	ldrh	r3, [r7, #4]
 80014d0:	2bef      	cmp	r3, #239	; 0xef
 80014d2:	d850      	bhi.n	8001576 <ILI9341_FillRectangle+0xce>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 80014d4:	88fa      	ldrh	r2, [r7, #6]
 80014d6:	887b      	ldrh	r3, [r7, #2]
 80014d8:	4413      	add	r3, r2
 80014da:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80014de:	dd03      	ble.n	80014e8 <ILI9341_FillRectangle+0x40>
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80014e6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 80014e8:	88ba      	ldrh	r2, [r7, #4]
 80014ea:	883b      	ldrh	r3, [r7, #0]
 80014ec:	4413      	add	r3, r2
 80014ee:	2bf0      	cmp	r3, #240	; 0xf0
 80014f0:	dd03      	ble.n	80014fa <ILI9341_FillRectangle+0x52>
 80014f2:	88bb      	ldrh	r3, [r7, #4]
 80014f4:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80014f8:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 80014fa:	f7ff fd2b 	bl	8000f54 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80014fe:	88fa      	ldrh	r2, [r7, #6]
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	4413      	add	r3, r2
 8001504:	b29b      	uxth	r3, r3
 8001506:	3b01      	subs	r3, #1
 8001508:	b29c      	uxth	r4, r3
 800150a:	88ba      	ldrh	r2, [r7, #4]
 800150c:	883b      	ldrh	r3, [r7, #0]
 800150e:	4413      	add	r3, r2
 8001510:	b29b      	uxth	r3, r3
 8001512:	3b01      	subs	r3, #1
 8001514:	b29b      	uxth	r3, r3
 8001516:	88b9      	ldrh	r1, [r7, #4]
 8001518:	88f8      	ldrh	r0, [r7, #6]
 800151a:	4622      	mov	r2, r4
 800151c:	f7ff fd8e 	bl	800103c <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001520:	8c3b      	ldrh	r3, [r7, #32]
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	b29b      	uxth	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	733b      	strb	r3, [r7, #12]
 800152a:	8c3b      	ldrh	r3, [r7, #32]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001530:	2201      	movs	r2, #1
 8001532:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001536:	4812      	ldr	r0, [pc, #72]	; (8001580 <ILI9341_FillRectangle+0xd8>)
 8001538:	f002 fa02 	bl	8003940 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800153c:	883b      	ldrh	r3, [r7, #0]
 800153e:	80bb      	strh	r3, [r7, #4]
 8001540:	e013      	b.n	800156a <ILI9341_FillRectangle+0xc2>
        for(x = w; x > 0; x--) {
 8001542:	887b      	ldrh	r3, [r7, #2]
 8001544:	80fb      	strh	r3, [r7, #6]
 8001546:	e00a      	b.n	800155e <ILI9341_FillRectangle+0xb6>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001548:	f107 010c 	add.w	r1, r7, #12
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
 8001550:	2202      	movs	r2, #2
 8001552:	480c      	ldr	r0, [pc, #48]	; (8001584 <ILI9341_FillRectangle+0xdc>)
 8001554:	f004 fb31 	bl	8005bba <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	3b01      	subs	r3, #1
 800155c:	80fb      	strh	r3, [r7, #6]
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f1      	bne.n	8001548 <ILI9341_FillRectangle+0xa0>
    for(y = h; y > 0; y--) {
 8001564:	88bb      	ldrh	r3, [r7, #4]
 8001566:	3b01      	subs	r3, #1
 8001568:	80bb      	strh	r3, [r7, #4]
 800156a:	88bb      	ldrh	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1e8      	bne.n	8001542 <ILI9341_FillRectangle+0x9a>
        }
    }

    ILI9341_Unselect();
 8001570:	f7ff fcfc 	bl	8000f6c <ILI9341_Unselect>
 8001574:	e000      	b.n	8001578 <ILI9341_FillRectangle+0xd0>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8001576:	bf00      	nop
}
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bd90      	pop	{r4, r7, pc}
 800157e:	bf00      	nop
 8001580:	40020400 	.word	0x40020400
 8001584:	200004c8 	.word	0x200004c8

08001588 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af02      	add	r7, sp, #8
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	23f0      	movs	r3, #240	; 0xf0
 8001598:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800159c:	2100      	movs	r1, #0
 800159e:	2000      	movs	r0, #0
 80015a0:	f7ff ff82 	bl	80014a8 <ILI9341_FillRectangle>
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4604      	mov	r4, r0
 80015b4:	4608      	mov	r0, r1
 80015b6:	4611      	mov	r1, r2
 80015b8:	461a      	mov	r2, r3
 80015ba:	4623      	mov	r3, r4
 80015bc:	80fb      	strh	r3, [r7, #6]
 80015be:	4603      	mov	r3, r0
 80015c0:	80bb      	strh	r3, [r7, #4]
 80015c2:	460b      	mov	r3, r1
 80015c4:	807b      	strh	r3, [r7, #2]
 80015c6:	4613      	mov	r3, r2
 80015c8:	803b      	strh	r3, [r7, #0]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80015d0:	d22c      	bcs.n	800162c <ILI9341_DrawImage+0x80>
 80015d2:	88bb      	ldrh	r3, [r7, #4]
 80015d4:	2bef      	cmp	r3, #239	; 0xef
 80015d6:	d829      	bhi.n	800162c <ILI9341_DrawImage+0x80>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 80015d8:	88fa      	ldrh	r2, [r7, #6]
 80015da:	887b      	ldrh	r3, [r7, #2]
 80015dc:	4413      	add	r3, r2
 80015de:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80015e2:	dc25      	bgt.n	8001630 <ILI9341_DrawImage+0x84>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 80015e4:	88ba      	ldrh	r2, [r7, #4]
 80015e6:	883b      	ldrh	r3, [r7, #0]
 80015e8:	4413      	add	r3, r2
 80015ea:	2bf0      	cmp	r3, #240	; 0xf0
 80015ec:	dc22      	bgt.n	8001634 <ILI9341_DrawImage+0x88>

    ILI9341_Select();
 80015ee:	f7ff fcb1 	bl	8000f54 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80015f2:	88fa      	ldrh	r2, [r7, #6]
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	4413      	add	r3, r2
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	3b01      	subs	r3, #1
 80015fc:	b29c      	uxth	r4, r3
 80015fe:	88ba      	ldrh	r2, [r7, #4]
 8001600:	883b      	ldrh	r3, [r7, #0]
 8001602:	4413      	add	r3, r2
 8001604:	b29b      	uxth	r3, r3
 8001606:	3b01      	subs	r3, #1
 8001608:	b29b      	uxth	r3, r3
 800160a:	88b9      	ldrh	r1, [r7, #4]
 800160c:	88f8      	ldrh	r0, [r7, #6]
 800160e:	4622      	mov	r2, r4
 8001610:	f7ff fd14 	bl	800103c <ILI9341_SetAddressWindow>
    ILI9341_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	883a      	ldrh	r2, [r7, #0]
 8001618:	fb02 f303 	mul.w	r3, r2, r3
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	4619      	mov	r1, r3
 8001620:	69b8      	ldr	r0, [r7, #24]
 8001622:	f7ff fcdd 	bl	8000fe0 <ILI9341_WriteData>
    ILI9341_Unselect();
 8001626:	f7ff fca1 	bl	8000f6c <ILI9341_Unselect>
 800162a:	e004      	b.n	8001636 <ILI9341_DrawImage+0x8a>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800162c:	bf00      	nop
 800162e:	e002      	b.n	8001636 <ILI9341_DrawImage+0x8a>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 8001630:	bf00      	nop
 8001632:	e000      	b.n	8001636 <ILI9341_DrawImage+0x8a>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 8001634:	bf00      	nop
}
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	bd90      	pop	{r4, r7, pc}

0800163c <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 8001640:	2201      	movs	r2, #1
 8001642:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001646:	4802      	ldr	r0, [pc, #8]	; (8001650 <ILI9341_TouchUnselect+0x14>)
 8001648:	f002 f97a 	bl	8003940 <HAL_GPIO_WritePin>
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40020000 	.word	0x40020000

08001654 <SHT2x_Init>:
	
/**
 * @brief Initializes the SHT2x temperature/humidity sensor.
 * @param hi2c User I2C handle pointer.
 */
void SHT2x_Init(I2C_HandleTypeDef *hi2c) {
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	_sht2x_ui2c = hi2c;
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <SHT2x_Init+0x1c>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6013      	str	r3, [r2, #0]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	200001fc 	.word	0x200001fc

08001674 <SHT2x_ReadUserReg>:

/**
 * @brief Gets the value stored in user register.
 * @return 8-bit value stored in user register, 0 to 255.
 */
uint8_t SHT2x_ReadUserReg(void) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af02      	add	r7, sp, #8
	uint8_t val;
	uint8_t cmd = SHT2x_READ_REG;
 800167a:	23e7      	movs	r3, #231	; 0xe7
 800167c:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <SHT2x_ReadUserReg+0x3c>)
 8001680:	6818      	ldr	r0, [r3, #0]
 8001682:	1dba      	adds	r2, r7, #6
 8001684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	2301      	movs	r3, #1
 800168c:	2180      	movs	r1, #128	; 0x80
 800168e:	f002 facf 	bl	8003c30 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &val, 1, SHT2x_TIMEOUT);
 8001692:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <SHT2x_ReadUserReg+0x3c>)
 8001694:	6818      	ldr	r0, [r3, #0]
 8001696:	1dfa      	adds	r2, r7, #7
 8001698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2301      	movs	r3, #1
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	f002 fbc3 	bl	8003e2c <HAL_I2C_Master_Receive>
	return val;
 80016a6:	79fb      	ldrb	r3, [r7, #7]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200001fc 	.word	0x200001fc

080016b4 <SHT2x_GetRaw>:
/**
 * @brief Sends the designated command to sensor and read a 16-bit raw value.
 * @param cmd Command to send to sensor.
 * @return 16-bit raw value, 0 to 65535.
 */
uint16_t SHT2x_GetRaw(uint8_t cmd) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
	uint8_t val[3] = { 0 };
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <SHT2x_GetRaw+0x58>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	81bb      	strh	r3, [r7, #12]
 80016c4:	2300      	movs	r3, #0
 80016c6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <SHT2x_GetRaw+0x5c>)
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	1dfa      	adds	r2, r7, #7
 80016ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2301      	movs	r3, #1
 80016d6:	2180      	movs	r1, #128	; 0x80
 80016d8:	f002 faaa 	bl	8003c30 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, val, 3, SHT2x_TIMEOUT);
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <SHT2x_GetRaw+0x5c>)
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	f107 020c 	add.w	r2, r7, #12
 80016e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2303      	movs	r3, #3
 80016ec:	2180      	movs	r1, #128	; 0x80
 80016ee:	f002 fb9d 	bl	8003e2c <HAL_I2C_Master_Receive>
	return val[0] << 8 | val[1];
 80016f2:	7b3b      	ldrb	r3, [r7, #12]
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	b21a      	sxth	r2, r3
 80016f8:	7b7b      	ldrb	r3, [r7, #13]
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	4313      	orrs	r3, r2
 80016fe:	b21b      	sxth	r3, r3
 8001700:	b29b      	uxth	r3, r3
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	0800b1b4 	.word	0x0800b1b4
 8001710:	200001fc 	.word	0x200001fc
 8001714:	00000000 	.word	0x00000000

08001718 <SHT2x_GetTemperature>:
/**
 * @brief Measures and gets the current temperature.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point temperature value.
 */
float SHT2x_GetTemperature(uint8_t hold) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_TEMP_HOLD : SHT2x_READ_TEMP_NOHOLD);
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <SHT2x_GetTemperature+0x14>
 8001728:	23e3      	movs	r3, #227	; 0xe3
 800172a:	e000      	b.n	800172e <SHT2x_GetTemperature+0x16>
 800172c:	23f3      	movs	r3, #243	; 0xf3
 800172e:	73fb      	strb	r3, [r7, #15]
	return -46.85 + 175.72 * (SHT2x_GetRaw(cmd) / 65536.0);
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ffbe 	bl	80016b4 <SHT2x_GetRaw>
 8001738:	4603      	mov	r3, r0
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe fefa 	bl	8000534 <__aeabi_i2d>
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <SHT2x_GetTemperature+0x88>)
 8001746:	f7ff f889 	bl	800085c <__aeabi_ddiv>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	a30f      	add	r3, pc, #60	; (adr r3, 8001790 <SHT2x_GetTemperature+0x78>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7fe ff56 	bl	8000608 <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	a30c      	add	r3, pc, #48	; (adr r3, 8001798 <SHT2x_GetTemperature+0x80>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	f7fe fd95 	bl	8000298 <__aeabi_dsub>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	f7ff fa1f 	bl	8000bb8 <__aeabi_d2f>
 800177a:	4603      	mov	r3, r0
 800177c:	ee07 3a90 	vmov	s15, r3
}
 8001780:	eeb0 0a67 	vmov.f32	s0, s15
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	f3af 8000 	nop.w
 8001790:	3d70a3d7 	.word	0x3d70a3d7
 8001794:	4065f70a 	.word	0x4065f70a
 8001798:	cccccccd 	.word	0xcccccccd
 800179c:	40476ccc 	.word	0x40476ccc
 80017a0:	40f00000 	.word	0x40f00000

080017a4 <SHT2x_GetRelativeHumidity>:
/**
 * @brief Measures and gets the current relative humidity.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point relative humidity value.
 */
float SHT2x_GetRelativeHumidity(uint8_t hold) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_RH_HOLD : SHT2x_READ_RH_NOHOLD);
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <SHT2x_GetRelativeHumidity+0x14>
 80017b4:	23e5      	movs	r3, #229	; 0xe5
 80017b6:	e000      	b.n	80017ba <SHT2x_GetRelativeHumidity+0x16>
 80017b8:	23f5      	movs	r3, #245	; 0xf5
 80017ba:	73fb      	strb	r3, [r7, #15]
	return -6 + 125.00 * (SHT2x_GetRaw(cmd) / 65536.0);
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ff78 	bl	80016b4 <SHT2x_GetRaw>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe feb4 	bl	8000534 <__aeabi_i2d>
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <SHT2x_GetRelativeHumidity+0x74>)
 80017d2:	f7ff f843 	bl	800085c <__aeabi_ddiv>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <SHT2x_GetRelativeHumidity+0x78>)
 80017e4:	f7fe ff10 	bl	8000608 <__aeabi_dmul>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <SHT2x_GetRelativeHumidity+0x7c>)
 80017f6:	f7fe fd4f 	bl	8000298 <__aeabi_dsub>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff f9d9 	bl	8000bb8 <__aeabi_d2f>
 8001806:	4603      	mov	r3, r0
 8001808:	ee07 3a90 	vmov	s15, r3
}
 800180c:	eeb0 0a67 	vmov.f32	s0, s15
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40f00000 	.word	0x40f00000
 800181c:	405f4000 	.word	0x405f4000
 8001820:	40180000 	.word	0x40180000

08001824 <SHT2x_SetResolution>:
 * @brief Sets the measurement resolution.
 * @param res Enum resolution.
 * @note Available resolutions: RES_14_12, RES_12_8, RES_13_10, RES_11_11.
 * @note RES_14_12 = 14-bit temperature and 12-bit RH resolution, etc.
 */
void SHT2x_SetResolution(SHT2x_Resolution res) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af02      	add	r7, sp, #8
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
	uint8_t val = SHT2x_ReadUserReg();
 800182e:	f7ff ff21 	bl	8001674 <SHT2x_ReadUserReg>
 8001832:	4603      	mov	r3, r0
 8001834:	73fb      	strb	r3, [r7, #15]
	val = (val & 0x7e) | res;
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800183e:	b25a      	sxtb	r2, r3
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	4313      	orrs	r3, r2
 8001846:	b25b      	sxtb	r3, r3
 8001848:	73fb      	strb	r3, [r7, #15]
	uint8_t temp[2] = { SHT2x_WRITE_REG, val };
 800184a:	23e6      	movs	r3, #230	; 0xe6
 800184c:	733b      	strb	r3, [r7, #12]
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, temp, 2, SHT2x_TIMEOUT);
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <SHT2x_SetResolution+0x4c>)
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	f107 020c 	add.w	r2, r7, #12
 800185a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	2302      	movs	r3, #2
 8001862:	2180      	movs	r1, #128	; 0x80
 8001864:	f002 f9e4 	bl	8003c30 <HAL_I2C_Master_Transmit>
}
 8001868:	bf00      	nop
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	200001fc 	.word	0x200001fc

08001874 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001884:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <vApplicationGetIdleTaskMemory+0x30>)
 800188a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000200 	.word	0x20000200
 80018a4:	20000254 	.word	0x20000254

080018a8 <display_init>:
void start_display(void const * argument);
void start_input_poll(void const * argument);
void start_game_master(void const * argument);

/* USER CODE BEGIN PFP */
void display_init() {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
    ILI9341_Unselect();
 80018ac:	f7ff fb5e 	bl	8000f6c <ILI9341_Unselect>
    ILI9341_TouchUnselect();
 80018b0:	f7ff fec4 	bl	800163c <ILI9341_TouchUnselect>
    ILI9341_Init();
 80018b4:	f7ff fc0a 	bl	80010cc <ILI9341_Init>
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}

080018bc <initPong>:
void drawCursor (uint16_t x, uint16_t y, uint16_t x_old, uint16_t y_old){
	ILI9341_FillRectangle(x_old,y_old,5,5,ILI9341_BLACK);
	init_cursor(x,y);
}

void initPong(){
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b083      	sub	sp, #12
 80018c0:	af02      	add	r7, sp, #8
	user.x = 250;
 80018c2:	4b37      	ldr	r3, [pc, #220]	; (80019a0 <initPong+0xe4>)
 80018c4:	22fa      	movs	r2, #250	; 0xfa
 80018c6:	601a      	str	r2, [r3, #0]
	user.y = 170;
 80018c8:	4b35      	ldr	r3, [pc, #212]	; (80019a0 <initPong+0xe4>)
 80018ca:	22aa      	movs	r2, #170	; 0xaa
 80018cc:	605a      	str	r2, [r3, #4]
	user.width = PADDLE_WIDTH;
 80018ce:	4b34      	ldr	r3, [pc, #208]	; (80019a0 <initPong+0xe4>)
 80018d0:	2205      	movs	r2, #5
 80018d2:	609a      	str	r2, [r3, #8]
	user.height = PADDLE_HEIGHT;
 80018d4:	4b32      	ldr	r3, [pc, #200]	; (80019a0 <initPong+0xe4>)
 80018d6:	221e      	movs	r2, #30
 80018d8:	60da      	str	r2, [r3, #12]
	user.speed = PADDLE_SPEED;
 80018da:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <initPong+0xe4>)
 80018dc:	2204      	movs	r2, #4
 80018de:	611a      	str	r2, [r3, #16]
	bot.x = 70-PADDLE_WIDTH;
 80018e0:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <initPong+0xe8>)
 80018e2:	2241      	movs	r2, #65	; 0x41
 80018e4:	601a      	str	r2, [r3, #0]
	bot.y = 170;
 80018e6:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <initPong+0xe8>)
 80018e8:	22aa      	movs	r2, #170	; 0xaa
 80018ea:	605a      	str	r2, [r3, #4]
	bot.width = PADDLE_WIDTH;
 80018ec:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <initPong+0xe8>)
 80018ee:	2205      	movs	r2, #5
 80018f0:	609a      	str	r2, [r3, #8]
	bot.height = PADDLE_HEIGHT;
 80018f2:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <initPong+0xe8>)
 80018f4:	221e      	movs	r2, #30
 80018f6:	60da      	str	r2, [r3, #12]
	bot.speed = PADDLE_SPEED;
 80018f8:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <initPong+0xe8>)
 80018fa:	2204      	movs	r2, #4
 80018fc:	611a      	str	r2, [r3, #16]
	bola.x=160;
 80018fe:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <initPong+0xec>)
 8001900:	22a0      	movs	r2, #160	; 0xa0
 8001902:	601a      	str	r2, [r3, #0]
	bola.y=170;
 8001904:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <initPong+0xec>)
 8001906:	22aa      	movs	r2, #170	; 0xaa
 8001908:	605a      	str	r2, [r3, #4]
	bola.velx=BALL_VELX;
 800190a:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <initPong+0xec>)
 800190c:	2205      	movs	r2, #5
 800190e:	609a      	str	r2, [r3, #8]
	bola.vely=BALL_VELY;
 8001910:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <initPong+0xec>)
 8001912:	2205      	movs	r2, #5
 8001914:	60da      	str	r2, [r3, #12]
	bola.rad=BALL_SIZE;
 8001916:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <initPong+0xec>)
 8001918:	2203      	movs	r2, #3
 800191a:	611a      	str	r2, [r3, #16]
	// init paddle dan bola di display
	ILI9341_FillRectangle(user.x,user.y,PADDLE_WIDTH,PADDLE_HEIGHT,ILI9341_WHITE);
 800191c:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <initPong+0xe4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	b298      	uxth	r0, r3
 8001922:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <initPong+0xe4>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	b299      	uxth	r1, r3
 8001928:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	231e      	movs	r3, #30
 8001930:	2205      	movs	r2, #5
 8001932:	f7ff fdb9 	bl	80014a8 <ILI9341_FillRectangle>
	ILI9341_FillRectangle(bot.x,bot.y,PADDLE_WIDTH,PADDLE_HEIGHT,ILI9341_WHITE);
 8001936:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <initPong+0xe8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	b298      	uxth	r0, r3
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <initPong+0xe8>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	b299      	uxth	r1, r3
 8001942:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	231e      	movs	r3, #30
 800194a:	2205      	movs	r2, #5
 800194c:	f7ff fdac 	bl	80014a8 <ILI9341_FillRectangle>

	ILI9341_FillRectangle(bola.x-bola.rad/2,bola.y-bola.rad/2,bola.rad,bola.rad,ILI9341_WHITE);
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <initPong+0xec>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	b29a      	uxth	r2, r3
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <initPong+0xec>)
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	0fd9      	lsrs	r1, r3, #31
 800195c:	440b      	add	r3, r1
 800195e:	105b      	asrs	r3, r3, #1
 8001960:	425b      	negs	r3, r3
 8001962:	b29b      	uxth	r3, r3
 8001964:	4413      	add	r3, r2
 8001966:	b298      	uxth	r0, r3
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <initPong+0xec>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	b29a      	uxth	r2, r3
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <initPong+0xec>)
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	0fd9      	lsrs	r1, r3, #31
 8001974:	440b      	add	r3, r1
 8001976:	105b      	asrs	r3, r3, #1
 8001978:	425b      	negs	r3, r3
 800197a:	b29b      	uxth	r3, r3
 800197c:	4413      	add	r3, r2
 800197e:	b299      	uxth	r1, r3
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <initPong+0xec>)
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	b29a      	uxth	r2, r3
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <initPong+0xec>)
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	b29b      	uxth	r3, r3
 800198c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001990:	9400      	str	r4, [sp, #0]
 8001992:	f7ff fd89 	bl	80014a8 <ILI9341_FillRectangle>
}
 8001996:	bf00      	nop
 8001998:	3704      	adds	r7, #4
 800199a:	46bd      	mov	sp, r7
 800199c:	bd90      	pop	{r4, r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000728 	.word	0x20000728
 80019a4:	2000073c 	.word	0x2000073c
 80019a8:	20000750 	.word	0x20000750

080019ac <updateBallPos>:

void updateBallPos(uint16_t x, uint16_t y, uint16_t x_old, uint16_t y_old){
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	4604      	mov	r4, r0
 80019b4:	4608      	mov	r0, r1
 80019b6:	4611      	mov	r1, r2
 80019b8:	461a      	mov	r2, r3
 80019ba:	4623      	mov	r3, r4
 80019bc:	80fb      	strh	r3, [r7, #6]
 80019be:	4603      	mov	r3, r0
 80019c0:	80bb      	strh	r3, [r7, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	807b      	strh	r3, [r7, #2]
 80019c6:	4613      	mov	r3, r2
 80019c8:	803b      	strh	r3, [r7, #0]
	ILI9341_FillRectangle(x_old-bola.rad/2,y_old-bola.rad/2,bola.rad,bola.rad,ILI9341_BLACK);
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <updateBallPos+0xa0>)
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	0fda      	lsrs	r2, r3, #31
 80019d0:	4413      	add	r3, r2
 80019d2:	105b      	asrs	r3, r3, #1
 80019d4:	425b      	negs	r3, r3
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	4413      	add	r3, r2
 80019dc:	b298      	uxth	r0, r3
 80019de:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <updateBallPos+0xa0>)
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	0fda      	lsrs	r2, r3, #31
 80019e4:	4413      	add	r3, r2
 80019e6:	105b      	asrs	r3, r3, #1
 80019e8:	425b      	negs	r3, r3
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	883b      	ldrh	r3, [r7, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	b299      	uxth	r1, r3
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <updateBallPos+0xa0>)
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <updateBallPos+0xa0>)
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	2400      	movs	r4, #0
 8001a00:	9400      	str	r4, [sp, #0]
 8001a02:	f7ff fd51 	bl	80014a8 <ILI9341_FillRectangle>
	ILI9341_FillRectangle(x-bola.rad/2,y-bola.rad/2,bola.rad,bola.rad,ILI9341_WHITE);
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <updateBallPos+0xa0>)
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	0fda      	lsrs	r2, r3, #31
 8001a0c:	4413      	add	r3, r2
 8001a0e:	105b      	asrs	r3, r3, #1
 8001a10:	425b      	negs	r3, r3
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	4413      	add	r3, r2
 8001a18:	b298      	uxth	r0, r3
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <updateBallPos+0xa0>)
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	0fda      	lsrs	r2, r3, #31
 8001a20:	4413      	add	r3, r2
 8001a22:	105b      	asrs	r3, r3, #1
 8001a24:	425b      	negs	r3, r3
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	88bb      	ldrh	r3, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b299      	uxth	r1, r3
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <updateBallPos+0xa0>)
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <updateBallPos+0xa0>)
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001a3e:	9400      	str	r4, [sp, #0]
 8001a40:	f7ff fd32 	bl	80014a8 <ILI9341_FillRectangle>
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd90      	pop	{r4, r7, pc}
 8001a4c:	20000750 	.word	0x20000750

08001a50 <updatePaddlePos>:

void updatePaddlePos(uint16_t x, uint16_t y, uint16_t x_old, uint16_t y_old){
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	4604      	mov	r4, r0
 8001a58:	4608      	mov	r0, r1
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4623      	mov	r3, r4
 8001a60:	80fb      	strh	r3, [r7, #6]
 8001a62:	4603      	mov	r3, r0
 8001a64:	80bb      	strh	r3, [r7, #4]
 8001a66:	460b      	mov	r3, r1
 8001a68:	807b      	strh	r3, [r7, #2]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	803b      	strh	r3, [r7, #0]
	//ILI9341_FillRectangle(x_old-(PADDLE_WIDTH/2),y_old-(PADDLE_HEIGHT/2),PADDLE_WIDTH,PADDLE_HEIGHT,ILI9341_BLACK);
	//ILI9341_FillRectangle(x-(PADDLE_WIDTH/2),y-(PADDLE_HEIGHT/2),PADDLE_WIDTH,PADDLE_HEIGHT,ILI9341_WHITE);
	ILI9341_FillRectangle(x_old,y_old,PADDLE_WIDTH,PADDLE_HEIGHT,ILI9341_BLACK);
 8001a6e:	8839      	ldrh	r1, [r7, #0]
 8001a70:	8878      	ldrh	r0, [r7, #2]
 8001a72:	2300      	movs	r3, #0
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	231e      	movs	r3, #30
 8001a78:	2205      	movs	r2, #5
 8001a7a:	f7ff fd15 	bl	80014a8 <ILI9341_FillRectangle>
	ILI9341_FillRectangle(x,y,PADDLE_WIDTH,PADDLE_HEIGHT,ILI9341_WHITE);
 8001a7e:	88b9      	ldrh	r1, [r7, #4]
 8001a80:	88f8      	ldrh	r0, [r7, #6]
 8001a82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	231e      	movs	r3, #30
 8001a8a:	2205      	movs	r2, #5
 8001a8c:	f7ff fd0c 	bl	80014a8 <ILI9341_FillRectangle>
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd90      	pop	{r4, r7, pc}

08001a98 <resetBallStatus>:

void resetBallStatus(){
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af02      	add	r7, sp, #8
	ILI9341_FillRectangle(bola.x-bola.rad/2,bola.y-bola.rad/2,bola.rad,bola.rad,ILI9341_BLACK);
 8001a9e:	4b32      	ldr	r3, [pc, #200]	; (8001b68 <resetBallStatus+0xd0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <resetBallStatus+0xd0>)
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	0fd9      	lsrs	r1, r3, #31
 8001aaa:	440b      	add	r3, r1
 8001aac:	105b      	asrs	r3, r3, #1
 8001aae:	425b      	negs	r3, r3
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b298      	uxth	r0, r3
 8001ab6:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <resetBallStatus+0xd0>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <resetBallStatus+0xd0>)
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	0fd9      	lsrs	r1, r3, #31
 8001ac2:	440b      	add	r3, r1
 8001ac4:	105b      	asrs	r3, r3, #1
 8001ac6:	425b      	negs	r3, r3
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	b299      	uxth	r1, r3
 8001ace:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <resetBallStatus+0xd0>)
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <resetBallStatus+0xd0>)
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	2400      	movs	r4, #0
 8001adc:	9400      	str	r4, [sp, #0]
 8001ade:	f7ff fce3 	bl	80014a8 <ILI9341_FillRectangle>
	int rand_vx;
	int rand_vy;
	bola.x=160;
 8001ae2:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <resetBallStatus+0xd0>)
 8001ae4:	22a0      	movs	r2, #160	; 0xa0
 8001ae6:	601a      	str	r2, [r3, #0]
	bola.y=170;
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <resetBallStatus+0xd0>)
 8001aea:	22aa      	movs	r2, #170	; 0xaa
 8001aec:	605a      	str	r2, [r3, #4]
	random_number = rand();
 8001aee:	f006 fc63 	bl	80083b8 <rand>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4a1d      	ldr	r2, [pc, #116]	; (8001b6c <resetBallStatus+0xd4>)
 8001af6:	6013      	str	r3, [r2, #0]
	srand(random_number);
 8001af8:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <resetBallStatus+0xd4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f006 fc2d 	bl	800835c <srand>
	rand_vx = random_number % 2;
 8001b02:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <resetBallStatus+0xd4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	bfb8      	it	lt
 8001b0e:	425b      	neglt	r3, r3
 8001b10:	607b      	str	r3, [r7, #4]
	random_number = rand();
 8001b12:	f006 fc51 	bl	80083b8 <rand>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <resetBallStatus+0xd4>)
 8001b1a:	6013      	str	r3, [r2, #0]
	rand_vy = random_number % 2;
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <resetBallStatus+0xd4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	bfb8      	it	lt
 8001b28:	425b      	neglt	r3, r3
 8001b2a:	603b      	str	r3, [r7, #0]
	if(rand_vx==1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d103      	bne.n	8001b3a <resetBallStatus+0xa2>
	{
		bola.velx=BALL_VELX;
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <resetBallStatus+0xd0>)
 8001b34:	2205      	movs	r2, #5
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	e003      	b.n	8001b42 <resetBallStatus+0xaa>
	}
	else
	{
		bola.velx=-BALL_VELX;
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <resetBallStatus+0xd0>)
 8001b3c:	f06f 0204 	mvn.w	r2, #4
 8001b40:	609a      	str	r2, [r3, #8]
	}

	if(rand_vy==1)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d103      	bne.n	8001b50 <resetBallStatus+0xb8>
	{
		bola.vely=BALL_VELY;
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <resetBallStatus+0xd0>)
 8001b4a:	2205      	movs	r2, #5
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	e003      	b.n	8001b58 <resetBallStatus+0xc0>
	}
	else
	{
		bola.vely=-BALL_VELY;
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <resetBallStatus+0xd0>)
 8001b52:	f06f 0204 	mvn.w	r2, #4
 8001b56:	60da      	str	r2, [r3, #12]
	}
	bola.rad=BALL_SIZE;
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <resetBallStatus+0xd0>)
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	611a      	str	r2, [r3, #16]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd90      	pop	{r4, r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000750 	.word	0x20000750
 8001b6c:	20000720 	.word	0x20000720

08001b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b70:	b5b0      	push	{r4, r5, r7, lr}
 8001b72:	b0aa      	sub	sp, #168	; 0xa8
 8001b74:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b76:	f001 f915 	bl	8002da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b7a:	f000 f941 	bl	8001e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b7e:	f000 fa87 	bl	8002090 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b82:	f000 fa65 	bl	8002050 <MX_DMA_Init>
  MX_SPI1_Init();
 8001b86:	f000 fa2d 	bl	8001fe4 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001b8a:	f000 f9a3 	bl	8001ed4 <MX_I2C1_Init>
  MX_RTC_Init();
 8001b8e:	f000 f9cf 	bl	8001f30 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  display_init();
 8001b92:	f7ff fe89 	bl	80018a8 <display_init>
  SHT2x_Init(&hi2c1);
 8001b96:	487f      	ldr	r0, [pc, #508]	; (8001d94 <main+0x224>)
 8001b98:	f7ff fd5c 	bl	8001654 <SHT2x_Init>
  SHT2x_SetResolution(RES_14_12);
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f7ff fe41 	bl	8001824 <SHT2x_SetResolution>
  ILI9341_FillScreen(ILI9341_BLACK);
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f7ff fcf0 	bl	8001588 <ILI9341_FillScreen>

  // INIT AREA UNTUK NAMA
  ILI9341_FillRectangle(0,0,ILI9341_HEIGHT,40,ILI9341_WHITE);
 8001ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2328      	movs	r3, #40	; 0x28
 8001bb0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f7ff fc76 	bl	80014a8 <ILI9341_FillRectangle>
  ILI9341_FillRectangle(5,5,ILI9341_HEIGHT-10,30,ILI9341_BLACK);
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	231e      	movs	r3, #30
 8001bc2:	f44f 729b 	mov.w	r2, #310	; 0x136
 8001bc6:	2105      	movs	r1, #5
 8001bc8:	2005      	movs	r0, #5
 8001bca:	f7ff fc6d 	bl	80014a8 <ILI9341_FillRectangle>
  ILI9341_WriteString(10, 10, "BINTANG DAN RAKKA - TEAM 5", Font_11x18, 0xf800, ILI9341_BLACK);
 8001bce:	4b72      	ldr	r3, [pc, #456]	; (8001d98 <main+0x228>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	9202      	str	r2, [sp, #8]
 8001bd4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001bd8:	9201      	str	r2, [sp, #4]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	9200      	str	r2, [sp, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a6e      	ldr	r2, [pc, #440]	; (8001d9c <main+0x22c>)
 8001be2:	210a      	movs	r1, #10
 8001be4:	200a      	movs	r0, #10
 8001be6:	f7ff fc14 	bl	8001412 <ILI9341_WriteString>

  // AREA UNTUK MENGGAMBAR ATAU PONG ???
  ILI9341_FillRectangle(0,100,ILI9341_HEIGHT,140,ILI9341_WHITE);
 8001bea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	238c      	movs	r3, #140	; 0x8c
 8001bf2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bf6:	2164      	movs	r1, #100	; 0x64
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f7ff fc55 	bl	80014a8 <ILI9341_FillRectangle>
  ILI9341_FillRectangle(5,105,ILI9341_HEIGHT-10,130,ILI9341_BLACK);
 8001bfe:	2300      	movs	r3, #0
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	2382      	movs	r3, #130	; 0x82
 8001c04:	f44f 729b 	mov.w	r2, #310	; 0x136
 8001c08:	2169      	movs	r1, #105	; 0x69
 8001c0a:	2005      	movs	r0, #5
 8001c0c:	f7ff fc4c 	bl	80014a8 <ILI9341_FillRectangle>

  // (x,y,width,height,color)
  // scoreboard kiri
  ILI9341_FillRectangle(0,100,60,40,ILI9341_WHITE);
 8001c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2328      	movs	r3, #40	; 0x28
 8001c18:	223c      	movs	r2, #60	; 0x3c
 8001c1a:	2164      	movs	r1, #100	; 0x64
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f7ff fc43 	bl	80014a8 <ILI9341_FillRectangle>
  ILI9341_FillRectangle(5,105,50,30,ILI9341_BLACK);
 8001c22:	2300      	movs	r3, #0
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	231e      	movs	r3, #30
 8001c28:	2232      	movs	r2, #50	; 0x32
 8001c2a:	2169      	movs	r1, #105	; 0x69
 8001c2c:	2005      	movs	r0, #5
 8001c2e:	f7ff fc3b 	bl	80014a8 <ILI9341_FillRectangle>

  // scoreboard kanan
  ILI9341_FillRectangle(260,100,60,40,ILI9341_WHITE);
 8001c32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2328      	movs	r3, #40	; 0x28
 8001c3a:	223c      	movs	r2, #60	; 0x3c
 8001c3c:	2164      	movs	r1, #100	; 0x64
 8001c3e:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001c42:	f7ff fc31 	bl	80014a8 <ILI9341_FillRectangle>
  ILI9341_FillRectangle(265,105,50,30,ILI9341_BLACK);
 8001c46:	2300      	movs	r3, #0
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	231e      	movs	r3, #30
 8001c4c:	2232      	movs	r2, #50	; 0x32
 8001c4e:	2169      	movs	r1, #105	; 0x69
 8001c50:	f240 1009 	movw	r0, #265	; 0x109
 8001c54:	f7ff fc28 	bl	80014a8 <ILI9341_FillRectangle>

  // gambar petir
  ILI9341_DrawImage(260,45,50,50,(const uint16_t*)test_img_50x50);
 8001c58:	4b51      	ldr	r3, [pc, #324]	; (8001da0 <main+0x230>)
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2332      	movs	r3, #50	; 0x32
 8001c5e:	2232      	movs	r2, #50	; 0x32
 8001c60:	212d      	movs	r1, #45	; 0x2d
 8001c62:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001c66:	f7ff fca1 	bl	80015ac <ILI9341_DrawImage>

  // init cursor awal di x = 160 dan y = 170
  x=160;
 8001c6a:	4b4e      	ldr	r3, [pc, #312]	; (8001da4 <main+0x234>)
 8001c6c:	22a0      	movs	r2, #160	; 0xa0
 8001c6e:	601a      	str	r2, [r3, #0]
  y=170;
 8001c70:	4b4d      	ldr	r3, [pc, #308]	; (8001da8 <main+0x238>)
 8001c72:	22aa      	movs	r2, #170	; 0xaa
 8001c74:	601a      	str	r2, [r3, #0]
  oldx=x;
 8001c76:	4b4b      	ldr	r3, [pc, #300]	; (8001da4 <main+0x234>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a4c      	ldr	r2, [pc, #304]	; (8001dac <main+0x23c>)
 8001c7c:	6013      	str	r3, [r2, #0]
  oldy=y;
 8001c7e:	4b4a      	ldr	r3, [pc, #296]	; (8001da8 <main+0x238>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a4b      	ldr	r2, [pc, #300]	; (8001db0 <main+0x240>)
 8001c84:	6013      	str	r3, [r2, #0]

  //init_cursor(x,y);

  // init paddle dan bola

  initPong();
 8001c86:	f7ff fe19 	bl	80018bc <initPong>

  ouserx=user.x;
 8001c8a:	4b4a      	ldr	r3, [pc, #296]	; (8001db4 <main+0x244>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a4a      	ldr	r2, [pc, #296]	; (8001db8 <main+0x248>)
 8001c90:	6013      	str	r3, [r2, #0]
  ousery=user.y;
 8001c92:	4b48      	ldr	r3, [pc, #288]	; (8001db4 <main+0x244>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4a49      	ldr	r2, [pc, #292]	; (8001dbc <main+0x24c>)
 8001c98:	6013      	str	r3, [r2, #0]
  obotx=bot.x;
 8001c9a:	4b49      	ldr	r3, [pc, #292]	; (8001dc0 <main+0x250>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a49      	ldr	r2, [pc, #292]	; (8001dc4 <main+0x254>)
 8001ca0:	6013      	str	r3, [r2, #0]
  oboty=bot.y;
 8001ca2:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <main+0x250>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4a48      	ldr	r2, [pc, #288]	; (8001dc8 <main+0x258>)
 8001ca8:	6013      	str	r3, [r2, #0]

  // init score
  scoreL=0;
 8001caa:	4b48      	ldr	r3, [pc, #288]	; (8001dcc <main+0x25c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
  scoreR=0;
 8001cb0:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <main+0x260>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of disp_semaphore */
  osSemaphoreDef(disp_semaphore);
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  disp_semaphoreHandle = osSemaphoreCreate(osSemaphore(disp_semaphore), 1);
 8001cc2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f004 fc8a 	bl	80065e2 <osSemaphoreCreate>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4a40      	ldr	r2, [pc, #256]	; (8001dd4 <main+0x264>)
 8001cd2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001cd4:	4b40      	ldr	r3, [pc, #256]	; (8001dd8 <main+0x268>)
 8001cd6:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001cda:	461d      	mov	r5, r3
 8001cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ce4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001ce8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f004 fc17 	bl	8006522 <osThreadCreate>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4a39      	ldr	r2, [pc, #228]	; (8001ddc <main+0x26c>)
 8001cf8:	6013      	str	r3, [r2, #0]

  /* definition and creation of baca_sht */
  osThreadDef(baca_sht, start_baca_sht, osPriorityLow, 0, 512);
 8001cfa:	4b39      	ldr	r3, [pc, #228]	; (8001de0 <main+0x270>)
 8001cfc:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001d00:	461d      	mov	r5, r3
 8001d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  baca_shtHandle = osThreadCreate(osThread(baca_sht), NULL);
 8001d0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f004 fc04 	bl	8006522 <osThreadCreate>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4a31      	ldr	r2, [pc, #196]	; (8001de4 <main+0x274>)
 8001d1e:	6013      	str	r3, [r2, #0]

  /* definition and creation of display */
  osThreadDef(display, start_display, osPriorityAboveNormal, 0, 1024);
 8001d20:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <main+0x278>)
 8001d22:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001d26:	461d      	mov	r5, r3
 8001d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayHandle = osThreadCreate(osThread(display), NULL);
 8001d34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f004 fbf1 	bl	8006522 <osThreadCreate>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4a2a      	ldr	r2, [pc, #168]	; (8001dec <main+0x27c>)
 8001d44:	6013      	str	r3, [r2, #0]

  /* definition and creation of input_poll */
  osThreadDef(input_poll, start_input_poll, osPriorityNormal, 0, 256);
 8001d46:	4b2a      	ldr	r3, [pc, #168]	; (8001df0 <main+0x280>)
 8001d48:	f107 0420 	add.w	r4, r7, #32
 8001d4c:	461d      	mov	r5, r3
 8001d4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  input_pollHandle = osThreadCreate(osThread(input_poll), NULL);
 8001d5a:	f107 0320 	add.w	r3, r7, #32
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f004 fbde 	bl	8006522 <osThreadCreate>
 8001d66:	4603      	mov	r3, r0
 8001d68:	4a22      	ldr	r2, [pc, #136]	; (8001df4 <main+0x284>)
 8001d6a:	6013      	str	r3, [r2, #0]

  /* definition and creation of game_master */
  osThreadDef(game_master, start_game_master, osPriorityBelowNormal, 0, 1024);
 8001d6c:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <main+0x288>)
 8001d6e:	1d3c      	adds	r4, r7, #4
 8001d70:	461d      	mov	r5, r3
 8001d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  game_masterHandle = osThreadCreate(osThread(game_master), NULL);
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f004 fbcd 	bl	8006522 <osThreadCreate>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4a1c      	ldr	r2, [pc, #112]	; (8001dfc <main+0x28c>)
 8001d8c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001d8e:	f004 fbc1 	bl	8006514 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <main+0x222>
 8001d94:	20000454 	.word	0x20000454
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	0800b1b8 	.word	0x0800b1b8
 8001da0:	0800c048 	.word	0x0800c048
 8001da4:	20000700 	.word	0x20000700
 8001da8:	20000704 	.word	0x20000704
 8001dac:	20000708 	.word	0x20000708
 8001db0:	2000070c 	.word	0x2000070c
 8001db4:	20000728 	.word	0x20000728
 8001db8:	20000710 	.word	0x20000710
 8001dbc:	20000714 	.word	0x20000714
 8001dc0:	2000073c 	.word	0x2000073c
 8001dc4:	20000718 	.word	0x20000718
 8001dc8:	2000071c 	.word	0x2000071c
 8001dcc:	200006a0 	.word	0x200006a0
 8001dd0:	200006a4 	.word	0x200006a4
 8001dd4:	20000594 	.word	0x20000594
 8001dd8:	0800b1e0 	.word	0x0800b1e0
 8001ddc:	20000580 	.word	0x20000580
 8001de0:	0800b208 	.word	0x0800b208
 8001de4:	20000584 	.word	0x20000584
 8001de8:	0800b22c 	.word	0x0800b22c
 8001dec:	20000588 	.word	0x20000588
 8001df0:	0800b254 	.word	0x0800b254
 8001df4:	2000058c 	.word	0x2000058c
 8001df8:	0800b27c 	.word	0x0800b27c
 8001dfc:	20000590 	.word	0x20000590

08001e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b094      	sub	sp, #80	; 0x50
 8001e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e06:	f107 0320 	add.w	r3, r7, #32
 8001e0a:	2230      	movs	r2, #48	; 0x30
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f007 f8af 	bl	8008f72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <SystemClock_Config+0xcc>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	4a27      	ldr	r2, [pc, #156]	; (8001ecc <SystemClock_Config+0xcc>)
 8001e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e32:	6413      	str	r3, [r2, #64]	; 0x40
 8001e34:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <SystemClock_Config+0xcc>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e40:	2300      	movs	r3, #0
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <SystemClock_Config+0xd0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a21      	ldr	r2, [pc, #132]	; (8001ed0 <SystemClock_Config+0xd0>)
 8001e4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <SystemClock_Config+0xd0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001e5c:	230a      	movs	r3, #10
 8001e5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e60:	2301      	movs	r3, #1
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e64:	2310      	movs	r3, #16
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e70:	2300      	movs	r3, #0
 8001e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e74:	2308      	movs	r3, #8
 8001e76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001e78:	2364      	movs	r3, #100	; 0x64
 8001e7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e80:	2304      	movs	r3, #4
 8001e82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e84:	f107 0320 	add.w	r3, r7, #32
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f002 fd87 	bl	800499c <HAL_RCC_OscConfig>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e94:	f000 fcc8 	bl	8002828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e98:	230f      	movs	r3, #15
 8001e9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001eae:	f107 030c 	add.w	r3, r7, #12
 8001eb2:	2103      	movs	r1, #3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f002 ffe9 	bl	8004e8c <HAL_RCC_ClockConfig>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ec0:	f000 fcb2 	bl	8002828 <Error_Handler>
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	3750      	adds	r7, #80	; 0x50
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40007000 	.word	0x40007000

08001ed4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001eda:	4a13      	ldr	r2, [pc, #76]	; (8001f28 <MX_I2C1_Init+0x54>)
 8001edc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001ee0:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <MX_I2C1_Init+0x58>)
 8001ee2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001ef2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ef6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f10:	4804      	ldr	r0, [pc, #16]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001f12:	f001 fd49 	bl	80039a8 <HAL_I2C_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f1c:	f000 fc84 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000454 	.word	0x20000454
 8001f28:	40005400 	.word	0x40005400
 8001f2c:	000186a0 	.word	0x000186a0

08001f30 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f36:	1d3b      	adds	r3, r7, #4
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001f44:	2300      	movs	r3, #0
 8001f46:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f48:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <MX_RTC_Init+0xac>)
 8001f4a:	4a25      	ldr	r2, [pc, #148]	; (8001fe0 <MX_RTC_Init+0xb0>)
 8001f4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f4e:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <MX_RTC_Init+0xac>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001f54:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <MX_RTC_Init+0xac>)
 8001f56:	227f      	movs	r2, #127	; 0x7f
 8001f58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001f5a:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <MX_RTC_Init+0xac>)
 8001f5c:	22ff      	movs	r2, #255	; 0xff
 8001f5e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f60:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <MX_RTC_Init+0xac>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f66:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <MX_RTC_Init+0xac>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <MX_RTC_Init+0xac>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f72:	481a      	ldr	r0, [pc, #104]	; (8001fdc <MX_RTC_Init+0xac>)
 8001f74:	f003 fa8c 	bl	8005490 <HAL_RTC_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001f7e:	f000 fc53 	bl	8002828 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	2201      	movs	r2, #1
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	480f      	ldr	r0, [pc, #60]	; (8001fdc <MX_RTC_Init+0xac>)
 8001f9e:	f003 fafa 	bl	8005596 <HAL_RTC_SetTime>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001fa8:	f000 fc3e 	bl	8002828 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8001fac:	2307      	movs	r3, #7
 8001fae:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_SEPTEMBER;
 8001fb0:	2309      	movs	r3, #9
 8001fb2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x22;
 8001fb4:	2322      	movs	r3, #34	; 0x22
 8001fb6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8001fb8:	2324      	movs	r3, #36	; 0x24
 8001fba:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4806      	ldr	r0, [pc, #24]	; (8001fdc <MX_RTC_Init+0xac>)
 8001fc4:	f003 fbdf 	bl	8005786 <HAL_RTC_SetDate>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001fce:	f000 fc2b 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200004a8 	.word	0x200004a8
 8001fe0:	40002800 	.word	0x40002800

08001fe4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fe8:	4b17      	ldr	r3, [pc, #92]	; (8002048 <MX_SPI1_Init+0x64>)
 8001fea:	4a18      	ldr	r2, [pc, #96]	; (800204c <MX_SPI1_Init+0x68>)
 8001fec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fee:	4b16      	ldr	r3, [pc, #88]	; (8002048 <MX_SPI1_Init+0x64>)
 8001ff0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ff4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ff6:	4b14      	ldr	r3, [pc, #80]	; (8002048 <MX_SPI1_Init+0x64>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <MX_SPI1_Init+0x64>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <MX_SPI1_Init+0x64>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002008:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <MX_SPI1_Init+0x64>)
 800200a:	2200      	movs	r2, #0
 800200c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <MX_SPI1_Init+0x64>)
 8002010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002014:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002016:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <MX_SPI1_Init+0x64>)
 8002018:	2208      	movs	r2, #8
 800201a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <MX_SPI1_Init+0x64>)
 800201e:	2200      	movs	r2, #0
 8002020:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <MX_SPI1_Init+0x64>)
 8002024:	2200      	movs	r2, #0
 8002026:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <MX_SPI1_Init+0x64>)
 800202a:	2200      	movs	r2, #0
 800202c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <MX_SPI1_Init+0x64>)
 8002030:	220a      	movs	r2, #10
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002034:	4804      	ldr	r0, [pc, #16]	; (8002048 <MX_SPI1_Init+0x64>)
 8002036:	f003 fd37 	bl	8005aa8 <HAL_SPI_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002040:	f000 fbf2 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}
 8002048:	200004c8 	.word	0x200004c8
 800204c:	40013000 	.word	0x40013000

08002050 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	4b0c      	ldr	r3, [pc, #48]	; (800208c <MX_DMA_Init+0x3c>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a0b      	ldr	r2, [pc, #44]	; (800208c <MX_DMA_Init+0x3c>)
 8002060:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <MX_DMA_Init+0x3c>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002072:	2200      	movs	r2, #0
 8002074:	2105      	movs	r1, #5
 8002076:	203a      	movs	r0, #58	; 0x3a
 8002078:	f000 ffb2 	bl	8002fe0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800207c:	203a      	movs	r0, #58	; 0x3a
 800207e:	f000 ffcb 	bl	8003018 <HAL_NVIC_EnableIRQ>

}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800

08002090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08a      	sub	sp, #40	; 0x28
 8002094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	60da      	str	r2, [r3, #12]
 80020a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	4b38      	ldr	r3, [pc, #224]	; (800218c <MX_GPIO_Init+0xfc>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a37      	ldr	r2, [pc, #220]	; (800218c <MX_GPIO_Init+0xfc>)
 80020b0:	f043 0304 	orr.w	r3, r3, #4
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b35      	ldr	r3, [pc, #212]	; (800218c <MX_GPIO_Init+0xfc>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	4b31      	ldr	r3, [pc, #196]	; (800218c <MX_GPIO_Init+0xfc>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	4a30      	ldr	r2, [pc, #192]	; (800218c <MX_GPIO_Init+0xfc>)
 80020cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020d0:	6313      	str	r3, [r2, #48]	; 0x30
 80020d2:	4b2e      	ldr	r3, [pc, #184]	; (800218c <MX_GPIO_Init+0xfc>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	4b2a      	ldr	r3, [pc, #168]	; (800218c <MX_GPIO_Init+0xfc>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a29      	ldr	r2, [pc, #164]	; (800218c <MX_GPIO_Init+0xfc>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b27      	ldr	r3, [pc, #156]	; (800218c <MX_GPIO_Init+0xfc>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	4b23      	ldr	r3, [pc, #140]	; (800218c <MX_GPIO_Init+0xfc>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a22      	ldr	r2, [pc, #136]	; (800218c <MX_GPIO_Init+0xfc>)
 8002104:	f043 0302 	orr.w	r3, r3, #2
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <MX_GPIO_Init+0xfc>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002116:	2200      	movs	r2, #0
 8002118:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800211c:	481c      	ldr	r0, [pc, #112]	; (8002190 <MX_GPIO_Init+0x100>)
 800211e:	f001 fc0f 	bl	8003940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 8002122:	2200      	movs	r2, #0
 8002124:	f240 4103 	movw	r1, #1027	; 0x403
 8002128:	481a      	ldr	r0, [pc, #104]	; (8002194 <MX_GPIO_Init+0x104>)
 800212a:	f001 fc09 	bl	8003940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800212e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002134:	2301      	movs	r3, #1
 8002136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213c:	2300      	movs	r3, #0
 800213e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	4812      	ldr	r0, [pc, #72]	; (8002190 <MX_GPIO_Init+0x100>)
 8002148:	f001 fa5e 	bl	8003608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 800214c:	f240 4303 	movw	r3, #1027	; 0x403
 8002150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002152:	2301      	movs	r3, #1
 8002154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	4619      	mov	r1, r3
 8002164:	480b      	ldr	r0, [pc, #44]	; (8002194 <MX_GPIO_Init+0x104>)
 8002166:	f001 fa4f 	bl	8003608 <HAL_GPIO_Init>

  /*Configure GPIO pins : up_Pin down_Pin right_Pin left_Pin
                           draw_stop_Pin */
  GPIO_InitStruct.Pin = up_Pin|down_Pin|right_Pin|left_Pin
 800216a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800216e:	617b      	str	r3, [r7, #20]
                          |draw_stop_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002170:	2300      	movs	r3, #0
 8002172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002174:	2302      	movs	r3, #2
 8002176:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	4619      	mov	r1, r3
 800217e:	4806      	ldr	r0, [pc, #24]	; (8002198 <MX_GPIO_Init+0x108>)
 8002180:	f001 fa42 	bl	8003608 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002184:	bf00      	nop
 8002186:	3728      	adds	r7, #40	; 0x28
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40023800 	.word	0x40023800
 8002190:	40020800 	.word	0x40020800
 8002194:	40020400 	.word	0x40020400
 8002198:	40020000 	.word	0x40020000

0800219c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80021a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021a8:	4803      	ldr	r0, [pc, #12]	; (80021b8 <StartDefaultTask+0x1c>)
 80021aa:	f001 fbe2 	bl	8003972 <HAL_GPIO_TogglePin>
	osDelay(500);
 80021ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021b2:	f004 fa02 	bl	80065ba <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80021b6:	e7f5      	b.n	80021a4 <StartDefaultTask+0x8>
 80021b8:	40020800 	.word	0x40020800

080021bc <start_baca_sht>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_baca_sht */
void start_baca_sht(void const * argument)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_baca_sht */
  /* Infinite loop */
  for(;;)
  {
	temp = SHT2x_GetTemperature(1);
 80021c4:	2001      	movs	r0, #1
 80021c6:	f7ff faa7 	bl	8001718 <SHT2x_GetTemperature>
 80021ca:	eef0 7a40 	vmov.f32	s15, s0
 80021ce:	4b4f      	ldr	r3, [pc, #316]	; (800230c <start_baca_sht+0x150>)
 80021d0:	edc3 7a00 	vstr	s15, [r3]
	hum = SHT2x_GetRelativeHumidity(1);
 80021d4:	2001      	movs	r0, #1
 80021d6:	f7ff fae5 	bl	80017a4 <SHT2x_GetRelativeHumidity>
 80021da:	eef0 7a40 	vmov.f32	s15, s0
 80021de:	4b4c      	ldr	r3, [pc, #304]	; (8002310 <start_baca_sht+0x154>)
 80021e0:	edc3 7a00 	vstr	s15, [r3]
	float sum_temp=0;
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
	float sum_hum=0;
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]
	// Filter Section for Temp & Hum
	for(int i=0;i<9;i++)
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	e019      	b.n	800222a <start_baca_sht+0x6e>
	{
		buffer[i]=buffer[i+1];
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	3301      	adds	r3, #1
 80021fa:	4a46      	ldr	r2, [pc, #280]	; (8002314 <start_baca_sht+0x158>)
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	4944      	ldr	r1, [pc, #272]	; (8002314 <start_baca_sht+0x158>)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	601a      	str	r2, [r3, #0]
		sum_temp=sum_temp+buffer[i];
 800220c:	4a41      	ldr	r2, [pc, #260]	; (8002314 <start_baca_sht+0x158>)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	edd3 7a00 	vldr	s15, [r3]
 8002218:	ed97 7a05 	vldr	s14, [r7, #20]
 800221c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002220:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<9;i++)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3301      	adds	r3, #1
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b08      	cmp	r3, #8
 800222e:	dde2      	ble.n	80021f6 <start_baca_sht+0x3a>
	}
	buffer[9]=temp;
 8002230:	4b36      	ldr	r3, [pc, #216]	; (800230c <start_baca_sht+0x150>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a37      	ldr	r2, [pc, #220]	; (8002314 <start_baca_sht+0x158>)
 8002236:	6253      	str	r3, [r2, #36]	; 0x24
	sum_temp=sum_temp+buffer[9];
 8002238:	4b36      	ldr	r3, [pc, #216]	; (8002314 <start_baca_sht+0x158>)
 800223a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800223e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002246:	edc7 7a05 	vstr	s15, [r7, #20]
	filtered_temp=sum_temp/10.0;
 800224a:	ed97 7a05 	vldr	s14, [r7, #20]
 800224e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002252:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002256:	4b30      	ldr	r3, [pc, #192]	; (8002318 <start_baca_sht+0x15c>)
 8002258:	edc3 7a00 	vstr	s15, [r3]

	for(int i=0;i<9;i++)
 800225c:	2300      	movs	r3, #0
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	e019      	b.n	8002296 <start_baca_sht+0xda>
	{
		buffer_hum[i]=buffer_hum[i+1];
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	3301      	adds	r3, #1
 8002266:	4a2d      	ldr	r2, [pc, #180]	; (800231c <start_baca_sht+0x160>)
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	492b      	ldr	r1, [pc, #172]	; (800231c <start_baca_sht+0x160>)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	601a      	str	r2, [r3, #0]
		sum_hum=sum_hum+buffer_hum[i];
 8002278:	4a28      	ldr	r2, [pc, #160]	; (800231c <start_baca_sht+0x160>)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	edd3 7a00 	vldr	s15, [r3]
 8002284:	ed97 7a04 	vldr	s14, [r7, #16]
 8002288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228c:	edc7 7a04 	vstr	s15, [r7, #16]
	for(int i=0;i<9;i++)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	3301      	adds	r3, #1
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b08      	cmp	r3, #8
 800229a:	dde2      	ble.n	8002262 <start_baca_sht+0xa6>
	}
	buffer_hum[9]=hum;
 800229c:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <start_baca_sht+0x154>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1e      	ldr	r2, [pc, #120]	; (800231c <start_baca_sht+0x160>)
 80022a2:	6253      	str	r3, [r2, #36]	; 0x24
	sum_hum=sum_hum+buffer_hum[9];
 80022a4:	4b1d      	ldr	r3, [pc, #116]	; (800231c <start_baca_sht+0x160>)
 80022a6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80022aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80022ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b2:	edc7 7a04 	vstr	s15, [r7, #16]
	filtered_hum=sum_hum/10.0;
 80022b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80022ba:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80022be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022c2:	4b17      	ldr	r3, [pc, #92]	; (8002320 <start_baca_sht+0x164>)
 80022c4:	edc3 7a00 	vstr	s15, [r3]
	// End of Filter Section

	snprintf(str1, sizeof(str1), "Temperature = %.2f C", filtered_temp);
 80022c8:	4b13      	ldr	r3, [pc, #76]	; (8002318 <start_baca_sht+0x15c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f943 	bl	8000558 <__aeabi_f2d>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	e9cd 2300 	strd	r2, r3, [sp]
 80022da:	4a12      	ldr	r2, [pc, #72]	; (8002324 <start_baca_sht+0x168>)
 80022dc:	2128      	movs	r1, #40	; 0x28
 80022de:	4812      	ldr	r0, [pc, #72]	; (8002328 <start_baca_sht+0x16c>)
 80022e0:	f006 fdd0 	bl	8008e84 <sniprintf>
	snprintf(str2, sizeof(str2), "R. Humidity = %.2f %%", hum);
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <start_baca_sht+0x154>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe f935 	bl	8000558 <__aeabi_f2d>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	e9cd 2300 	strd	r2, r3, [sp]
 80022f6:	4a0d      	ldr	r2, [pc, #52]	; (800232c <start_baca_sht+0x170>)
 80022f8:	2128      	movs	r1, #40	; 0x28
 80022fa:	480d      	ldr	r0, [pc, #52]	; (8002330 <start_baca_sht+0x174>)
 80022fc:	f006 fdc2 	bl	8008e84 <sniprintf>
    osDelay(500);
 8002300:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002304:	f004 f959 	bl	80065ba <osDelay>
  {
 8002308:	e75c      	b.n	80021c4 <start_baca_sht+0x8>
 800230a:	bf00      	nop
 800230c:	20000598 	.word	0x20000598
 8002310:	2000059c 	.word	0x2000059c
 8002314:	200006a8 	.word	0x200006a8
 8002318:	200006f8 	.word	0x200006f8
 800231c:	200006d0 	.word	0x200006d0
 8002320:	200006fc 	.word	0x200006fc
 8002324:	0800b298 	.word	0x0800b298
 8002328:	200005a0 	.word	0x200005a0
 800232c:	0800b2b0 	.word	0x0800b2b0
 8002330:	200005c8 	.word	0x200005c8

08002334 <start_display>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_display */
void start_display(void const * argument)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08c      	sub	sp, #48	; 0x30
 8002338:	af04      	add	r7, sp, #16
 800233a:	6078      	str	r0, [r7, #4]
  {

	RTC_DateTypeDef currentDate;
	RTC_TimeTypeDef currentTime;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 800233c:	f107 0308 	add.w	r3, r7, #8
 8002340:	2200      	movs	r2, #0
 8002342:	4619      	mov	r1, r3
 8002344:	4840      	ldr	r0, [pc, #256]	; (8002448 <start_display+0x114>)
 8002346:	f003 f9c0 	bl	80056ca <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 800234a:	f107 031c 	add.w	r3, r7, #28
 800234e:	2200      	movs	r2, #0
 8002350:	4619      	mov	r1, r3
 8002352:	483d      	ldr	r0, [pc, #244]	; (8002448 <start_display+0x114>)
 8002354:	f003 fa9b 	bl	800588e <HAL_RTC_GetDate>
	snprintf(date, sizeof(date), "Uptime: %02d:%02d:%02d", currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8002358:	7a3b      	ldrb	r3, [r7, #8]
 800235a:	4619      	mov	r1, r3
 800235c:	7a7b      	ldrb	r3, [r7, #9]
 800235e:	7aba      	ldrb	r2, [r7, #10]
 8002360:	9201      	str	r2, [sp, #4]
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	460b      	mov	r3, r1
 8002366:	4a39      	ldr	r2, [pc, #228]	; (800244c <start_display+0x118>)
 8002368:	2196      	movs	r1, #150	; 0x96
 800236a:	4839      	ldr	r0, [pc, #228]	; (8002450 <start_display+0x11c>)
 800236c:	f006 fd8a 	bl	8008e84 <sniprintf>
	srand(currentTime.Seconds);
 8002370:	7abb      	ldrb	r3, [r7, #10]
 8002372:	4618      	mov	r0, r3
 8002374:	f005 fff2 	bl	800835c <srand>
	ILI9341_WriteString(0, 50, str1, Font_11x18, 0x663f, ILI9341_BLACK);
 8002378:	4b36      	ldr	r3, [pc, #216]	; (8002454 <start_display+0x120>)
 800237a:	2200      	movs	r2, #0
 800237c:	9202      	str	r2, [sp, #8]
 800237e:	f246 623f 	movw	r2, #26175	; 0x663f
 8002382:	9201      	str	r2, [sp, #4]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	9200      	str	r2, [sp, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a33      	ldr	r2, [pc, #204]	; (8002458 <start_display+0x124>)
 800238c:	2132      	movs	r1, #50	; 0x32
 800238e:	2000      	movs	r0, #0
 8002390:	f7ff f83f 	bl	8001412 <ILI9341_WriteString>
	//ILI9341_WriteString(0, 70, str2, Font_11x18, 0x04bf, ILI9341_BLACK); // show humidity
	ILI9341_WriteString(0, 70, date, Font_11x18, ILI9341_WHITE, ILI9341_BLACK); // show time
 8002394:	4b2f      	ldr	r3, [pc, #188]	; (8002454 <start_display+0x120>)
 8002396:	2200      	movs	r2, #0
 8002398:	9202      	str	r2, [sp, #8]
 800239a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800239e:	9201      	str	r2, [sp, #4]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	9200      	str	r2, [sp, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a2a      	ldr	r2, [pc, #168]	; (8002450 <start_display+0x11c>)
 80023a8:	2146      	movs	r1, #70	; 0x46
 80023aa:	2000      	movs	r0, #0
 80023ac:	f7ff f831 	bl	8001412 <ILI9341_WriteString>
	ILI9341_WriteString(10, 110, score_left, Font_11x18, 0xff80, ILI9341_BLACK); // show time
 80023b0:	4b28      	ldr	r3, [pc, #160]	; (8002454 <start_display+0x120>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	9202      	str	r2, [sp, #8]
 80023b6:	f64f 7280 	movw	r2, #65408	; 0xff80
 80023ba:	9201      	str	r2, [sp, #4]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	9200      	str	r2, [sp, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a26      	ldr	r2, [pc, #152]	; (800245c <start_display+0x128>)
 80023c4:	216e      	movs	r1, #110	; 0x6e
 80023c6:	200a      	movs	r0, #10
 80023c8:	f7ff f823 	bl	8001412 <ILI9341_WriteString>
	ILI9341_WriteString(270, 110, score_right, Font_11x18, 0x07e2, ILI9341_BLACK); // show time
 80023cc:	4b21      	ldr	r3, [pc, #132]	; (8002454 <start_display+0x120>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	9202      	str	r2, [sp, #8]
 80023d2:	f240 72e2 	movw	r2, #2018	; 0x7e2
 80023d6:	9201      	str	r2, [sp, #4]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	9200      	str	r2, [sp, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a20      	ldr	r2, [pc, #128]	; (8002460 <start_display+0x12c>)
 80023e0:	216e      	movs	r1, #110	; 0x6e
 80023e2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80023e6:	f7ff f814 	bl	8001412 <ILI9341_WriteString>
	{
		ILI9341_FillRectangle(x,y,3,3,ILI9341_WHITE);
	}
	else
		drawCursor(x,y,oldx,oldy);*/
	updateBallPos(bola.x,bola.y,oldx,oldy);
 80023ea:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <start_display+0x130>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	b298      	uxth	r0, r3
 80023f0:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <start_display+0x130>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	b299      	uxth	r1, r3
 80023f6:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <start_display+0x134>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	4b1b      	ldr	r3, [pc, #108]	; (800246c <start_display+0x138>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	f7ff fad3 	bl	80019ac <updateBallPos>
	updatePaddlePos(user.x,user.y,ouserx,ousery);
 8002406:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <start_display+0x13c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	b298      	uxth	r0, r3
 800240c:	4b18      	ldr	r3, [pc, #96]	; (8002470 <start_display+0x13c>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	b299      	uxth	r1, r3
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <start_display+0x140>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	b29a      	uxth	r2, r3
 8002418:	4b17      	ldr	r3, [pc, #92]	; (8002478 <start_display+0x144>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	b29b      	uxth	r3, r3
 800241e:	f7ff fb17 	bl	8001a50 <updatePaddlePos>
	updatePaddlePos(bot.x,bot.y,obotx,oboty);
 8002422:	4b16      	ldr	r3, [pc, #88]	; (800247c <start_display+0x148>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	b298      	uxth	r0, r3
 8002428:	4b14      	ldr	r3, [pc, #80]	; (800247c <start_display+0x148>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	b299      	uxth	r1, r3
 800242e:	4b14      	ldr	r3, [pc, #80]	; (8002480 <start_display+0x14c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b29a      	uxth	r2, r3
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <start_display+0x150>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	b29b      	uxth	r3, r3
 800243a:	f7ff fb09 	bl	8001a50 <updatePaddlePos>
    osDelay(16);
 800243e:	2010      	movs	r0, #16
 8002440:	f004 f8bb 	bl	80065ba <osDelay>
  {
 8002444:	e77a      	b.n	800233c <start_display+0x8>
 8002446:	bf00      	nop
 8002448:	200004a8 	.word	0x200004a8
 800244c:	0800b2c8 	.word	0x0800b2c8
 8002450:	200005f0 	.word	0x200005f0
 8002454:	20000000 	.word	0x20000000
 8002458:	200005a0 	.word	0x200005a0
 800245c:	20000688 	.word	0x20000688
 8002460:	20000694 	.word	0x20000694
 8002464:	20000750 	.word	0x20000750
 8002468:	20000708 	.word	0x20000708
 800246c:	2000070c 	.word	0x2000070c
 8002470:	20000728 	.word	0x20000728
 8002474:	20000710 	.word	0x20000710
 8002478:	20000714 	.word	0x20000714
 800247c:	2000073c 	.word	0x2000073c
 8002480:	20000718 	.word	0x20000718
 8002484:	2000071c 	.word	0x2000071c

08002488 <start_input_poll>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_input_poll */
void start_input_poll(void const * argument)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
		isDrawing=true;
	else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) && isDrawing==true)
		isDrawing=false;
		*/

	 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) && playerEnable==false)
 8002490:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002494:	4847      	ldr	r0, [pc, #284]	; (80025b4 <start_input_poll+0x12c>)
 8002496:	f001 fa3b 	bl	8003910 <HAL_GPIO_ReadPin>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <start_input_poll+0x2e>
 80024a0:	4b45      	ldr	r3, [pc, #276]	; (80025b8 <start_input_poll+0x130>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	f083 0301 	eor.w	r3, r3, #1
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <start_input_poll+0x2e>
	  	playerEnable=true;
 80024ae:	4b42      	ldr	r3, [pc, #264]	; (80025b8 <start_input_poll+0x130>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]
 80024b4:	e00e      	b.n	80024d4 <start_input_poll+0x4c>
	 else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) && playerEnable==true)
 80024b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024ba:	483e      	ldr	r0, [pc, #248]	; (80025b4 <start_input_poll+0x12c>)
 80024bc:	f001 fa28 	bl	8003910 <HAL_GPIO_ReadPin>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d006      	beq.n	80024d4 <start_input_poll+0x4c>
 80024c6:	4b3c      	ldr	r3, [pc, #240]	; (80025b8 <start_input_poll+0x130>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <start_input_poll+0x4c>
	  	playerEnable=false;
 80024ce:	4b3a      	ldr	r3, [pc, #232]	; (80025b8 <start_input_poll+0x130>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
	 // paddle user ke atas
	 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) && user.y>=110)
 80024d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024d8:	4836      	ldr	r0, [pc, #216]	; (80025b4 <start_input_poll+0x12c>)
 80024da:	f001 fa19 	bl	8003910 <HAL_GPIO_ReadPin>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00f      	beq.n	8002504 <start_input_poll+0x7c>
 80024e4:	4b35      	ldr	r3, [pc, #212]	; (80025bc <start_input_poll+0x134>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b6d      	cmp	r3, #109	; 0x6d
 80024ea:	dd0b      	ble.n	8002504 <start_input_poll+0x7c>
	 {
	  	ousery = user.y;
 80024ec:	4b33      	ldr	r3, [pc, #204]	; (80025bc <start_input_poll+0x134>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4a33      	ldr	r2, [pc, #204]	; (80025c0 <start_input_poll+0x138>)
 80024f2:	6013      	str	r3, [r2, #0]
	  	user.y=user.y-user.speed;
 80024f4:	4b31      	ldr	r3, [pc, #196]	; (80025bc <start_input_poll+0x134>)
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	4b30      	ldr	r3, [pc, #192]	; (80025bc <start_input_poll+0x134>)
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	4a2f      	ldr	r2, [pc, #188]	; (80025bc <start_input_poll+0x134>)
 8002500:	6053      	str	r3, [r2, #4]
 8002502:	e019      	b.n	8002538 <start_input_poll+0xb0>
	 }
	 // paddle bot ke bawah
	 else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) && user.y+user.height<=230)
 8002504:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002508:	482a      	ldr	r0, [pc, #168]	; (80025b4 <start_input_poll+0x12c>)
 800250a:	f001 fa01 	bl	8003910 <HAL_GPIO_ReadPin>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d011      	beq.n	8002538 <start_input_poll+0xb0>
 8002514:	4b29      	ldr	r3, [pc, #164]	; (80025bc <start_input_poll+0x134>)
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	4b28      	ldr	r3, [pc, #160]	; (80025bc <start_input_poll+0x134>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4413      	add	r3, r2
 800251e:	2be6      	cmp	r3, #230	; 0xe6
 8002520:	dc0a      	bgt.n	8002538 <start_input_poll+0xb0>
	 {
		ousery = user.y;
 8002522:	4b26      	ldr	r3, [pc, #152]	; (80025bc <start_input_poll+0x134>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4a26      	ldr	r2, [pc, #152]	; (80025c0 <start_input_poll+0x138>)
 8002528:	6013      	str	r3, [r2, #0]
		user.y=user.y+user.speed;
 800252a:	4b24      	ldr	r3, [pc, #144]	; (80025bc <start_input_poll+0x134>)
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	4b23      	ldr	r3, [pc, #140]	; (80025bc <start_input_poll+0x134>)
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	4413      	add	r3, r2
 8002534:	4a21      	ldr	r2, [pc, #132]	; (80025bc <start_input_poll+0x134>)
 8002536:	6053      	str	r3, [r2, #4]
	 }
	 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) && bot.y>=110 && playerEnable==true)
 8002538:	f44f 7100 	mov.w	r1, #512	; 0x200
 800253c:	481d      	ldr	r0, [pc, #116]	; (80025b4 <start_input_poll+0x12c>)
 800253e:	f001 f9e7 	bl	8003910 <HAL_GPIO_ReadPin>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d013      	beq.n	8002570 <start_input_poll+0xe8>
 8002548:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <start_input_poll+0x13c>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b6d      	cmp	r3, #109	; 0x6d
 800254e:	dd0f      	ble.n	8002570 <start_input_poll+0xe8>
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <start_input_poll+0x130>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00b      	beq.n	8002570 <start_input_poll+0xe8>
	 {
	 	oboty = bot.y;
 8002558:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <start_input_poll+0x13c>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	4a1a      	ldr	r2, [pc, #104]	; (80025c8 <start_input_poll+0x140>)
 800255e:	6013      	str	r3, [r2, #0]
	 	bot.y=bot.y-bot.speed;
 8002560:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <start_input_poll+0x13c>)
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <start_input_poll+0x13c>)
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	4a16      	ldr	r2, [pc, #88]	; (80025c4 <start_input_poll+0x13c>)
 800256c:	6053      	str	r3, [r2, #4]
 800256e:	e01d      	b.n	80025ac <start_input_poll+0x124>
	 }
	 	 // paddle bot ke bawah
	 else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) && bot.y+bot.height<=230 && playerEnable==true)
 8002570:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002574:	480f      	ldr	r0, [pc, #60]	; (80025b4 <start_input_poll+0x12c>)
 8002576:	f001 f9cb 	bl	8003910 <HAL_GPIO_ReadPin>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d015      	beq.n	80025ac <start_input_poll+0x124>
 8002580:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <start_input_poll+0x13c>)
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <start_input_poll+0x13c>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4413      	add	r3, r2
 800258a:	2be6      	cmp	r3, #230	; 0xe6
 800258c:	dc0e      	bgt.n	80025ac <start_input_poll+0x124>
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <start_input_poll+0x130>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <start_input_poll+0x124>
	 {
	 	oboty = bot.y;
 8002596:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <start_input_poll+0x13c>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <start_input_poll+0x140>)
 800259c:	6013      	str	r3, [r2, #0]
	    bot.y=bot.y+bot.speed;
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <start_input_poll+0x13c>)
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <start_input_poll+0x13c>)
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	4413      	add	r3, r2
 80025a8:	4a06      	ldr	r2, [pc, #24]	; (80025c4 <start_input_poll+0x13c>)
 80025aa:	6053      	str	r3, [r2, #4]
	 }
    osDelay(16);
 80025ac:	2010      	movs	r0, #16
 80025ae:	f004 f804 	bl	80065ba <osDelay>
	 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) && playerEnable==false)
 80025b2:	e76d      	b.n	8002490 <start_input_poll+0x8>
 80025b4:	40020000 	.word	0x40020000
 80025b8:	20000724 	.word	0x20000724
 80025bc:	20000728 	.word	0x20000728
 80025c0:	20000714 	.word	0x20000714
 80025c4:	2000073c 	.word	0x2000073c
 80025c8:	2000071c 	.word	0x2000071c

080025cc <start_game_master>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_game_master */
void start_game_master(void const * argument)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_game_master */
  /* Infinite loop */
  for(;;)
  {
	// Crossing Paddle Score
	if(bola.x+2>=user.x+user.width && (bola.y >= user.y+user.height || bola.y <= user.y)){
 80025d4:	4b7f      	ldr	r3, [pc, #508]	; (80027d4 <start_game_master+0x208>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	1c9a      	adds	r2, r3, #2
 80025da:	4b7f      	ldr	r3, [pc, #508]	; (80027d8 <start_game_master+0x20c>)
 80025dc:	6819      	ldr	r1, [r3, #0]
 80025de:	4b7e      	ldr	r3, [pc, #504]	; (80027d8 <start_game_master+0x20c>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	440b      	add	r3, r1
 80025e4:	429a      	cmp	r2, r3
 80025e6:	db1d      	blt.n	8002624 <start_game_master+0x58>
 80025e8:	4b7a      	ldr	r3, [pc, #488]	; (80027d4 <start_game_master+0x208>)
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	4b7a      	ldr	r3, [pc, #488]	; (80027d8 <start_game_master+0x20c>)
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	4b79      	ldr	r3, [pc, #484]	; (80027d8 <start_game_master+0x20c>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	440b      	add	r3, r1
 80025f6:	429a      	cmp	r2, r3
 80025f8:	da05      	bge.n	8002606 <start_game_master+0x3a>
 80025fa:	4b76      	ldr	r3, [pc, #472]	; (80027d4 <start_game_master+0x208>)
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	4b76      	ldr	r3, [pc, #472]	; (80027d8 <start_game_master+0x20c>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	429a      	cmp	r2, r3
 8002604:	dc0e      	bgt.n	8002624 <start_game_master+0x58>
	  	scoreL=scoreL+1;
 8002606:	4b75      	ldr	r3, [pc, #468]	; (80027dc <start_game_master+0x210>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	3301      	adds	r3, #1
 800260c:	4a73      	ldr	r2, [pc, #460]	; (80027dc <start_game_master+0x210>)
 800260e:	6013      	str	r3, [r2, #0]
	  	snprintf(score_left, sizeof(score_left), "%d", scoreL);
 8002610:	4b72      	ldr	r3, [pc, #456]	; (80027dc <start_game_master+0x210>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a72      	ldr	r2, [pc, #456]	; (80027e0 <start_game_master+0x214>)
 8002616:	210a      	movs	r1, #10
 8002618:	4872      	ldr	r0, [pc, #456]	; (80027e4 <start_game_master+0x218>)
 800261a:	f006 fc33 	bl	8008e84 <sniprintf>
	  	resetBallStatus();
 800261e:	f7ff fa3b 	bl	8001a98 <resetBallStatus>
 8002622:	e022      	b.n	800266a <start_game_master+0x9e>
	}
	else if(bola.x<=bot.x && (bola.y >= bot.y+bot.height || bola.y <= bot.y)){
 8002624:	4b6b      	ldr	r3, [pc, #428]	; (80027d4 <start_game_master+0x208>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4b6f      	ldr	r3, [pc, #444]	; (80027e8 <start_game_master+0x21c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	dc1c      	bgt.n	800266a <start_game_master+0x9e>
 8002630:	4b68      	ldr	r3, [pc, #416]	; (80027d4 <start_game_master+0x208>)
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	4b6c      	ldr	r3, [pc, #432]	; (80027e8 <start_game_master+0x21c>)
 8002636:	6859      	ldr	r1, [r3, #4]
 8002638:	4b6b      	ldr	r3, [pc, #428]	; (80027e8 <start_game_master+0x21c>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	440b      	add	r3, r1
 800263e:	429a      	cmp	r2, r3
 8002640:	da05      	bge.n	800264e <start_game_master+0x82>
 8002642:	4b64      	ldr	r3, [pc, #400]	; (80027d4 <start_game_master+0x208>)
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	4b68      	ldr	r3, [pc, #416]	; (80027e8 <start_game_master+0x21c>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	429a      	cmp	r2, r3
 800264c:	dc0d      	bgt.n	800266a <start_game_master+0x9e>
	  	scoreR=scoreR+1;
 800264e:	4b67      	ldr	r3, [pc, #412]	; (80027ec <start_game_master+0x220>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	3301      	adds	r3, #1
 8002654:	4a65      	ldr	r2, [pc, #404]	; (80027ec <start_game_master+0x220>)
 8002656:	6013      	str	r3, [r2, #0]
	  	snprintf(score_right, sizeof(score_right), "%d", scoreR);
 8002658:	4b64      	ldr	r3, [pc, #400]	; (80027ec <start_game_master+0x220>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a60      	ldr	r2, [pc, #384]	; (80027e0 <start_game_master+0x214>)
 800265e:	210a      	movs	r1, #10
 8002660:	4863      	ldr	r0, [pc, #396]	; (80027f0 <start_game_master+0x224>)
 8002662:	f006 fc0f 	bl	8008e84 <sniprintf>
	  	resetBallStatus();
 8002666:	f7ff fa17 	bl	8001a98 <resetBallStatus>
	}

	// Reflecting Algorithm
	if(bola.x+2>=user.x && (bola.y >= user.y && bola.y <= user.y+user.height)){
 800266a:	4b5a      	ldr	r3, [pc, #360]	; (80027d4 <start_game_master+0x208>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	1c9a      	adds	r2, r3, #2
 8002670:	4b59      	ldr	r3, [pc, #356]	; (80027d8 <start_game_master+0x20c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	db14      	blt.n	80026a2 <start_game_master+0xd6>
 8002678:	4b56      	ldr	r3, [pc, #344]	; (80027d4 <start_game_master+0x208>)
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	4b56      	ldr	r3, [pc, #344]	; (80027d8 <start_game_master+0x20c>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	429a      	cmp	r2, r3
 8002682:	db0e      	blt.n	80026a2 <start_game_master+0xd6>
 8002684:	4b53      	ldr	r3, [pc, #332]	; (80027d4 <start_game_master+0x208>)
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	4b53      	ldr	r3, [pc, #332]	; (80027d8 <start_game_master+0x20c>)
 800268a:	6859      	ldr	r1, [r3, #4]
 800268c:	4b52      	ldr	r3, [pc, #328]	; (80027d8 <start_game_master+0x20c>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	440b      	add	r3, r1
 8002692:	429a      	cmp	r2, r3
 8002694:	dc05      	bgt.n	80026a2 <start_game_master+0xd6>
		bola.velx=-bola.velx;
 8002696:	4b4f      	ldr	r3, [pc, #316]	; (80027d4 <start_game_master+0x208>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	425b      	negs	r3, r3
 800269c:	4a4d      	ldr	r2, [pc, #308]	; (80027d4 <start_game_master+0x208>)
 800269e:	6093      	str	r3, [r2, #8]
 80026a0:	e01c      	b.n	80026dc <start_game_master+0x110>
	}
	else if(bola.x<=bot.x+bot.width && (bola.y >= bot.y && bola.y <= bot.y+bot.height)){
 80026a2:	4b4c      	ldr	r3, [pc, #304]	; (80027d4 <start_game_master+0x208>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4b50      	ldr	r3, [pc, #320]	; (80027e8 <start_game_master+0x21c>)
 80026a8:	6819      	ldr	r1, [r3, #0]
 80026aa:	4b4f      	ldr	r3, [pc, #316]	; (80027e8 <start_game_master+0x21c>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	440b      	add	r3, r1
 80026b0:	429a      	cmp	r2, r3
 80026b2:	dc13      	bgt.n	80026dc <start_game_master+0x110>
 80026b4:	4b47      	ldr	r3, [pc, #284]	; (80027d4 <start_game_master+0x208>)
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	4b4b      	ldr	r3, [pc, #300]	; (80027e8 <start_game_master+0x21c>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	429a      	cmp	r2, r3
 80026be:	db0d      	blt.n	80026dc <start_game_master+0x110>
 80026c0:	4b44      	ldr	r3, [pc, #272]	; (80027d4 <start_game_master+0x208>)
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	4b48      	ldr	r3, [pc, #288]	; (80027e8 <start_game_master+0x21c>)
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	4b47      	ldr	r3, [pc, #284]	; (80027e8 <start_game_master+0x21c>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	440b      	add	r3, r1
 80026ce:	429a      	cmp	r2, r3
 80026d0:	dc04      	bgt.n	80026dc <start_game_master+0x110>
		bola.velx=-bola.velx;
 80026d2:	4b40      	ldr	r3, [pc, #256]	; (80027d4 <start_game_master+0x208>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	425b      	negs	r3, r3
 80026d8:	4a3e      	ldr	r2, [pc, #248]	; (80027d4 <start_game_master+0x208>)
 80026da:	6093      	str	r3, [r2, #8]
	}

	// Reflecting With Top and Bottom Boundary
	if(bola.y<=110){
 80026dc:	4b3d      	ldr	r3, [pc, #244]	; (80027d4 <start_game_master+0x208>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b6e      	cmp	r3, #110	; 0x6e
 80026e2:	dc05      	bgt.n	80026f0 <start_game_master+0x124>
		bola.vely=-bola.vely;
 80026e4:	4b3b      	ldr	r3, [pc, #236]	; (80027d4 <start_game_master+0x208>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	425b      	negs	r3, r3
 80026ea:	4a3a      	ldr	r2, [pc, #232]	; (80027d4 <start_game_master+0x208>)
 80026ec:	60d3      	str	r3, [r2, #12]
 80026ee:	e008      	b.n	8002702 <start_game_master+0x136>
	}
	else if(bola.y>=229){
 80026f0:	4b38      	ldr	r3, [pc, #224]	; (80027d4 <start_game_master+0x208>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2be4      	cmp	r3, #228	; 0xe4
 80026f6:	dd04      	ble.n	8002702 <start_game_master+0x136>
		bola.vely=-bola.vely;
 80026f8:	4b36      	ldr	r3, [pc, #216]	; (80027d4 <start_game_master+0x208>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	425b      	negs	r3, r3
 80026fe:	4a35      	ldr	r2, [pc, #212]	; (80027d4 <start_game_master+0x208>)
 8002700:	60d3      	str	r3, [r2, #12]
	}

	// bot (left paddle) chasing ball's y position
	if((bot.y+bot.height/2 != bola.y+1 && playerEnable == false)/* && (bot.y>=120 || bot.y+bot.height<=240)*/)
 8002702:	4b39      	ldr	r3, [pc, #228]	; (80027e8 <start_game_master+0x21c>)
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <start_game_master+0x21c>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	0fd9      	lsrs	r1, r3, #31
 800270c:	440b      	add	r3, r1
 800270e:	105b      	asrs	r3, r3, #1
 8002710:	441a      	add	r2, r3
 8002712:	4b30      	ldr	r3, [pc, #192]	; (80027d4 <start_game_master+0x208>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	3301      	adds	r3, #1
 8002718:	429a      	cmp	r2, r3
 800271a:	d041      	beq.n	80027a0 <start_game_master+0x1d4>
 800271c:	4b35      	ldr	r3, [pc, #212]	; (80027f4 <start_game_master+0x228>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	f083 0301 	eor.w	r3, r3, #1
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d03a      	beq.n	80027a0 <start_game_master+0x1d4>
	{
		if((bot.y+bot.height/2 < bola.y+1) && bot.y+bot.height<=230)
 800272a:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <start_game_master+0x208>)
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	4b2e      	ldr	r3, [pc, #184]	; (80027e8 <start_game_master+0x21c>)
 8002730:	6859      	ldr	r1, [r3, #4]
 8002732:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <start_game_master+0x21c>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	0fd8      	lsrs	r0, r3, #31
 8002738:	4403      	add	r3, r0
 800273a:	105b      	asrs	r3, r3, #1
 800273c:	440b      	add	r3, r1
 800273e:	429a      	cmp	r2, r3
 8002740:	db12      	blt.n	8002768 <start_game_master+0x19c>
 8002742:	4b29      	ldr	r3, [pc, #164]	; (80027e8 <start_game_master+0x21c>)
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	4b28      	ldr	r3, [pc, #160]	; (80027e8 <start_game_master+0x21c>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	4413      	add	r3, r2
 800274c:	2be6      	cmp	r3, #230	; 0xe6
 800274e:	dc0b      	bgt.n	8002768 <start_game_master+0x19c>
		{
			oboty=bot.y;
 8002750:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <start_game_master+0x21c>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a28      	ldr	r2, [pc, #160]	; (80027f8 <start_game_master+0x22c>)
 8002756:	6013      	str	r3, [r2, #0]
			bot.y=bot.y+bot.speed;
 8002758:	4b23      	ldr	r3, [pc, #140]	; (80027e8 <start_game_master+0x21c>)
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <start_game_master+0x21c>)
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	4413      	add	r3, r2
 8002762:	4a21      	ldr	r2, [pc, #132]	; (80027e8 <start_game_master+0x21c>)
 8002764:	6053      	str	r3, [r2, #4]
 8002766:	e01b      	b.n	80027a0 <start_game_master+0x1d4>
		}
		else if((bot.y+bot.height/2 > bola.y+1) && bot.y>=110)
 8002768:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <start_game_master+0x21c>)
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <start_game_master+0x21c>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	0fd9      	lsrs	r1, r3, #31
 8002772:	440b      	add	r3, r1
 8002774:	105b      	asrs	r3, r3, #1
 8002776:	441a      	add	r2, r3
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <start_game_master+0x208>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	3301      	adds	r3, #1
 800277e:	429a      	cmp	r2, r3
 8002780:	dd0e      	ble.n	80027a0 <start_game_master+0x1d4>
 8002782:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <start_game_master+0x21c>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b6d      	cmp	r3, #109	; 0x6d
 8002788:	dd0a      	ble.n	80027a0 <start_game_master+0x1d4>
		{	oboty=bot.y;
 800278a:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <start_game_master+0x21c>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	4a1a      	ldr	r2, [pc, #104]	; (80027f8 <start_game_master+0x22c>)
 8002790:	6013      	str	r3, [r2, #0]
			bot.y=bot.y-bot.speed;
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <start_game_master+0x21c>)
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <start_game_master+0x21c>)
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	4a12      	ldr	r2, [pc, #72]	; (80027e8 <start_game_master+0x21c>)
 800279e:	6053      	str	r3, [r2, #4]
		}
	}

	oldx=bola.x;
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <start_game_master+0x208>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a15      	ldr	r2, [pc, #84]	; (80027fc <start_game_master+0x230>)
 80027a6:	6013      	str	r3, [r2, #0]
	oldy=bola.y;
 80027a8:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <start_game_master+0x208>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4a14      	ldr	r2, [pc, #80]	; (8002800 <start_game_master+0x234>)
 80027ae:	6013      	str	r3, [r2, #0]
	bola.x=bola.x+bola.velx;
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <start_game_master+0x208>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <start_game_master+0x208>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4413      	add	r3, r2
 80027ba:	4a06      	ldr	r2, [pc, #24]	; (80027d4 <start_game_master+0x208>)
 80027bc:	6013      	str	r3, [r2, #0]
	bola.y=bola.y+bola.vely;
 80027be:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <start_game_master+0x208>)
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <start_game_master+0x208>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	4a02      	ldr	r2, [pc, #8]	; (80027d4 <start_game_master+0x208>)
 80027ca:	6053      	str	r3, [r2, #4]
    osDelay(16);
 80027cc:	2010      	movs	r0, #16
 80027ce:	f003 fef4 	bl	80065ba <osDelay>
	if(bola.x+2>=user.x+user.width && (bola.y >= user.y+user.height || bola.y <= user.y)){
 80027d2:	e6ff      	b.n	80025d4 <start_game_master+0x8>
 80027d4:	20000750 	.word	0x20000750
 80027d8:	20000728 	.word	0x20000728
 80027dc:	200006a0 	.word	0x200006a0
 80027e0:	0800b2e0 	.word	0x0800b2e0
 80027e4:	20000688 	.word	0x20000688
 80027e8:	2000073c 	.word	0x2000073c
 80027ec:	200006a4 	.word	0x200006a4
 80027f0:	20000694 	.word	0x20000694
 80027f4:	20000724 	.word	0x20000724
 80027f8:	2000071c 	.word	0x2000071c
 80027fc:	20000708 	.word	0x20000708
 8002800:	2000070c 	.word	0x2000070c

08002804 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a04      	ldr	r2, [pc, #16]	; (8002824 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d101      	bne.n	800281a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002816:	f000 fae7 	bl	8002de8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40010000 	.word	0x40010000

08002828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800282c:	b672      	cpsid	i
}
 800282e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002830:	e7fe      	b.n	8002830 <Error_Handler+0x8>
	...

08002834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_MspInit+0x54>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	4a11      	ldr	r2, [pc, #68]	; (8002888 <HAL_MspInit+0x54>)
 8002844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002848:	6453      	str	r3, [r2, #68]	; 0x44
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <HAL_MspInit+0x54>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_MspInit+0x54>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <HAL_MspInit+0x54>)
 8002860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <HAL_MspInit+0x54>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002872:	2200      	movs	r2, #0
 8002874:	210f      	movs	r1, #15
 8002876:	f06f 0001 	mvn.w	r0, #1
 800287a:	f000 fbb1 	bl	8002fe0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800

0800288c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	; 0x28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 0314 	add.w	r3, r7, #20
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a19      	ldr	r2, [pc, #100]	; (8002910 <HAL_I2C_MspInit+0x84>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d12b      	bne.n	8002906 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	4b18      	ldr	r3, [pc, #96]	; (8002914 <HAL_I2C_MspInit+0x88>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a17      	ldr	r2, [pc, #92]	; (8002914 <HAL_I2C_MspInit+0x88>)
 80028b8:	f043 0302 	orr.w	r3, r3, #2
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_I2C_MspInit+0x88>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028ca:	23c0      	movs	r3, #192	; 0xc0
 80028cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ce:	2312      	movs	r3, #18
 80028d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d6:	2303      	movs	r3, #3
 80028d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028da:	2304      	movs	r3, #4
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028de:	f107 0314 	add.w	r3, r7, #20
 80028e2:	4619      	mov	r1, r3
 80028e4:	480c      	ldr	r0, [pc, #48]	; (8002918 <HAL_I2C_MspInit+0x8c>)
 80028e6:	f000 fe8f 	bl	8003608 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_I2C_MspInit+0x88>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	4a08      	ldr	r2, [pc, #32]	; (8002914 <HAL_I2C_MspInit+0x88>)
 80028f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028f8:	6413      	str	r3, [r2, #64]	; 0x40
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_I2C_MspInit+0x88>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002906:	bf00      	nop
 8002908:	3728      	adds	r7, #40	; 0x28
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40005400 	.word	0x40005400
 8002914:	40023800 	.word	0x40023800
 8002918:	40020400 	.word	0x40020400

0800291c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002924:	f107 0308 	add.w	r3, r7, #8
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
 8002934:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a0c      	ldr	r2, [pc, #48]	; (800296c <HAL_RTC_MspInit+0x50>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d111      	bne.n	8002964 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002940:	2302      	movs	r3, #2
 8002942:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002948:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800294a:	f107 0308 	add.w	r3, r7, #8
 800294e:	4618      	mov	r0, r3
 8002950:	f002 fcae 	bl	80052b0 <HAL_RCCEx_PeriphCLKConfig>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800295a:	f7ff ff65 	bl	8002828 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800295e:	4b04      	ldr	r3, [pc, #16]	; (8002970 <HAL_RTC_MspInit+0x54>)
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002964:	bf00      	nop
 8002966:	3720      	adds	r7, #32
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40002800 	.word	0x40002800
 8002970:	42470e3c 	.word	0x42470e3c

08002974 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	; 0x28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a30      	ldr	r2, [pc, #192]	; (8002a54 <HAL_SPI_MspInit+0xe0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d159      	bne.n	8002a4a <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	4b2f      	ldr	r3, [pc, #188]	; (8002a58 <HAL_SPI_MspInit+0xe4>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	4a2e      	ldr	r2, [pc, #184]	; (8002a58 <HAL_SPI_MspInit+0xe4>)
 80029a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029a4:	6453      	str	r3, [r2, #68]	; 0x44
 80029a6:	4b2c      	ldr	r3, [pc, #176]	; (8002a58 <HAL_SPI_MspInit+0xe4>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b28      	ldr	r3, [pc, #160]	; (8002a58 <HAL_SPI_MspInit+0xe4>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	4a27      	ldr	r2, [pc, #156]	; (8002a58 <HAL_SPI_MspInit+0xe4>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6313      	str	r3, [r2, #48]	; 0x30
 80029c2:	4b25      	ldr	r3, [pc, #148]	; (8002a58 <HAL_SPI_MspInit+0xe4>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029ce:	23e0      	movs	r3, #224	; 0xe0
 80029d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029de:	2305      	movs	r3, #5
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e2:	f107 0314 	add.w	r3, r7, #20
 80029e6:	4619      	mov	r1, r3
 80029e8:	481c      	ldr	r0, [pc, #112]	; (8002a5c <HAL_SPI_MspInit+0xe8>)
 80029ea:	f000 fe0d 	bl	8003608 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80029ee:	4b1c      	ldr	r3, [pc, #112]	; (8002a60 <HAL_SPI_MspInit+0xec>)
 80029f0:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <HAL_SPI_MspInit+0xf0>)
 80029f2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80029f4:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <HAL_SPI_MspInit+0xec>)
 80029f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80029fa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029fc:	4b18      	ldr	r3, [pc, #96]	; (8002a60 <HAL_SPI_MspInit+0xec>)
 80029fe:	2240      	movs	r2, #64	; 0x40
 8002a00:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a02:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <HAL_SPI_MspInit+0xec>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a08:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <HAL_SPI_MspInit+0xec>)
 8002a0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a0e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a10:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <HAL_SPI_MspInit+0xec>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a16:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_SPI_MspInit+0xec>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002a1c:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <HAL_SPI_MspInit+0xec>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a22:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <HAL_SPI_MspInit+0xec>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a28:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <HAL_SPI_MspInit+0xec>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002a2e:	480c      	ldr	r0, [pc, #48]	; (8002a60 <HAL_SPI_MspInit+0xec>)
 8002a30:	f000 fb00 	bl	8003034 <HAL_DMA_Init>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8002a3a:	f7ff fef5 	bl	8002828 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a07      	ldr	r2, [pc, #28]	; (8002a60 <HAL_SPI_MspInit+0xec>)
 8002a42:	649a      	str	r2, [r3, #72]	; 0x48
 8002a44:	4a06      	ldr	r2, [pc, #24]	; (8002a60 <HAL_SPI_MspInit+0xec>)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a4a:	bf00      	nop
 8002a4c:	3728      	adds	r7, #40	; 0x28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40013000 	.word	0x40013000
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40020000 	.word	0x40020000
 8002a60:	20000520 	.word	0x20000520
 8002a64:	40026440 	.word	0x40026440

08002a68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08c      	sub	sp, #48	; 0x30
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	4b2e      	ldr	r3, [pc, #184]	; (8002b38 <HAL_InitTick+0xd0>)
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a80:	4a2d      	ldr	r2, [pc, #180]	; (8002b38 <HAL_InitTick+0xd0>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	6453      	str	r3, [r2, #68]	; 0x44
 8002a88:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <HAL_InitTick+0xd0>)
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a94:	f107 020c 	add.w	r2, r7, #12
 8002a98:	f107 0310 	add.w	r3, r7, #16
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f002 fbd4 	bl	800524c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002aa4:	f002 fbbe 	bl	8005224 <HAL_RCC_GetPCLK2Freq>
 8002aa8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aac:	4a23      	ldr	r2, [pc, #140]	; (8002b3c <HAL_InitTick+0xd4>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	0c9b      	lsrs	r3, r3, #18
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002ab8:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <HAL_InitTick+0xd8>)
 8002aba:	4a22      	ldr	r2, [pc, #136]	; (8002b44 <HAL_InitTick+0xdc>)
 8002abc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_InitTick+0xd8>)
 8002ac0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ac4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002ac6:	4a1e      	ldr	r2, [pc, #120]	; (8002b40 <HAL_InitTick+0xd8>)
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002acc:	4b1c      	ldr	r3, [pc, #112]	; (8002b40 <HAL_InitTick+0xd8>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad2:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <HAL_InitTick+0xd8>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_InitTick+0xd8>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002ade:	4818      	ldr	r0, [pc, #96]	; (8002b40 <HAL_InitTick+0xd8>)
 8002ae0:	f003 fa8c 	bl	8005ffc <HAL_TIM_Base_Init>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002aea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d11b      	bne.n	8002b2a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002af2:	4813      	ldr	r0, [pc, #76]	; (8002b40 <HAL_InitTick+0xd8>)
 8002af4:	f003 fadc 	bl	80060b0 <HAL_TIM_Base_Start_IT>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002afe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d111      	bne.n	8002b2a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002b06:	2019      	movs	r0, #25
 8002b08:	f000 fa86 	bl	8003018 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b0f      	cmp	r3, #15
 8002b10:	d808      	bhi.n	8002b24 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002b12:	2200      	movs	r2, #0
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	2019      	movs	r0, #25
 8002b18:	f000 fa62 	bl	8002fe0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b1c:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <HAL_InitTick+0xe0>)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e002      	b.n	8002b2a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002b2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3730      	adds	r7, #48	; 0x30
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	431bde83 	.word	0x431bde83
 8002b40:	20000764 	.word	0x20000764
 8002b44:	40010000 	.word	0x40010000
 8002b48:	2000000c 	.word	0x2000000c

08002b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b50:	e7fe      	b.n	8002b50 <NMI_Handler+0x4>

08002b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b56:	e7fe      	b.n	8002b56 <HardFault_Handler+0x4>

08002b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b5c:	e7fe      	b.n	8002b5c <MemManage_Handler+0x4>

08002b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b62:	e7fe      	b.n	8002b62 <BusFault_Handler+0x4>

08002b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b68:	e7fe      	b.n	8002b68 <UsageFault_Handler+0x4>

08002b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002b7e:	f003 faf9 	bl	8006174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000764 	.word	0x20000764

08002b8c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002b90:	4802      	ldr	r0, [pc, #8]	; (8002b9c <DMA2_Stream2_IRQHandler+0x10>)
 8002b92:	f000 fafd 	bl	8003190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000520 	.word	0x20000520

08002ba0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return 1;
 8002ba4:	2301      	movs	r3, #1
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <_kill>:

int _kill(int pid, int sig)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bba:	f006 fa2d 	bl	8009018 <__errno>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2216      	movs	r2, #22
 8002bc2:	601a      	str	r2, [r3, #0]
  return -1;
 8002bc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <_exit>:

void _exit (int status)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff ffe7 	bl	8002bb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002be2:	e7fe      	b.n	8002be2 <_exit+0x12>

08002be4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	e00a      	b.n	8002c0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bf6:	f3af 8000 	nop.w
 8002bfa:	4601      	mov	r1, r0
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	60ba      	str	r2, [r7, #8]
 8002c02:	b2ca      	uxtb	r2, r1
 8002c04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	dbf0      	blt.n	8002bf6 <_read+0x12>
  }

  return len;
 8002c14:	687b      	ldr	r3, [r7, #4]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b086      	sub	sp, #24
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	e009      	b.n	8002c44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	60ba      	str	r2, [r7, #8]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	3301      	adds	r3, #1
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	dbf1      	blt.n	8002c30 <_write+0x12>
  }
  return len;
 8002c4c:	687b      	ldr	r3, [r7, #4]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <_close>:

int _close(int file)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c7e:	605a      	str	r2, [r3, #4]
  return 0;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <_isatty>:

int _isatty(int file)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c96:	2301      	movs	r3, #1
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cc8:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <_sbrk+0x5c>)
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <_sbrk+0x60>)
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cd4:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <_sbrk+0x64>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d102      	bne.n	8002ce2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cdc:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <_sbrk+0x64>)
 8002cde:	4a12      	ldr	r2, [pc, #72]	; (8002d28 <_sbrk+0x68>)
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <_sbrk+0x64>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d207      	bcs.n	8002d00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cf0:	f006 f992 	bl	8009018 <__errno>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	220c      	movs	r2, #12
 8002cf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfe:	e009      	b.n	8002d14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d00:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <_sbrk+0x64>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d06:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <_sbrk+0x64>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	4a05      	ldr	r2, [pc, #20]	; (8002d24 <_sbrk+0x64>)
 8002d10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d12:	68fb      	ldr	r3, [r7, #12]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20020000 	.word	0x20020000
 8002d20:	00000400 	.word	0x00000400
 8002d24:	200007ac 	.word	0x200007ac
 8002d28:	20004658 	.word	0x20004658

08002d2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <SystemInit+0x20>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d36:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <SystemInit+0x20>)
 8002d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d54:	f7ff ffea 	bl	8002d2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d58:	480c      	ldr	r0, [pc, #48]	; (8002d8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d5a:	490d      	ldr	r1, [pc, #52]	; (8002d90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d5c:	4a0d      	ldr	r2, [pc, #52]	; (8002d94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d60:	e002      	b.n	8002d68 <LoopCopyDataInit>

08002d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d66:	3304      	adds	r3, #4

08002d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d6c:	d3f9      	bcc.n	8002d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d6e:	4a0a      	ldr	r2, [pc, #40]	; (8002d98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d70:	4c0a      	ldr	r4, [pc, #40]	; (8002d9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d74:	e001      	b.n	8002d7a <LoopFillZerobss>

08002d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d78:	3204      	adds	r2, #4

08002d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d7c:	d3fb      	bcc.n	8002d76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d7e:	f006 f951 	bl	8009024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d82:	f7fe fef5 	bl	8001b70 <main>
  bx  lr    
 8002d86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d90:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002d94:	0800d7c8 	.word	0x0800d7c8
  ldr r2, =_sbss
 8002d98:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002d9c:	20004654 	.word	0x20004654

08002da0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002da0:	e7fe      	b.n	8002da0 <ADC_IRQHandler>
	...

08002da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002da8:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <HAL_Init+0x40>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0d      	ldr	r2, [pc, #52]	; (8002de4 <HAL_Init+0x40>)
 8002dae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002db2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <HAL_Init+0x40>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <HAL_Init+0x40>)
 8002dba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dc0:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <HAL_Init+0x40>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a07      	ldr	r2, [pc, #28]	; (8002de4 <HAL_Init+0x40>)
 8002dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dcc:	2003      	movs	r0, #3
 8002dce:	f000 f8fc 	bl	8002fca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dd2:	200f      	movs	r0, #15
 8002dd4:	f7ff fe48 	bl	8002a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dd8:	f7ff fd2c 	bl	8002834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40023c00 	.word	0x40023c00

08002de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_IncTick+0x20>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <HAL_IncTick+0x24>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4413      	add	r3, r2
 8002df8:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <HAL_IncTick+0x24>)
 8002dfa:	6013      	str	r3, [r2, #0]
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	20000010 	.word	0x20000010
 8002e0c:	200007b0 	.word	0x200007b0

08002e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return uwTick;
 8002e14:	4b03      	ldr	r3, [pc, #12]	; (8002e24 <HAL_GetTick+0x14>)
 8002e16:	681b      	ldr	r3, [r3, #0]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	200007b0 	.word	0x200007b0

08002e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e30:	f7ff ffee 	bl	8002e10 <HAL_GetTick>
 8002e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e40:	d005      	beq.n	8002e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e42:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <HAL_Delay+0x44>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e4e:	bf00      	nop
 8002e50:	f7ff ffde 	bl	8002e10 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d8f7      	bhi.n	8002e50 <HAL_Delay+0x28>
  {
  }
}
 8002e60:	bf00      	nop
 8002e62:	bf00      	nop
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000010 	.word	0x20000010

08002e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ea2:	4a04      	ldr	r2, [pc, #16]	; (8002eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	60d3      	str	r3, [r2, #12]
}
 8002ea8:	bf00      	nop
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ebc:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	0a1b      	lsrs	r3, r3, #8
 8002ec2:	f003 0307 	and.w	r3, r3, #7
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	db0b      	blt.n	8002efe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	f003 021f 	and.w	r2, r3, #31
 8002eec:	4907      	ldr	r1, [pc, #28]	; (8002f0c <__NVIC_EnableIRQ+0x38>)
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8002efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	e000e100 	.word	0xe000e100

08002f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	6039      	str	r1, [r7, #0]
 8002f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	db0a      	blt.n	8002f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	490c      	ldr	r1, [pc, #48]	; (8002f5c <__NVIC_SetPriority+0x4c>)
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	0112      	lsls	r2, r2, #4
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	440b      	add	r3, r1
 8002f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f38:	e00a      	b.n	8002f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	4908      	ldr	r1, [pc, #32]	; (8002f60 <__NVIC_SetPriority+0x50>)
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	3b04      	subs	r3, #4
 8002f48:	0112      	lsls	r2, r2, #4
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	761a      	strb	r2, [r3, #24]
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000e100 	.word	0xe000e100
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b089      	sub	sp, #36	; 0x24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f1c3 0307 	rsb	r3, r3, #7
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	bf28      	it	cs
 8002f82:	2304      	movcs	r3, #4
 8002f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	2b06      	cmp	r3, #6
 8002f8c:	d902      	bls.n	8002f94 <NVIC_EncodePriority+0x30>
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	3b03      	subs	r3, #3
 8002f92:	e000      	b.n	8002f96 <NVIC_EncodePriority+0x32>
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f98:	f04f 32ff 	mov.w	r2, #4294967295
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fac:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb6:	43d9      	mvns	r1, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fbc:	4313      	orrs	r3, r2
         );
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3724      	adds	r7, #36	; 0x24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff ff4c 	bl	8002e70 <__NVIC_SetPriorityGrouping>
}
 8002fd8:	bf00      	nop
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ff2:	f7ff ff61 	bl	8002eb8 <__NVIC_GetPriorityGrouping>
 8002ff6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	68b9      	ldr	r1, [r7, #8]
 8002ffc:	6978      	ldr	r0, [r7, #20]
 8002ffe:	f7ff ffb1 	bl	8002f64 <NVIC_EncodePriority>
 8003002:	4602      	mov	r2, r0
 8003004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff ff80 	bl	8002f10 <__NVIC_SetPriority>
}
 8003010:	bf00      	nop
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff ff54 	bl	8002ed4 <__NVIC_EnableIRQ>
}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003040:	f7ff fee6 	bl	8002e10 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e099      	b.n	8003184 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0201 	bic.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003070:	e00f      	b.n	8003092 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003072:	f7ff fecd 	bl	8002e10 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b05      	cmp	r3, #5
 800307e:	d908      	bls.n	8003092 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2203      	movs	r2, #3
 800308a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e078      	b.n	8003184 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1e8      	bne.n	8003072 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	4b38      	ldr	r3, [pc, #224]	; (800318c <HAL_DMA_Init+0x158>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d107      	bne.n	80030fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	4313      	orrs	r3, r2
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f023 0307 	bic.w	r3, r3, #7
 8003112:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	2b04      	cmp	r3, #4
 8003124:	d117      	bne.n	8003156 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	4313      	orrs	r3, r2
 800312e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00e      	beq.n	8003156 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f9e9 	bl	8003510 <DMA_CheckFifoParam>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d008      	beq.n	8003156 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2240      	movs	r2, #64	; 0x40
 8003148:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003152:	2301      	movs	r3, #1
 8003154:	e016      	b.n	8003184 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f9a0 	bl	80034a4 <DMA_CalcBaseAndBitshift>
 8003164:	4603      	mov	r3, r0
 8003166:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316c:	223f      	movs	r2, #63	; 0x3f
 800316e:	409a      	lsls	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	f010803f 	.word	0xf010803f

08003190 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800319c:	4b8e      	ldr	r3, [pc, #568]	; (80033d8 <HAL_DMA_IRQHandler+0x248>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a8e      	ldr	r2, [pc, #568]	; (80033dc <HAL_DMA_IRQHandler+0x24c>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	0a9b      	lsrs	r3, r3, #10
 80031a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ba:	2208      	movs	r2, #8
 80031bc:	409a      	lsls	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d01a      	beq.n	80031fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d013      	beq.n	80031fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0204 	bic.w	r2, r2, #4
 80031e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e8:	2208      	movs	r2, #8
 80031ea:	409a      	lsls	r2, r3
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f4:	f043 0201 	orr.w	r2, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003200:	2201      	movs	r2, #1
 8003202:	409a      	lsls	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d012      	beq.n	8003232 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321e:	2201      	movs	r2, #1
 8003220:	409a      	lsls	r2, r3
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322a:	f043 0202 	orr.w	r2, r3, #2
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003236:	2204      	movs	r2, #4
 8003238:	409a      	lsls	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4013      	ands	r3, r2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d012      	beq.n	8003268 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00b      	beq.n	8003268 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	2204      	movs	r2, #4
 8003256:	409a      	lsls	r2, r3
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003260:	f043 0204 	orr.w	r2, r3, #4
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326c:	2210      	movs	r2, #16
 800326e:	409a      	lsls	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d043      	beq.n	8003300 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d03c      	beq.n	8003300 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328a:	2210      	movs	r2, #16
 800328c:	409a      	lsls	r2, r3
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d018      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d108      	bne.n	80032c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d024      	beq.n	8003300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	4798      	blx	r3
 80032be:	e01f      	b.n	8003300 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01b      	beq.n	8003300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
 80032d0:	e016      	b.n	8003300 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d107      	bne.n	80032f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0208 	bic.w	r2, r2, #8
 80032ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	2220      	movs	r2, #32
 8003306:	409a      	lsls	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4013      	ands	r3, r2
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 808f 	beq.w	8003430 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8087 	beq.w	8003430 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003326:	2220      	movs	r2, #32
 8003328:	409a      	lsls	r2, r3
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b05      	cmp	r3, #5
 8003338:	d136      	bne.n	80033a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0216 	bic.w	r2, r2, #22
 8003348:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003358:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d103      	bne.n	800336a <HAL_DMA_IRQHandler+0x1da>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0208 	bic.w	r2, r2, #8
 8003378:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337e:	223f      	movs	r2, #63	; 0x3f
 8003380:	409a      	lsls	r2, r3
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339a:	2b00      	cmp	r3, #0
 800339c:	d07e      	beq.n	800349c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	4798      	blx	r3
        }
        return;
 80033a6:	e079      	b.n	800349c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d01d      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10d      	bne.n	80033e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d031      	beq.n	8003430 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	4798      	blx	r3
 80033d4:	e02c      	b.n	8003430 <HAL_DMA_IRQHandler+0x2a0>
 80033d6:	bf00      	nop
 80033d8:	20000008 	.word	0x20000008
 80033dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d023      	beq.n	8003430 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	4798      	blx	r3
 80033f0:	e01e      	b.n	8003430 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10f      	bne.n	8003420 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0210 	bic.w	r2, r2, #16
 800340e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003434:	2b00      	cmp	r3, #0
 8003436:	d032      	beq.n	800349e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d022      	beq.n	800348a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2205      	movs	r2, #5
 8003448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0201 	bic.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	3301      	adds	r3, #1
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	429a      	cmp	r2, r3
 8003466:	d307      	bcc.n	8003478 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f2      	bne.n	800345c <HAL_DMA_IRQHandler+0x2cc>
 8003476:	e000      	b.n	800347a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003478:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
 800349a:	e000      	b.n	800349e <HAL_DMA_IRQHandler+0x30e>
        return;
 800349c:	bf00      	nop
    }
  }
}
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	3b10      	subs	r3, #16
 80034b4:	4a14      	ldr	r2, [pc, #80]	; (8003508 <DMA_CalcBaseAndBitshift+0x64>)
 80034b6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ba:	091b      	lsrs	r3, r3, #4
 80034bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034be:	4a13      	ldr	r2, [pc, #76]	; (800350c <DMA_CalcBaseAndBitshift+0x68>)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4413      	add	r3, r2
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d909      	bls.n	80034e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034da:	f023 0303 	bic.w	r3, r3, #3
 80034de:	1d1a      	adds	r2, r3, #4
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	659a      	str	r2, [r3, #88]	; 0x58
 80034e4:	e007      	b.n	80034f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034ee:	f023 0303 	bic.w	r3, r3, #3
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	aaaaaaab 	.word	0xaaaaaaab
 800350c:	0800d3e8 	.word	0x0800d3e8

08003510 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d11f      	bne.n	800356a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b03      	cmp	r3, #3
 800352e:	d856      	bhi.n	80035de <DMA_CheckFifoParam+0xce>
 8003530:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <DMA_CheckFifoParam+0x28>)
 8003532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003536:	bf00      	nop
 8003538:	08003549 	.word	0x08003549
 800353c:	0800355b 	.word	0x0800355b
 8003540:	08003549 	.word	0x08003549
 8003544:	080035df 	.word	0x080035df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d046      	beq.n	80035e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003558:	e043      	b.n	80035e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003562:	d140      	bne.n	80035e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003568:	e03d      	b.n	80035e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003572:	d121      	bne.n	80035b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b03      	cmp	r3, #3
 8003578:	d837      	bhi.n	80035ea <DMA_CheckFifoParam+0xda>
 800357a:	a201      	add	r2, pc, #4	; (adr r2, 8003580 <DMA_CheckFifoParam+0x70>)
 800357c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003580:	08003591 	.word	0x08003591
 8003584:	08003597 	.word	0x08003597
 8003588:	08003591 	.word	0x08003591
 800358c:	080035a9 	.word	0x080035a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
      break;
 8003594:	e030      	b.n	80035f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d025      	beq.n	80035ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a6:	e022      	b.n	80035ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035b0:	d11f      	bne.n	80035f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035b6:	e01c      	b.n	80035f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d903      	bls.n	80035c6 <DMA_CheckFifoParam+0xb6>
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d003      	beq.n	80035cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035c4:	e018      	b.n	80035f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	73fb      	strb	r3, [r7, #15]
      break;
 80035ca:	e015      	b.n	80035f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00e      	beq.n	80035f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
      break;
 80035dc:	e00b      	b.n	80035f6 <DMA_CheckFifoParam+0xe6>
      break;
 80035de:	bf00      	nop
 80035e0:	e00a      	b.n	80035f8 <DMA_CheckFifoParam+0xe8>
      break;
 80035e2:	bf00      	nop
 80035e4:	e008      	b.n	80035f8 <DMA_CheckFifoParam+0xe8>
      break;
 80035e6:	bf00      	nop
 80035e8:	e006      	b.n	80035f8 <DMA_CheckFifoParam+0xe8>
      break;
 80035ea:	bf00      	nop
 80035ec:	e004      	b.n	80035f8 <DMA_CheckFifoParam+0xe8>
      break;
 80035ee:	bf00      	nop
 80035f0:	e002      	b.n	80035f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80035f2:	bf00      	nop
 80035f4:	e000      	b.n	80035f8 <DMA_CheckFifoParam+0xe8>
      break;
 80035f6:	bf00      	nop
    }
  } 
  
  return status; 
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop

08003608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003608:	b480      	push	{r7}
 800360a:	b089      	sub	sp, #36	; 0x24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003616:	2300      	movs	r3, #0
 8003618:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800361a:	2300      	movs	r3, #0
 800361c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	e159      	b.n	80038d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003624:	2201      	movs	r2, #1
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4013      	ands	r3, r2
 8003636:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	429a      	cmp	r2, r3
 800363e:	f040 8148 	bne.w	80038d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b01      	cmp	r3, #1
 800364c:	d005      	beq.n	800365a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003656:	2b02      	cmp	r3, #2
 8003658:	d130      	bne.n	80036bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	2203      	movs	r2, #3
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43db      	mvns	r3, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4013      	ands	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4313      	orrs	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003690:	2201      	movs	r2, #1
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	091b      	lsrs	r3, r3, #4
 80036a6:	f003 0201 	and.w	r2, r3, #1
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 0303 	and.w	r3, r3, #3
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d017      	beq.n	80036f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	2203      	movs	r2, #3
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d123      	bne.n	800374c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	08da      	lsrs	r2, r3, #3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3208      	adds	r2, #8
 800370c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003710:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	220f      	movs	r2, #15
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	43db      	mvns	r3, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4013      	ands	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	08da      	lsrs	r2, r3, #3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3208      	adds	r2, #8
 8003746:	69b9      	ldr	r1, [r7, #24]
 8003748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	2203      	movs	r2, #3
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4013      	ands	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0203 	and.w	r2, r3, #3
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4313      	orrs	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 80a2 	beq.w	80038d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	4b57      	ldr	r3, [pc, #348]	; (80038f0 <HAL_GPIO_Init+0x2e8>)
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	4a56      	ldr	r2, [pc, #344]	; (80038f0 <HAL_GPIO_Init+0x2e8>)
 8003798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800379c:	6453      	str	r3, [r2, #68]	; 0x44
 800379e:	4b54      	ldr	r3, [pc, #336]	; (80038f0 <HAL_GPIO_Init+0x2e8>)
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037aa:	4a52      	ldr	r2, [pc, #328]	; (80038f4 <HAL_GPIO_Init+0x2ec>)
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	089b      	lsrs	r3, r3, #2
 80037b0:	3302      	adds	r3, #2
 80037b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	220f      	movs	r2, #15
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4013      	ands	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a49      	ldr	r2, [pc, #292]	; (80038f8 <HAL_GPIO_Init+0x2f0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d019      	beq.n	800380a <HAL_GPIO_Init+0x202>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a48      	ldr	r2, [pc, #288]	; (80038fc <HAL_GPIO_Init+0x2f4>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d013      	beq.n	8003806 <HAL_GPIO_Init+0x1fe>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a47      	ldr	r2, [pc, #284]	; (8003900 <HAL_GPIO_Init+0x2f8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d00d      	beq.n	8003802 <HAL_GPIO_Init+0x1fa>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a46      	ldr	r2, [pc, #280]	; (8003904 <HAL_GPIO_Init+0x2fc>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d007      	beq.n	80037fe <HAL_GPIO_Init+0x1f6>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a45      	ldr	r2, [pc, #276]	; (8003908 <HAL_GPIO_Init+0x300>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d101      	bne.n	80037fa <HAL_GPIO_Init+0x1f2>
 80037f6:	2304      	movs	r3, #4
 80037f8:	e008      	b.n	800380c <HAL_GPIO_Init+0x204>
 80037fa:	2307      	movs	r3, #7
 80037fc:	e006      	b.n	800380c <HAL_GPIO_Init+0x204>
 80037fe:	2303      	movs	r3, #3
 8003800:	e004      	b.n	800380c <HAL_GPIO_Init+0x204>
 8003802:	2302      	movs	r3, #2
 8003804:	e002      	b.n	800380c <HAL_GPIO_Init+0x204>
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <HAL_GPIO_Init+0x204>
 800380a:	2300      	movs	r3, #0
 800380c:	69fa      	ldr	r2, [r7, #28]
 800380e:	f002 0203 	and.w	r2, r2, #3
 8003812:	0092      	lsls	r2, r2, #2
 8003814:	4093      	lsls	r3, r2
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800381c:	4935      	ldr	r1, [pc, #212]	; (80038f4 <HAL_GPIO_Init+0x2ec>)
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	089b      	lsrs	r3, r3, #2
 8003822:	3302      	adds	r3, #2
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800382a:	4b38      	ldr	r3, [pc, #224]	; (800390c <HAL_GPIO_Init+0x304>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	43db      	mvns	r3, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4013      	ands	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800384e:	4a2f      	ldr	r2, [pc, #188]	; (800390c <HAL_GPIO_Init+0x304>)
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003854:	4b2d      	ldr	r3, [pc, #180]	; (800390c <HAL_GPIO_Init+0x304>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	43db      	mvns	r3, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4313      	orrs	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003878:	4a24      	ldr	r2, [pc, #144]	; (800390c <HAL_GPIO_Init+0x304>)
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800387e:	4b23      	ldr	r3, [pc, #140]	; (800390c <HAL_GPIO_Init+0x304>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	43db      	mvns	r3, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4013      	ands	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038a2:	4a1a      	ldr	r2, [pc, #104]	; (800390c <HAL_GPIO_Init+0x304>)
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038a8:	4b18      	ldr	r3, [pc, #96]	; (800390c <HAL_GPIO_Init+0x304>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038cc:	4a0f      	ldr	r2, [pc, #60]	; (800390c <HAL_GPIO_Init+0x304>)
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	3301      	adds	r3, #1
 80038d6:	61fb      	str	r3, [r7, #28]
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	2b0f      	cmp	r3, #15
 80038dc:	f67f aea2 	bls.w	8003624 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038e0:	bf00      	nop
 80038e2:	bf00      	nop
 80038e4:	3724      	adds	r7, #36	; 0x24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40023800 	.word	0x40023800
 80038f4:	40013800 	.word	0x40013800
 80038f8:	40020000 	.word	0x40020000
 80038fc:	40020400 	.word	0x40020400
 8003900:	40020800 	.word	0x40020800
 8003904:	40020c00 	.word	0x40020c00
 8003908:	40021000 	.word	0x40021000
 800390c:	40013c00 	.word	0x40013c00

08003910 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	887b      	ldrh	r3, [r7, #2]
 8003922:	4013      	ands	r3, r2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
 800392c:	e001      	b.n	8003932 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800392e:	2300      	movs	r3, #0
 8003930:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003932:	7bfb      	ldrb	r3, [r7, #15]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	807b      	strh	r3, [r7, #2]
 800394c:	4613      	mov	r3, r2
 800394e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003950:	787b      	ldrb	r3, [r7, #1]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003956:	887a      	ldrh	r2, [r7, #2]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800395c:	e003      	b.n	8003966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800395e:	887b      	ldrh	r3, [r7, #2]
 8003960:	041a      	lsls	r2, r3, #16
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	619a      	str	r2, [r3, #24]
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003972:	b480      	push	{r7}
 8003974:	b085      	sub	sp, #20
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	460b      	mov	r3, r1
 800397c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003984:	887a      	ldrh	r2, [r7, #2]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4013      	ands	r3, r2
 800398a:	041a      	lsls	r2, r3, #16
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	43d9      	mvns	r1, r3
 8003990:	887b      	ldrh	r3, [r7, #2]
 8003992:	400b      	ands	r3, r1
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	619a      	str	r2, [r3, #24]
}
 800399a:	bf00      	nop
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e12b      	b.n	8003c12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fe ff5c 	bl	800288c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2224      	movs	r2, #36	; 0x24
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a0c:	f001 fbf6 	bl	80051fc <HAL_RCC_GetPCLK1Freq>
 8003a10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	4a81      	ldr	r2, [pc, #516]	; (8003c1c <HAL_I2C_Init+0x274>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d807      	bhi.n	8003a2c <HAL_I2C_Init+0x84>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4a80      	ldr	r2, [pc, #512]	; (8003c20 <HAL_I2C_Init+0x278>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	bf94      	ite	ls
 8003a24:	2301      	movls	r3, #1
 8003a26:	2300      	movhi	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	e006      	b.n	8003a3a <HAL_I2C_Init+0x92>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4a7d      	ldr	r2, [pc, #500]	; (8003c24 <HAL_I2C_Init+0x27c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	bf94      	ite	ls
 8003a34:	2301      	movls	r3, #1
 8003a36:	2300      	movhi	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e0e7      	b.n	8003c12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4a78      	ldr	r2, [pc, #480]	; (8003c28 <HAL_I2C_Init+0x280>)
 8003a46:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4a:	0c9b      	lsrs	r3, r3, #18
 8003a4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	4a6a      	ldr	r2, [pc, #424]	; (8003c1c <HAL_I2C_Init+0x274>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d802      	bhi.n	8003a7c <HAL_I2C_Init+0xd4>
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	e009      	b.n	8003a90 <HAL_I2C_Init+0xe8>
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a82:	fb02 f303 	mul.w	r3, r2, r3
 8003a86:	4a69      	ldr	r2, [pc, #420]	; (8003c2c <HAL_I2C_Init+0x284>)
 8003a88:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8c:	099b      	lsrs	r3, r3, #6
 8003a8e:	3301      	adds	r3, #1
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	430b      	orrs	r3, r1
 8003a96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003aa2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	495c      	ldr	r1, [pc, #368]	; (8003c1c <HAL_I2C_Init+0x274>)
 8003aac:	428b      	cmp	r3, r1
 8003aae:	d819      	bhi.n	8003ae4 <HAL_I2C_Init+0x13c>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1e59      	subs	r1, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	fbb1 f3f3 	udiv	r3, r1, r3
 8003abe:	1c59      	adds	r1, r3, #1
 8003ac0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ac4:	400b      	ands	r3, r1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <HAL_I2C_Init+0x138>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1e59      	subs	r1, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ad8:	3301      	adds	r3, #1
 8003ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ade:	e051      	b.n	8003b84 <HAL_I2C_Init+0x1dc>
 8003ae0:	2304      	movs	r3, #4
 8003ae2:	e04f      	b.n	8003b84 <HAL_I2C_Init+0x1dc>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d111      	bne.n	8003b10 <HAL_I2C_Init+0x168>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	1e58      	subs	r0, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	440b      	add	r3, r1
 8003afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003afe:	3301      	adds	r3, #1
 8003b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	bf0c      	ite	eq
 8003b08:	2301      	moveq	r3, #1
 8003b0a:	2300      	movne	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	e012      	b.n	8003b36 <HAL_I2C_Init+0x18e>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	1e58      	subs	r0, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	0099      	lsls	r1, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b26:	3301      	adds	r3, #1
 8003b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	bf0c      	ite	eq
 8003b30:	2301      	moveq	r3, #1
 8003b32:	2300      	movne	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <HAL_I2C_Init+0x196>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e022      	b.n	8003b84 <HAL_I2C_Init+0x1dc>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10e      	bne.n	8003b64 <HAL_I2C_Init+0x1bc>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	1e58      	subs	r0, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6859      	ldr	r1, [r3, #4]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	440b      	add	r3, r1
 8003b54:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b58:	3301      	adds	r3, #1
 8003b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b62:	e00f      	b.n	8003b84 <HAL_I2C_Init+0x1dc>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	1e58      	subs	r0, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6859      	ldr	r1, [r3, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	0099      	lsls	r1, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	6809      	ldr	r1, [r1, #0]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69da      	ldr	r2, [r3, #28]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6911      	ldr	r1, [r2, #16]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68d2      	ldr	r2, [r2, #12]
 8003bbe:	4311      	orrs	r1, r2
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695a      	ldr	r2, [r3, #20]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0201 	orr.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	000186a0 	.word	0x000186a0
 8003c20:	001e847f 	.word	0x001e847f
 8003c24:	003d08ff 	.word	0x003d08ff
 8003c28:	431bde83 	.word	0x431bde83
 8003c2c:	10624dd3 	.word	0x10624dd3

08003c30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	607a      	str	r2, [r7, #4]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	817b      	strh	r3, [r7, #10]
 8003c40:	4613      	mov	r3, r2
 8003c42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c44:	f7ff f8e4 	bl	8002e10 <HAL_GetTick>
 8003c48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	f040 80e0 	bne.w	8003e18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	2319      	movs	r3, #25
 8003c5e:	2201      	movs	r2, #1
 8003c60:	4970      	ldr	r1, [pc, #448]	; (8003e24 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fc64 	bl	8004530 <I2C_WaitOnFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e0d3      	b.n	8003e1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_I2C_Master_Transmit+0x50>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e0cc      	b.n	8003e1a <HAL_I2C_Master_Transmit+0x1ea>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d007      	beq.n	8003ca6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 0201 	orr.w	r2, r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2221      	movs	r2, #33	; 0x21
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2210      	movs	r2, #16
 8003cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	893a      	ldrh	r2, [r7, #8]
 8003cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4a50      	ldr	r2, [pc, #320]	; (8003e28 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ce6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ce8:	8979      	ldrh	r1, [r7, #10]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	6a3a      	ldr	r2, [r7, #32]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 face 	bl	8004290 <I2C_MasterRequestWrite>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e08d      	b.n	8003e1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d14:	e066      	b.n	8003de4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	6a39      	ldr	r1, [r7, #32]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 fd22 	bl	8004764 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00d      	beq.n	8003d42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d107      	bne.n	8003d3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e06b      	b.n	8003e1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	781a      	ldrb	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d11b      	bne.n	8003db8 <HAL_I2C_Master_Transmit+0x188>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d017      	beq.n	8003db8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	781a      	ldrb	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	6a39      	ldr	r1, [r7, #32]
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 fd19 	bl	80047f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00d      	beq.n	8003de4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d107      	bne.n	8003de0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dde:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e01a      	b.n	8003e1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d194      	bne.n	8003d16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	e000      	b.n	8003e1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e18:	2302      	movs	r3, #2
  }
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	00100002 	.word	0x00100002
 8003e28:	ffff0000 	.word	0xffff0000

08003e2c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08c      	sub	sp, #48	; 0x30
 8003e30:	af02      	add	r7, sp, #8
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	607a      	str	r2, [r7, #4]
 8003e36:	461a      	mov	r2, r3
 8003e38:	460b      	mov	r3, r1
 8003e3a:	817b      	strh	r3, [r7, #10]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e40:	f7fe ffe6 	bl	8002e10 <HAL_GetTick>
 8003e44:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	f040 8217 	bne.w	8004282 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	2319      	movs	r3, #25
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	497c      	ldr	r1, [pc, #496]	; (8004050 <HAL_I2C_Master_Receive+0x224>)
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 fb66 	bl	8004530 <I2C_WaitOnFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e20a      	b.n	8004284 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_I2C_Master_Receive+0x50>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e203      	b.n	8004284 <HAL_I2C_Master_Receive+0x458>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d007      	beq.n	8003ea2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f042 0201 	orr.w	r2, r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2222      	movs	r2, #34	; 0x22
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2210      	movs	r2, #16
 8003ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	893a      	ldrh	r2, [r7, #8]
 8003ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a5c      	ldr	r2, [pc, #368]	; (8004054 <HAL_I2C_Master_Receive+0x228>)
 8003ee2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ee4:	8979      	ldrh	r1, [r7, #10]
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 fa52 	bl	8004394 <I2C_MasterRequestRead>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e1c4      	b.n	8004284 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d113      	bne.n	8003f2a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f02:	2300      	movs	r3, #0
 8003f04:	623b      	str	r3, [r7, #32]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	623b      	str	r3, [r7, #32]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	623b      	str	r3, [r7, #32]
 8003f16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	e198      	b.n	800425c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d11b      	bne.n	8003f6a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	61fb      	str	r3, [r7, #28]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	61fb      	str	r3, [r7, #28]
 8003f56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	e178      	b.n	800425c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d11b      	bne.n	8003faa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f92:	2300      	movs	r3, #0
 8003f94:	61bb      	str	r3, [r7, #24]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	61bb      	str	r3, [r7, #24]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	61bb      	str	r3, [r7, #24]
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	e158      	b.n	800425c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	617b      	str	r3, [r7, #20]
 8003fce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003fd0:	e144      	b.n	800425c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	f200 80f1 	bhi.w	80041be <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d123      	bne.n	800402c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 fc4b 	bl	8004884 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e145      	b.n	8004284 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	855a      	strh	r2, [r3, #42]	; 0x2a
 800402a:	e117      	b.n	800425c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004030:	2b02      	cmp	r3, #2
 8004032:	d14e      	bne.n	80040d2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403a:	2200      	movs	r2, #0
 800403c:	4906      	ldr	r1, [pc, #24]	; (8004058 <HAL_I2C_Master_Receive+0x22c>)
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fa76 	bl	8004530 <I2C_WaitOnFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d008      	beq.n	800405c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e11a      	b.n	8004284 <HAL_I2C_Master_Receive+0x458>
 800404e:	bf00      	nop
 8004050:	00100002 	.word	0x00100002
 8004054:	ffff0000 	.word	0xffff0000
 8004058:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691a      	ldr	r2, [r3, #16]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040d0:	e0c4      	b.n	800425c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	2200      	movs	r2, #0
 80040da:	496c      	ldr	r1, [pc, #432]	; (800428c <HAL_I2C_Master_Receive+0x460>)
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 fa27 	bl	8004530 <I2C_WaitOnFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0cb      	b.n	8004284 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004134:	2200      	movs	r2, #0
 8004136:	4955      	ldr	r1, [pc, #340]	; (800428c <HAL_I2C_Master_Receive+0x460>)
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 f9f9 	bl	8004530 <I2C_WaitOnFlagUntilTimeout>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e09d      	b.n	8004284 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004156:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	b2d2      	uxtb	r2, r2
 8004196:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041bc:	e04e      	b.n	800425c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 fb5e 	bl	8004884 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e058      	b.n	8004284 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b04      	cmp	r3, #4
 8004210:	d124      	bne.n	800425c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004216:	2b03      	cmp	r3, #3
 8004218:	d107      	bne.n	800422a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004228:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004246:	3b01      	subs	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004260:	2b00      	cmp	r3, #0
 8004262:	f47f aeb6 	bne.w	8003fd2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	e000      	b.n	8004284 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004282:	2302      	movs	r3, #2
  }
}
 8004284:	4618      	mov	r0, r3
 8004286:	3728      	adds	r7, #40	; 0x28
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	00010004 	.word	0x00010004

08004290 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af02      	add	r7, sp, #8
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	460b      	mov	r3, r1
 800429e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d006      	beq.n	80042ba <I2C_MasterRequestWrite+0x2a>
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d003      	beq.n	80042ba <I2C_MasterRequestWrite+0x2a>
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042b8:	d108      	bne.n	80042cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	e00b      	b.n	80042e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	2b12      	cmp	r3, #18
 80042d2:	d107      	bne.n	80042e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f91d 	bl	8004530 <I2C_WaitOnFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00d      	beq.n	8004318 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800430a:	d103      	bne.n	8004314 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004312:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e035      	b.n	8004384 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004320:	d108      	bne.n	8004334 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004322:	897b      	ldrh	r3, [r7, #10]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	461a      	mov	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004330:	611a      	str	r2, [r3, #16]
 8004332:	e01b      	b.n	800436c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004334:	897b      	ldrh	r3, [r7, #10]
 8004336:	11db      	asrs	r3, r3, #7
 8004338:	b2db      	uxtb	r3, r3
 800433a:	f003 0306 	and.w	r3, r3, #6
 800433e:	b2db      	uxtb	r3, r3
 8004340:	f063 030f 	orn	r3, r3, #15
 8004344:	b2da      	uxtb	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	490e      	ldr	r1, [pc, #56]	; (800438c <I2C_MasterRequestWrite+0xfc>)
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f966 	bl	8004624 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e010      	b.n	8004384 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004362:	897b      	ldrh	r3, [r7, #10]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	4907      	ldr	r1, [pc, #28]	; (8004390 <I2C_MasterRequestWrite+0x100>)
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 f956 	bl	8004624 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	00010008 	.word	0x00010008
 8004390:	00010002 	.word	0x00010002

08004394 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af02      	add	r7, sp, #8
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	460b      	mov	r3, r1
 80043a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d006      	beq.n	80043ce <I2C_MasterRequestRead+0x3a>
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d003      	beq.n	80043ce <I2C_MasterRequestRead+0x3a>
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043cc:	d108      	bne.n	80043e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	e00b      	b.n	80043f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e4:	2b11      	cmp	r3, #17
 80043e6:	d107      	bne.n	80043f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f893 	bl	8004530 <I2C_WaitOnFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00d      	beq.n	800442c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800441e:	d103      	bne.n	8004428 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004426:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e079      	b.n	8004520 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004434:	d108      	bne.n	8004448 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004436:	897b      	ldrh	r3, [r7, #10]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	b2da      	uxtb	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	611a      	str	r2, [r3, #16]
 8004446:	e05f      	b.n	8004508 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004448:	897b      	ldrh	r3, [r7, #10]
 800444a:	11db      	asrs	r3, r3, #7
 800444c:	b2db      	uxtb	r3, r3
 800444e:	f003 0306 	and.w	r3, r3, #6
 8004452:	b2db      	uxtb	r3, r3
 8004454:	f063 030f 	orn	r3, r3, #15
 8004458:	b2da      	uxtb	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	4930      	ldr	r1, [pc, #192]	; (8004528 <I2C_MasterRequestRead+0x194>)
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 f8dc 	bl	8004624 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e054      	b.n	8004520 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004476:	897b      	ldrh	r3, [r7, #10]
 8004478:	b2da      	uxtb	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	4929      	ldr	r1, [pc, #164]	; (800452c <I2C_MasterRequestRead+0x198>)
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 f8cc 	bl	8004624 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e044      	b.n	8004520 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004496:	2300      	movs	r3, #0
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	613b      	str	r3, [r7, #16]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f831 	bl	8004530 <I2C_WaitOnFlagUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00d      	beq.n	80044f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e2:	d103      	bne.n	80044ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e017      	b.n	8004520 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80044f0:	897b      	ldrh	r3, [r7, #10]
 80044f2:	11db      	asrs	r3, r3, #7
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	f003 0306 	and.w	r3, r3, #6
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	f063 030e 	orn	r3, r3, #14
 8004500:	b2da      	uxtb	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	4907      	ldr	r1, [pc, #28]	; (800452c <I2C_MasterRequestRead+0x198>)
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 f888 	bl	8004624 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	00010008 	.word	0x00010008
 800452c:	00010002 	.word	0x00010002

08004530 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	4613      	mov	r3, r2
 800453e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004540:	e048      	b.n	80045d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004548:	d044      	beq.n	80045d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800454a:	f7fe fc61 	bl	8002e10 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d302      	bcc.n	8004560 <I2C_WaitOnFlagUntilTimeout+0x30>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d139      	bne.n	80045d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	0c1b      	lsrs	r3, r3, #16
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b01      	cmp	r3, #1
 8004568:	d10d      	bne.n	8004586 <I2C_WaitOnFlagUntilTimeout+0x56>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	43da      	mvns	r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	4013      	ands	r3, r2
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	bf0c      	ite	eq
 800457c:	2301      	moveq	r3, #1
 800457e:	2300      	movne	r3, #0
 8004580:	b2db      	uxtb	r3, r3
 8004582:	461a      	mov	r2, r3
 8004584:	e00c      	b.n	80045a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	43da      	mvns	r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	4013      	ands	r3, r2
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	bf0c      	ite	eq
 8004598:	2301      	moveq	r3, #1
 800459a:	2300      	movne	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	461a      	mov	r2, r3
 80045a0:	79fb      	ldrb	r3, [r7, #7]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d116      	bne.n	80045d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	f043 0220 	orr.w	r2, r3, #32
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e023      	b.n	800461c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	0c1b      	lsrs	r3, r3, #16
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d10d      	bne.n	80045fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	43da      	mvns	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	4013      	ands	r3, r2
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bf0c      	ite	eq
 80045f0:	2301      	moveq	r3, #1
 80045f2:	2300      	movne	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	461a      	mov	r2, r3
 80045f8:	e00c      	b.n	8004614 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	43da      	mvns	r2, r3
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4013      	ands	r3, r2
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf0c      	ite	eq
 800460c:	2301      	moveq	r3, #1
 800460e:	2300      	movne	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	429a      	cmp	r2, r3
 8004618:	d093      	beq.n	8004542 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004632:	e071      	b.n	8004718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800463e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004642:	d123      	bne.n	800468c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004652:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800465c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	f043 0204 	orr.w	r2, r3, #4
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e067      	b.n	800475c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004692:	d041      	beq.n	8004718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004694:	f7fe fbbc 	bl	8002e10 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d302      	bcc.n	80046aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d136      	bne.n	8004718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	0c1b      	lsrs	r3, r3, #16
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d10c      	bne.n	80046ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	43da      	mvns	r2, r3
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	4013      	ands	r3, r2
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	bf14      	ite	ne
 80046c6:	2301      	movne	r3, #1
 80046c8:	2300      	moveq	r3, #0
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	e00b      	b.n	80046e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	43da      	mvns	r2, r3
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	4013      	ands	r3, r2
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	bf14      	ite	ne
 80046e0:	2301      	movne	r3, #1
 80046e2:	2300      	moveq	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d016      	beq.n	8004718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	f043 0220 	orr.w	r2, r3, #32
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e021      	b.n	800475c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	0c1b      	lsrs	r3, r3, #16
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b01      	cmp	r3, #1
 8004720:	d10c      	bne.n	800473c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	43da      	mvns	r2, r3
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	4013      	ands	r3, r2
 800472e:	b29b      	uxth	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	bf14      	ite	ne
 8004734:	2301      	movne	r3, #1
 8004736:	2300      	moveq	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	e00b      	b.n	8004754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	43da      	mvns	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4013      	ands	r3, r2
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	bf14      	ite	ne
 800474e:	2301      	movne	r3, #1
 8004750:	2300      	moveq	r3, #0
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	f47f af6d 	bne.w	8004634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004770:	e034      	b.n	80047dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f8e3 	bl	800493e <I2C_IsAcknowledgeFailed>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e034      	b.n	80047ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004788:	d028      	beq.n	80047dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800478a:	f7fe fb41 	bl	8002e10 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	429a      	cmp	r2, r3
 8004798:	d302      	bcc.n	80047a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d11d      	bne.n	80047dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047aa:	2b80      	cmp	r3, #128	; 0x80
 80047ac:	d016      	beq.n	80047dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c8:	f043 0220 	orr.w	r2, r3, #32
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e007      	b.n	80047ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e6:	2b80      	cmp	r3, #128	; 0x80
 80047e8:	d1c3      	bne.n	8004772 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004800:	e034      	b.n	800486c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 f89b 	bl	800493e <I2C_IsAcknowledgeFailed>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e034      	b.n	800487c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004818:	d028      	beq.n	800486c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481a:	f7fe faf9 	bl	8002e10 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	429a      	cmp	r2, r3
 8004828:	d302      	bcc.n	8004830 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d11d      	bne.n	800486c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f003 0304 	and.w	r3, r3, #4
 800483a:	2b04      	cmp	r3, #4
 800483c:	d016      	beq.n	800486c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	f043 0220 	orr.w	r2, r3, #32
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e007      	b.n	800487c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b04      	cmp	r3, #4
 8004878:	d1c3      	bne.n	8004802 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004890:	e049      	b.n	8004926 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	f003 0310 	and.w	r3, r3, #16
 800489c:	2b10      	cmp	r3, #16
 800489e:	d119      	bne.n	80048d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f06f 0210 	mvn.w	r2, #16
 80048a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e030      	b.n	8004936 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048d4:	f7fe fa9c 	bl	8002e10 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d302      	bcc.n	80048ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d11d      	bne.n	8004926 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f4:	2b40      	cmp	r3, #64	; 0x40
 80048f6:	d016      	beq.n	8004926 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f043 0220 	orr.w	r2, r3, #32
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e007      	b.n	8004936 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004930:	2b40      	cmp	r3, #64	; 0x40
 8004932:	d1ae      	bne.n	8004892 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004954:	d11b      	bne.n	800498e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800495e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f043 0204 	orr.w	r2, r3, #4
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e000      	b.n	8004990 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e267      	b.n	8004e7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d075      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049ba:	4b88      	ldr	r3, [pc, #544]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d00c      	beq.n	80049e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049c6:	4b85      	ldr	r3, [pc, #532]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d112      	bne.n	80049f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049d2:	4b82      	ldr	r3, [pc, #520]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049de:	d10b      	bne.n	80049f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e0:	4b7e      	ldr	r3, [pc, #504]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d05b      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x108>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d157      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e242      	b.n	8004e7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a00:	d106      	bne.n	8004a10 <HAL_RCC_OscConfig+0x74>
 8004a02:	4b76      	ldr	r3, [pc, #472]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a75      	ldr	r2, [pc, #468]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	e01d      	b.n	8004a4c <HAL_RCC_OscConfig+0xb0>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a18:	d10c      	bne.n	8004a34 <HAL_RCC_OscConfig+0x98>
 8004a1a:	4b70      	ldr	r3, [pc, #448]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a6f      	ldr	r2, [pc, #444]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	4b6d      	ldr	r3, [pc, #436]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a6c      	ldr	r2, [pc, #432]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	e00b      	b.n	8004a4c <HAL_RCC_OscConfig+0xb0>
 8004a34:	4b69      	ldr	r3, [pc, #420]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a68      	ldr	r2, [pc, #416]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	4b66      	ldr	r3, [pc, #408]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a65      	ldr	r2, [pc, #404]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d013      	beq.n	8004a7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a54:	f7fe f9dc 	bl	8002e10 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a5c:	f7fe f9d8 	bl	8002e10 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	; 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e207      	b.n	8004e7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6e:	4b5b      	ldr	r3, [pc, #364]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0xc0>
 8004a7a:	e014      	b.n	8004aa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7c:	f7fe f9c8 	bl	8002e10 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a84:	f7fe f9c4 	bl	8002e10 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b64      	cmp	r3, #100	; 0x64
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e1f3      	b.n	8004e7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a96:	4b51      	ldr	r3, [pc, #324]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0xe8>
 8004aa2:	e000      	b.n	8004aa6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d063      	beq.n	8004b7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ab2:	4b4a      	ldr	r3, [pc, #296]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 030c 	and.w	r3, r3, #12
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00b      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004abe:	4b47      	ldr	r3, [pc, #284]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d11c      	bne.n	8004b04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aca:	4b44      	ldr	r3, [pc, #272]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d116      	bne.n	8004b04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ad6:	4b41      	ldr	r3, [pc, #260]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <HAL_RCC_OscConfig+0x152>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d001      	beq.n	8004aee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e1c7      	b.n	8004e7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aee:	4b3b      	ldr	r3, [pc, #236]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	4937      	ldr	r1, [pc, #220]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b02:	e03a      	b.n	8004b7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d020      	beq.n	8004b4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b0c:	4b34      	ldr	r3, [pc, #208]	; (8004be0 <HAL_RCC_OscConfig+0x244>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b12:	f7fe f97d 	bl	8002e10 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b1a:	f7fe f979 	bl	8002e10 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e1a8      	b.n	8004e7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b2c:	4b2b      	ldr	r3, [pc, #172]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f0      	beq.n	8004b1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b38:	4b28      	ldr	r3, [pc, #160]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4925      	ldr	r1, [pc, #148]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	600b      	str	r3, [r1, #0]
 8004b4c:	e015      	b.n	8004b7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b4e:	4b24      	ldr	r3, [pc, #144]	; (8004be0 <HAL_RCC_OscConfig+0x244>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7fe f95c 	bl	8002e10 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b5c:	f7fe f958 	bl	8002e10 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e187      	b.n	8004e7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b6e:	4b1b      	ldr	r3, [pc, #108]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d036      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d016      	beq.n	8004bbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b8e:	4b15      	ldr	r3, [pc, #84]	; (8004be4 <HAL_RCC_OscConfig+0x248>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b94:	f7fe f93c 	bl	8002e10 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b9c:	f7fe f938 	bl	8002e10 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e167      	b.n	8004e7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bae:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <HAL_RCC_OscConfig+0x240>)
 8004bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0f0      	beq.n	8004b9c <HAL_RCC_OscConfig+0x200>
 8004bba:	e01b      	b.n	8004bf4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bbc:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <HAL_RCC_OscConfig+0x248>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc2:	f7fe f925 	bl	8002e10 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc8:	e00e      	b.n	8004be8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bca:	f7fe f921 	bl	8002e10 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d907      	bls.n	8004be8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e150      	b.n	8004e7e <HAL_RCC_OscConfig+0x4e2>
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	42470000 	.word	0x42470000
 8004be4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004be8:	4b88      	ldr	r3, [pc, #544]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1ea      	bne.n	8004bca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 8097 	beq.w	8004d30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c02:	2300      	movs	r3, #0
 8004c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c06:	4b81      	ldr	r3, [pc, #516]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10f      	bne.n	8004c32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c12:	2300      	movs	r3, #0
 8004c14:	60bb      	str	r3, [r7, #8]
 8004c16:	4b7d      	ldr	r3, [pc, #500]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	4a7c      	ldr	r2, [pc, #496]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c20:	6413      	str	r3, [r2, #64]	; 0x40
 8004c22:	4b7a      	ldr	r3, [pc, #488]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2a:	60bb      	str	r3, [r7, #8]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c32:	4b77      	ldr	r3, [pc, #476]	; (8004e10 <HAL_RCC_OscConfig+0x474>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d118      	bne.n	8004c70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c3e:	4b74      	ldr	r3, [pc, #464]	; (8004e10 <HAL_RCC_OscConfig+0x474>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a73      	ldr	r2, [pc, #460]	; (8004e10 <HAL_RCC_OscConfig+0x474>)
 8004c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c4a:	f7fe f8e1 	bl	8002e10 <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c52:	f7fe f8dd 	bl	8002e10 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e10c      	b.n	8004e7e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c64:	4b6a      	ldr	r3, [pc, #424]	; (8004e10 <HAL_RCC_OscConfig+0x474>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0f0      	beq.n	8004c52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d106      	bne.n	8004c86 <HAL_RCC_OscConfig+0x2ea>
 8004c78:	4b64      	ldr	r3, [pc, #400]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7c:	4a63      	ldr	r2, [pc, #396]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004c7e:	f043 0301 	orr.w	r3, r3, #1
 8004c82:	6713      	str	r3, [r2, #112]	; 0x70
 8004c84:	e01c      	b.n	8004cc0 <HAL_RCC_OscConfig+0x324>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	2b05      	cmp	r3, #5
 8004c8c:	d10c      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x30c>
 8004c8e:	4b5f      	ldr	r3, [pc, #380]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c92:	4a5e      	ldr	r2, [pc, #376]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004c94:	f043 0304 	orr.w	r3, r3, #4
 8004c98:	6713      	str	r3, [r2, #112]	; 0x70
 8004c9a:	4b5c      	ldr	r3, [pc, #368]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	4a5b      	ldr	r2, [pc, #364]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004ca0:	f043 0301 	orr.w	r3, r3, #1
 8004ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca6:	e00b      	b.n	8004cc0 <HAL_RCC_OscConfig+0x324>
 8004ca8:	4b58      	ldr	r3, [pc, #352]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cac:	4a57      	ldr	r2, [pc, #348]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004cae:	f023 0301 	bic.w	r3, r3, #1
 8004cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb4:	4b55      	ldr	r3, [pc, #340]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb8:	4a54      	ldr	r2, [pc, #336]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004cba:	f023 0304 	bic.w	r3, r3, #4
 8004cbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d015      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc8:	f7fe f8a2 	bl	8002e10 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cce:	e00a      	b.n	8004ce6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd0:	f7fe f89e 	bl	8002e10 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e0cb      	b.n	8004e7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce6:	4b49      	ldr	r3, [pc, #292]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0ee      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x334>
 8004cf2:	e014      	b.n	8004d1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf4:	f7fe f88c 	bl	8002e10 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfc:	f7fe f888 	bl	8002e10 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e0b5      	b.n	8004e7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d12:	4b3e      	ldr	r3, [pc, #248]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1ee      	bne.n	8004cfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d1e:	7dfb      	ldrb	r3, [r7, #23]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d105      	bne.n	8004d30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d24:	4b39      	ldr	r3, [pc, #228]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	4a38      	ldr	r2, [pc, #224]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80a1 	beq.w	8004e7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d3a:	4b34      	ldr	r3, [pc, #208]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	d05c      	beq.n	8004e00 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d141      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d4e:	4b31      	ldr	r3, [pc, #196]	; (8004e14 <HAL_RCC_OscConfig+0x478>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d54:	f7fe f85c 	bl	8002e10 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d5c:	f7fe f858 	bl	8002e10 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e087      	b.n	8004e7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d6e:	4b27      	ldr	r3, [pc, #156]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f0      	bne.n	8004d5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69da      	ldr	r2, [r3, #28]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	019b      	lsls	r3, r3, #6
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d90:	085b      	lsrs	r3, r3, #1
 8004d92:	3b01      	subs	r3, #1
 8004d94:	041b      	lsls	r3, r3, #16
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	061b      	lsls	r3, r3, #24
 8004d9e:	491b      	ldr	r1, [pc, #108]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004da4:	4b1b      	ldr	r3, [pc, #108]	; (8004e14 <HAL_RCC_OscConfig+0x478>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004daa:	f7fe f831 	bl	8002e10 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db2:	f7fe f82d 	bl	8002e10 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e05c      	b.n	8004e7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dc4:	4b11      	ldr	r3, [pc, #68]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0f0      	beq.n	8004db2 <HAL_RCC_OscConfig+0x416>
 8004dd0:	e054      	b.n	8004e7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd2:	4b10      	ldr	r3, [pc, #64]	; (8004e14 <HAL_RCC_OscConfig+0x478>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd8:	f7fe f81a 	bl	8002e10 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de0:	f7fe f816 	bl	8002e10 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e045      	b.n	8004e7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df2:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <HAL_RCC_OscConfig+0x470>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f0      	bne.n	8004de0 <HAL_RCC_OscConfig+0x444>
 8004dfe:	e03d      	b.n	8004e7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d107      	bne.n	8004e18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e038      	b.n	8004e7e <HAL_RCC_OscConfig+0x4e2>
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	40007000 	.word	0x40007000
 8004e14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e18:	4b1b      	ldr	r3, [pc, #108]	; (8004e88 <HAL_RCC_OscConfig+0x4ec>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d028      	beq.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d121      	bne.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d11a      	bne.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e48:	4013      	ands	r3, r2
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d111      	bne.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5e:	085b      	lsrs	r3, r3, #1
 8004e60:	3b01      	subs	r3, #1
 8004e62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d107      	bne.n	8004e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d001      	beq.n	8004e7c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e000      	b.n	8004e7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40023800 	.word	0x40023800

08004e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e0cc      	b.n	800503a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ea0:	4b68      	ldr	r3, [pc, #416]	; (8005044 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d90c      	bls.n	8004ec8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eae:	4b65      	ldr	r3, [pc, #404]	; (8005044 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb6:	4b63      	ldr	r3, [pc, #396]	; (8005044 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d001      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e0b8      	b.n	800503a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d020      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d005      	beq.n	8004eec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ee0:	4b59      	ldr	r3, [pc, #356]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	4a58      	ldr	r2, [pc, #352]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004eea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ef8:	4b53      	ldr	r3, [pc, #332]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	4a52      	ldr	r2, [pc, #328]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f04:	4b50      	ldr	r3, [pc, #320]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	494d      	ldr	r1, [pc, #308]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d044      	beq.n	8004fac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d107      	bne.n	8004f3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f2a:	4b47      	ldr	r3, [pc, #284]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d119      	bne.n	8004f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e07f      	b.n	800503a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d003      	beq.n	8004f4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d107      	bne.n	8004f5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f4a:	4b3f      	ldr	r3, [pc, #252]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d109      	bne.n	8004f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e06f      	b.n	800503a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f5a:	4b3b      	ldr	r3, [pc, #236]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e067      	b.n	800503a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f6a:	4b37      	ldr	r3, [pc, #220]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f023 0203 	bic.w	r2, r3, #3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	4934      	ldr	r1, [pc, #208]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f7c:	f7fd ff48 	bl	8002e10 <HAL_GetTick>
 8004f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f82:	e00a      	b.n	8004f9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f84:	f7fd ff44 	bl	8002e10 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e04f      	b.n	800503a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9a:	4b2b      	ldr	r3, [pc, #172]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 020c 	and.w	r2, r3, #12
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d1eb      	bne.n	8004f84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fac:	4b25      	ldr	r3, [pc, #148]	; (8005044 <HAL_RCC_ClockConfig+0x1b8>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d20c      	bcs.n	8004fd4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fba:	4b22      	ldr	r3, [pc, #136]	; (8005044 <HAL_RCC_ClockConfig+0x1b8>)
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fc2:	4b20      	ldr	r3, [pc, #128]	; (8005044 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d001      	beq.n	8004fd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e032      	b.n	800503a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d008      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fe0:	4b19      	ldr	r3, [pc, #100]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	4916      	ldr	r1, [pc, #88]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d009      	beq.n	8005012 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ffe:	4b12      	ldr	r3, [pc, #72]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	490e      	ldr	r1, [pc, #56]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	4313      	orrs	r3, r2
 8005010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005012:	f000 f821 	bl	8005058 <HAL_RCC_GetSysClockFreq>
 8005016:	4602      	mov	r2, r0
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	091b      	lsrs	r3, r3, #4
 800501e:	f003 030f 	and.w	r3, r3, #15
 8005022:	490a      	ldr	r1, [pc, #40]	; (800504c <HAL_RCC_ClockConfig+0x1c0>)
 8005024:	5ccb      	ldrb	r3, [r1, r3]
 8005026:	fa22 f303 	lsr.w	r3, r2, r3
 800502a:	4a09      	ldr	r2, [pc, #36]	; (8005050 <HAL_RCC_ClockConfig+0x1c4>)
 800502c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800502e:	4b09      	ldr	r3, [pc, #36]	; (8005054 <HAL_RCC_ClockConfig+0x1c8>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f7fd fd18 	bl	8002a68 <HAL_InitTick>

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	40023c00 	.word	0x40023c00
 8005048:	40023800 	.word	0x40023800
 800504c:	0800d3d0 	.word	0x0800d3d0
 8005050:	20000008 	.word	0x20000008
 8005054:	2000000c 	.word	0x2000000c

08005058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800505c:	b090      	sub	sp, #64	; 0x40
 800505e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005070:	4b59      	ldr	r3, [pc, #356]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 030c 	and.w	r3, r3, #12
 8005078:	2b08      	cmp	r3, #8
 800507a:	d00d      	beq.n	8005098 <HAL_RCC_GetSysClockFreq+0x40>
 800507c:	2b08      	cmp	r3, #8
 800507e:	f200 80a1 	bhi.w	80051c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <HAL_RCC_GetSysClockFreq+0x34>
 8005086:	2b04      	cmp	r3, #4
 8005088:	d003      	beq.n	8005092 <HAL_RCC_GetSysClockFreq+0x3a>
 800508a:	e09b      	b.n	80051c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800508c:	4b53      	ldr	r3, [pc, #332]	; (80051dc <HAL_RCC_GetSysClockFreq+0x184>)
 800508e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005090:	e09b      	b.n	80051ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005092:	4b53      	ldr	r3, [pc, #332]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005094:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005096:	e098      	b.n	80051ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005098:	4b4f      	ldr	r3, [pc, #316]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050a0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050a2:	4b4d      	ldr	r3, [pc, #308]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d028      	beq.n	8005100 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ae:	4b4a      	ldr	r3, [pc, #296]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	099b      	lsrs	r3, r3, #6
 80050b4:	2200      	movs	r2, #0
 80050b6:	623b      	str	r3, [r7, #32]
 80050b8:	627a      	str	r2, [r7, #36]	; 0x24
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80050c0:	2100      	movs	r1, #0
 80050c2:	4b47      	ldr	r3, [pc, #284]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80050c4:	fb03 f201 	mul.w	r2, r3, r1
 80050c8:	2300      	movs	r3, #0
 80050ca:	fb00 f303 	mul.w	r3, r0, r3
 80050ce:	4413      	add	r3, r2
 80050d0:	4a43      	ldr	r2, [pc, #268]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80050d2:	fba0 1202 	umull	r1, r2, r0, r2
 80050d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050d8:	460a      	mov	r2, r1
 80050da:	62ba      	str	r2, [r7, #40]	; 0x28
 80050dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050de:	4413      	add	r3, r2
 80050e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e4:	2200      	movs	r2, #0
 80050e6:	61bb      	str	r3, [r7, #24]
 80050e8:	61fa      	str	r2, [r7, #28]
 80050ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80050f2:	f7fb fdb1 	bl	8000c58 <__aeabi_uldivmod>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4613      	mov	r3, r2
 80050fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050fe:	e053      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005100:	4b35      	ldr	r3, [pc, #212]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	099b      	lsrs	r3, r3, #6
 8005106:	2200      	movs	r2, #0
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	617a      	str	r2, [r7, #20]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005112:	f04f 0b00 	mov.w	fp, #0
 8005116:	4652      	mov	r2, sl
 8005118:	465b      	mov	r3, fp
 800511a:	f04f 0000 	mov.w	r0, #0
 800511e:	f04f 0100 	mov.w	r1, #0
 8005122:	0159      	lsls	r1, r3, #5
 8005124:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005128:	0150      	lsls	r0, r2, #5
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	ebb2 080a 	subs.w	r8, r2, sl
 8005132:	eb63 090b 	sbc.w	r9, r3, fp
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005142:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005146:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800514a:	ebb2 0408 	subs.w	r4, r2, r8
 800514e:	eb63 0509 	sbc.w	r5, r3, r9
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	f04f 0300 	mov.w	r3, #0
 800515a:	00eb      	lsls	r3, r5, #3
 800515c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005160:	00e2      	lsls	r2, r4, #3
 8005162:	4614      	mov	r4, r2
 8005164:	461d      	mov	r5, r3
 8005166:	eb14 030a 	adds.w	r3, r4, sl
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	eb45 030b 	adc.w	r3, r5, fp
 8005170:	607b      	str	r3, [r7, #4]
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800517e:	4629      	mov	r1, r5
 8005180:	028b      	lsls	r3, r1, #10
 8005182:	4621      	mov	r1, r4
 8005184:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005188:	4621      	mov	r1, r4
 800518a:	028a      	lsls	r2, r1, #10
 800518c:	4610      	mov	r0, r2
 800518e:	4619      	mov	r1, r3
 8005190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005192:	2200      	movs	r2, #0
 8005194:	60bb      	str	r3, [r7, #8]
 8005196:	60fa      	str	r2, [r7, #12]
 8005198:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800519c:	f7fb fd5c 	bl	8000c58 <__aeabi_uldivmod>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4613      	mov	r3, r2
 80051a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80051a8:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	0c1b      	lsrs	r3, r3, #16
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	3301      	adds	r3, #1
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80051b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051c2:	e002      	b.n	80051ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051c4:	4b05      	ldr	r3, [pc, #20]	; (80051dc <HAL_RCC_GetSysClockFreq+0x184>)
 80051c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3740      	adds	r7, #64	; 0x40
 80051d0:	46bd      	mov	sp, r7
 80051d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051d6:	bf00      	nop
 80051d8:	40023800 	.word	0x40023800
 80051dc:	00f42400 	.word	0x00f42400
 80051e0:	017d7840 	.word	0x017d7840

080051e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051e8:	4b03      	ldr	r3, [pc, #12]	; (80051f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80051ea:	681b      	ldr	r3, [r3, #0]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	20000008 	.word	0x20000008

080051fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005200:	f7ff fff0 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 8005204:	4602      	mov	r2, r0
 8005206:	4b05      	ldr	r3, [pc, #20]	; (800521c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	0a9b      	lsrs	r3, r3, #10
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	4903      	ldr	r1, [pc, #12]	; (8005220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005212:	5ccb      	ldrb	r3, [r1, r3]
 8005214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005218:	4618      	mov	r0, r3
 800521a:	bd80      	pop	{r7, pc}
 800521c:	40023800 	.word	0x40023800
 8005220:	0800d3e0 	.word	0x0800d3e0

08005224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005228:	f7ff ffdc 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 800522c:	4602      	mov	r2, r0
 800522e:	4b05      	ldr	r3, [pc, #20]	; (8005244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	0b5b      	lsrs	r3, r3, #13
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	4903      	ldr	r1, [pc, #12]	; (8005248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800523a:	5ccb      	ldrb	r3, [r1, r3]
 800523c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005240:	4618      	mov	r0, r3
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40023800 	.word	0x40023800
 8005248:	0800d3e0 	.word	0x0800d3e0

0800524c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	220f      	movs	r2, #15
 800525a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800525c:	4b12      	ldr	r3, [pc, #72]	; (80052a8 <HAL_RCC_GetClockConfig+0x5c>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 0203 	and.w	r2, r3, #3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005268:	4b0f      	ldr	r3, [pc, #60]	; (80052a8 <HAL_RCC_GetClockConfig+0x5c>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005274:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005280:	4b09      	ldr	r3, [pc, #36]	; (80052a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	08db      	lsrs	r3, r3, #3
 8005286:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800528e:	4b07      	ldr	r3, [pc, #28]	; (80052ac <HAL_RCC_GetClockConfig+0x60>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0207 	and.w	r2, r3, #7
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	601a      	str	r2, [r3, #0]
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40023800 	.word	0x40023800
 80052ac:	40023c00 	.word	0x40023c00

080052b0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d105      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d038      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052d8:	4b68      	ldr	r3, [pc, #416]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052de:	f7fd fd97 	bl	8002e10 <HAL_GetTick>
 80052e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052e4:	e008      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052e6:	f7fd fd93 	bl	8002e10 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e0bd      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052f8:	4b61      	ldr	r3, [pc, #388]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1f0      	bne.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	019b      	lsls	r3, r3, #6
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	071b      	lsls	r3, r3, #28
 8005316:	495a      	ldr	r1, [pc, #360]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800531e:	4b57      	ldr	r3, [pc, #348]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005320:	2201      	movs	r2, #1
 8005322:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005324:	f7fd fd74 	bl	8002e10 <HAL_GetTick>
 8005328:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800532a:	e008      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800532c:	f7fd fd70 	bl	8002e10 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e09a      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800533e:	4b50      	ldr	r3, [pc, #320]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0f0      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 8083 	beq.w	800545e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	4b48      	ldr	r3, [pc, #288]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	4a47      	ldr	r2, [pc, #284]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005366:	6413      	str	r3, [r2, #64]	; 0x40
 8005368:	4b45      	ldr	r3, [pc, #276]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800536a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005370:	60fb      	str	r3, [r7, #12]
 8005372:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005374:	4b43      	ldr	r3, [pc, #268]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a42      	ldr	r2, [pc, #264]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800537a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800537e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005380:	f7fd fd46 	bl	8002e10 <HAL_GetTick>
 8005384:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005386:	e008      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005388:	f7fd fd42 	bl	8002e10 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d901      	bls.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e06c      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800539a:	4b3a      	ldr	r3, [pc, #232]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0f0      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053a6:	4b36      	ldr	r3, [pc, #216]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ae:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d02f      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d028      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053c4:	4b2e      	ldr	r3, [pc, #184]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053cc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053ce:	4b2e      	ldr	r3, [pc, #184]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80053d0:	2201      	movs	r2, #1
 80053d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053d4:	4b2c      	ldr	r3, [pc, #176]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80053da:	4a29      	ldr	r2, [pc, #164]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053e0:	4b27      	ldr	r3, [pc, #156]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d114      	bne.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80053ec:	f7fd fd10 	bl	8002e10 <HAL_GetTick>
 80053f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f2:	e00a      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f4:	f7fd fd0c 	bl	8002e10 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005402:	4293      	cmp	r3, r2
 8005404:	d901      	bls.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e034      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800540a:	4b1d      	ldr	r3, [pc, #116]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0ee      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800541e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005422:	d10d      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005424:	4b16      	ldr	r3, [pc, #88]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005438:	4911      	ldr	r1, [pc, #68]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800543a:	4313      	orrs	r3, r2
 800543c:	608b      	str	r3, [r1, #8]
 800543e:	e005      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005440:	4b0f      	ldr	r3, [pc, #60]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	4a0e      	ldr	r2, [pc, #56]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005446:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800544a:	6093      	str	r3, [r2, #8]
 800544c:	4b0c      	ldr	r3, [pc, #48]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800544e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005458:	4909      	ldr	r1, [pc, #36]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800545a:	4313      	orrs	r3, r2
 800545c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	7d1a      	ldrb	r2, [r3, #20]
 800546e:	4b07      	ldr	r3, [pc, #28]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005470:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	42470068 	.word	0x42470068
 8005480:	40023800 	.word	0x40023800
 8005484:	40007000 	.word	0x40007000
 8005488:	42470e40 	.word	0x42470e40
 800548c:	424711e0 	.word	0x424711e0

08005490 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e073      	b.n	800558e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	7f5b      	ldrb	r3, [r3, #29]
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d105      	bne.n	80054bc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fd fa30 	bl	800291c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f003 0310 	and.w	r3, r3, #16
 80054cc:	2b10      	cmp	r3, #16
 80054ce:	d055      	beq.n	800557c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	22ca      	movs	r2, #202	; 0xca
 80054d6:	625a      	str	r2, [r3, #36]	; 0x24
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2253      	movs	r2, #83	; 0x53
 80054de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fa49 	bl	8005978 <RTC_EnterInitMode>
 80054e6:	4603      	mov	r3, r0
 80054e8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80054ea:	7bfb      	ldrb	r3, [r7, #15]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d12c      	bne.n	800554a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6812      	ldr	r2, [r2, #0]
 80054fa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80054fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005502:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6899      	ldr	r1, [r3, #8]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	431a      	orrs	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	68d2      	ldr	r2, [r2, #12]
 800552a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6919      	ldr	r1, [r3, #16]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	041a      	lsls	r2, r3, #16
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 fa50 	bl	80059e6 <RTC_ExitInitMode>
 8005546:	4603      	mov	r3, r0
 8005548:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800554a:	7bfb      	ldrb	r3, [r7, #15]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d110      	bne.n	8005572 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800555e:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	22ff      	movs	r2, #255	; 0xff
 8005578:	625a      	str	r2, [r3, #36]	; 0x24
 800557a:	e001      	b.n	8005580 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d102      	bne.n	800558c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800558c:	7bfb      	ldrb	r3, [r7, #15]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005596:	b590      	push	{r4, r7, lr}
 8005598:	b087      	sub	sp, #28
 800559a:	af00      	add	r7, sp, #0
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	7f1b      	ldrb	r3, [r3, #28]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d101      	bne.n	80055b2 <HAL_RTC_SetTime+0x1c>
 80055ae:	2302      	movs	r3, #2
 80055b0:	e087      	b.n	80056c2 <HAL_RTC_SetTime+0x12c>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2201      	movs	r2, #1
 80055b6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2202      	movs	r2, #2
 80055bc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d126      	bne.n	8005612 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d102      	bne.n	80055d8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2200      	movs	r2, #0
 80055d6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fa27 	bl	8005a30 <RTC_ByteToBcd2>
 80055e2:	4603      	mov	r3, r0
 80055e4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	785b      	ldrb	r3, [r3, #1]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fa20 	bl	8005a30 <RTC_ByteToBcd2>
 80055f0:	4603      	mov	r3, r0
 80055f2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80055f4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	789b      	ldrb	r3, [r3, #2]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fa18 	bl	8005a30 <RTC_ByteToBcd2>
 8005600:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005602:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	78db      	ldrb	r3, [r3, #3]
 800560a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800560c:	4313      	orrs	r3, r2
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	e018      	b.n	8005644 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d102      	bne.n	8005626 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2200      	movs	r2, #0
 8005624:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	785b      	ldrb	r3, [r3, #1]
 8005630:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005632:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005638:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	78db      	ldrb	r3, [r3, #3]
 800563e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	22ca      	movs	r2, #202	; 0xca
 800564a:	625a      	str	r2, [r3, #36]	; 0x24
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2253      	movs	r2, #83	; 0x53
 8005652:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 f98f 	bl	8005978 <RTC_EnterInitMode>
 800565a:	4603      	mov	r3, r0
 800565c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800565e:	7cfb      	ldrb	r3, [r7, #19]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d120      	bne.n	80056a6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800566e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005672:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005682:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6899      	ldr	r1, [r3, #8]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	431a      	orrs	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 f9a2 	bl	80059e6 <RTC_ExitInitMode>
 80056a2:	4603      	mov	r3, r0
 80056a4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80056a6:	7cfb      	ldrb	r3, [r7, #19]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d102      	bne.n	80056b2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2201      	movs	r2, #1
 80056b0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	22ff      	movs	r2, #255	; 0xff
 80056b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	771a      	strb	r2, [r3, #28]

  return status;
 80056c0:	7cfb      	ldrb	r3, [r7, #19]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd90      	pop	{r4, r7, pc}

080056ca <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b086      	sub	sp, #24
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	60f8      	str	r0, [r7, #12]
 80056d2:	60b9      	str	r1, [r7, #8]
 80056d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80056fc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005700:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	0c1b      	lsrs	r3, r3, #16
 8005706:	b2db      	uxtb	r3, r3
 8005708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800570c:	b2da      	uxtb	r2, r3
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	0a1b      	lsrs	r3, r3, #8
 8005716:	b2db      	uxtb	r3, r3
 8005718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800571c:	b2da      	uxtb	r2, r3
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	b2db      	uxtb	r3, r3
 8005726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800572a:	b2da      	uxtb	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	0d9b      	lsrs	r3, r3, #22
 8005734:	b2db      	uxtb	r3, r3
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	b2da      	uxtb	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d11a      	bne.n	800577c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	4618      	mov	r0, r3
 800574c:	f000 f98e 	bl	8005a6c <RTC_Bcd2ToByte>
 8005750:	4603      	mov	r3, r0
 8005752:	461a      	mov	r2, r3
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	4618      	mov	r0, r3
 800575e:	f000 f985 	bl	8005a6c <RTC_Bcd2ToByte>
 8005762:	4603      	mov	r3, r0
 8005764:	461a      	mov	r2, r3
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	789b      	ldrb	r3, [r3, #2]
 800576e:	4618      	mov	r0, r3
 8005770:	f000 f97c 	bl	8005a6c <RTC_Bcd2ToByte>
 8005774:	4603      	mov	r3, r0
 8005776:	461a      	mov	r2, r3
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005786:	b590      	push	{r4, r7, lr}
 8005788:	b087      	sub	sp, #28
 800578a:	af00      	add	r7, sp, #0
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	7f1b      	ldrb	r3, [r3, #28]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d101      	bne.n	80057a2 <HAL_RTC_SetDate+0x1c>
 800579e:	2302      	movs	r3, #2
 80057a0:	e071      	b.n	8005886 <HAL_RTC_SetDate+0x100>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2201      	movs	r2, #1
 80057a6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2202      	movs	r2, #2
 80057ac:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10e      	bne.n	80057d2 <HAL_RTC_SetDate+0x4c>
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	785b      	ldrb	r3, [r3, #1]
 80057b8:	f003 0310 	and.w	r3, r3, #16
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d008      	beq.n	80057d2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	785b      	ldrb	r3, [r3, #1]
 80057c4:	f023 0310 	bic.w	r3, r3, #16
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	330a      	adds	r3, #10
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d11c      	bne.n	8005812 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	78db      	ldrb	r3, [r3, #3]
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 f927 	bl	8005a30 <RTC_ByteToBcd2>
 80057e2:	4603      	mov	r3, r0
 80057e4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	785b      	ldrb	r3, [r3, #1]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 f920 	bl	8005a30 <RTC_ByteToBcd2>
 80057f0:	4603      	mov	r3, r0
 80057f2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80057f4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	789b      	ldrb	r3, [r3, #2]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 f918 	bl	8005a30 <RTC_ByteToBcd2>
 8005800:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005802:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800580c:	4313      	orrs	r3, r2
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	e00e      	b.n	8005830 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	78db      	ldrb	r3, [r3, #3]
 8005816:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800581e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005824:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800582c:	4313      	orrs	r3, r2
 800582e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	22ca      	movs	r2, #202	; 0xca
 8005836:	625a      	str	r2, [r3, #36]	; 0x24
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2253      	movs	r2, #83	; 0x53
 800583e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 f899 	bl	8005978 <RTC_EnterInitMode>
 8005846:	4603      	mov	r3, r0
 8005848:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800584a:	7cfb      	ldrb	r3, [r7, #19]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10c      	bne.n	800586a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800585a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800585e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f8c0 	bl	80059e6 <RTC_ExitInitMode>
 8005866:	4603      	mov	r3, r0
 8005868:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800586a:	7cfb      	ldrb	r3, [r7, #19]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d102      	bne.n	8005876 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	22ff      	movs	r2, #255	; 0xff
 800587c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	771a      	strb	r2, [r3, #28]

  return status;
 8005884:	7cfb      	ldrb	r3, [r7, #19]
}
 8005886:	4618      	mov	r0, r3
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	bd90      	pop	{r4, r7, pc}

0800588e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b086      	sub	sp, #24
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800589a:	2300      	movs	r3, #0
 800589c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80058a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80058ac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	0c1b      	lsrs	r3, r3, #16
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	0a1b      	lsrs	r3, r3, #8
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	f003 031f 	and.w	r3, r3, #31
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	0b5b      	lsrs	r3, r3, #13
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d11a      	bne.n	8005922 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	78db      	ldrb	r3, [r3, #3]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 f8bb 	bl	8005a6c <RTC_Bcd2ToByte>
 80058f6:	4603      	mov	r3, r0
 80058f8:	461a      	mov	r2, r3
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	785b      	ldrb	r3, [r3, #1]
 8005902:	4618      	mov	r0, r3
 8005904:	f000 f8b2 	bl	8005a6c <RTC_Bcd2ToByte>
 8005908:	4603      	mov	r3, r0
 800590a:	461a      	mov	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	789b      	ldrb	r3, [r3, #2]
 8005914:	4618      	mov	r0, r3
 8005916:	f000 f8a9 	bl	8005a6c <RTC_Bcd2ToByte>
 800591a:	4603      	mov	r3, r0
 800591c:	461a      	mov	r2, r3
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a0d      	ldr	r2, [pc, #52]	; (8005974 <HAL_RTC_WaitForSynchro+0x48>)
 800593e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005940:	f7fd fa66 	bl	8002e10 <HAL_GetTick>
 8005944:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005946:	e009      	b.n	800595c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005948:	f7fd fa62 	bl	8002e10 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005956:	d901      	bls.n	800595c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e007      	b.n	800596c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d0ee      	beq.n	8005948 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	00013f5f 	.word	0x00013f5f

08005978 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005984:	2300      	movs	r3, #0
 8005986:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005992:	2b00      	cmp	r3, #0
 8005994:	d122      	bne.n	80059dc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059a4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059a6:	f7fd fa33 	bl	8002e10 <HAL_GetTick>
 80059aa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80059ac:	e00c      	b.n	80059c8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80059ae:	f7fd fa2f 	bl	8002e10 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059bc:	d904      	bls.n	80059c8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2204      	movs	r2, #4
 80059c2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d102      	bne.n	80059dc <RTC_EnterInitMode+0x64>
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d1e8      	bne.n	80059ae <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b084      	sub	sp, #16
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a00:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f003 0320 	and.w	r3, r3, #32
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10a      	bne.n	8005a26 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7ff ff8b 	bl	800592c <HAL_RTC_WaitForSynchro>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2204      	movs	r2, #4
 8005a20:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	4603      	mov	r3, r0
 8005a38:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005a3e:	e005      	b.n	8005a4c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	3301      	adds	r3, #1
 8005a44:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005a46:	79fb      	ldrb	r3, [r7, #7]
 8005a48:	3b0a      	subs	r3, #10
 8005a4a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005a4c:	79fb      	ldrb	r3, [r7, #7]
 8005a4e:	2b09      	cmp	r3, #9
 8005a50:	d8f6      	bhi.n	8005a40 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	b2db      	uxtb	r3, r3
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	4603      	mov	r3, r0
 8005a74:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005a7a:	79fb      	ldrb	r3, [r7, #7]
 8005a7c:	091b      	lsrs	r3, r3, #4
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	461a      	mov	r2, r3
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	79fb      	ldrb	r3, [r7, #7]
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	4413      	add	r3, r2
 8005a9a:	b2db      	uxtb	r3, r3
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e07b      	b.n	8005bb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d108      	bne.n	8005ad4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aca:	d009      	beq.n	8005ae0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	61da      	str	r2, [r3, #28]
 8005ad2:	e005      	b.n	8005ae0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d106      	bne.n	8005b00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fc ff3a 	bl	8002974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b64:	ea42 0103 	orr.w	r1, r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	0c1b      	lsrs	r3, r3, #16
 8005b7e:	f003 0104 	and.w	r1, r3, #4
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	f003 0210 	and.w	r2, r3, #16
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69da      	ldr	r2, [r3, #28]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ba0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b088      	sub	sp, #32
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	603b      	str	r3, [r7, #0]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bca:	f7fd f921 	bl	8002e10 <HAL_GetTick>
 8005bce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005bd0:	88fb      	ldrh	r3, [r7, #6]
 8005bd2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d001      	beq.n	8005be4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005be0:	2302      	movs	r3, #2
 8005be2:	e12a      	b.n	8005e3a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <HAL_SPI_Transmit+0x36>
 8005bea:	88fb      	ldrh	r3, [r7, #6]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e122      	b.n	8005e3a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <HAL_SPI_Transmit+0x48>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e11b      	b.n	8005e3a <HAL_SPI_Transmit+0x280>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2203      	movs	r2, #3
 8005c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	88fa      	ldrh	r2, [r7, #6]
 8005c22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	88fa      	ldrh	r2, [r7, #6]
 8005c28:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c50:	d10f      	bne.n	8005c72 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7c:	2b40      	cmp	r3, #64	; 0x40
 8005c7e:	d007      	beq.n	8005c90 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c98:	d152      	bne.n	8005d40 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_SPI_Transmit+0xee>
 8005ca2:	8b7b      	ldrh	r3, [r7, #26]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d145      	bne.n	8005d34 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cac:	881a      	ldrh	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb8:	1c9a      	adds	r2, r3, #2
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ccc:	e032      	b.n	8005d34 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d112      	bne.n	8005d02 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce0:	881a      	ldrh	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cec:	1c9a      	adds	r2, r3, #2
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d00:	e018      	b.n	8005d34 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d02:	f7fd f885 	bl	8002e10 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d803      	bhi.n	8005d1a <HAL_SPI_Transmit+0x160>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d102      	bne.n	8005d20 <HAL_SPI_Transmit+0x166>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d109      	bne.n	8005d34 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e082      	b.n	8005e3a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1c7      	bne.n	8005cce <HAL_SPI_Transmit+0x114>
 8005d3e:	e053      	b.n	8005de8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <HAL_SPI_Transmit+0x194>
 8005d48:	8b7b      	ldrh	r3, [r7, #26]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d147      	bne.n	8005dde <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	330c      	adds	r3, #12
 8005d58:	7812      	ldrb	r2, [r2, #0]
 8005d5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d74:	e033      	b.n	8005dde <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d113      	bne.n	8005dac <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	330c      	adds	r3, #12
 8005d8e:	7812      	ldrb	r2, [r2, #0]
 8005d90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	86da      	strh	r2, [r3, #54]	; 0x36
 8005daa:	e018      	b.n	8005dde <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dac:	f7fd f830 	bl	8002e10 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d803      	bhi.n	8005dc4 <HAL_SPI_Transmit+0x20a>
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc2:	d102      	bne.n	8005dca <HAL_SPI_Transmit+0x210>
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d109      	bne.n	8005dde <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e02d      	b.n	8005e3a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1c6      	bne.n	8005d76 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005de8:	69fa      	ldr	r2, [r7, #28]
 8005dea:	6839      	ldr	r1, [r7, #0]
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 f8b1 	bl	8005f54 <SPI_EndRxTxTransaction>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10a      	bne.n	8005e1c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e06:	2300      	movs	r3, #0
 8005e08:	617b      	str	r3, [r7, #20]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e000      	b.n	8005e3a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005e38:	2300      	movs	r3, #0
  }
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3720      	adds	r7, #32
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
	...

08005e44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b088      	sub	sp, #32
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	4613      	mov	r3, r2
 8005e52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e54:	f7fc ffdc 	bl	8002e10 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5c:	1a9b      	subs	r3, r3, r2
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	4413      	add	r3, r2
 8005e62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e64:	f7fc ffd4 	bl	8002e10 <HAL_GetTick>
 8005e68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e6a:	4b39      	ldr	r3, [pc, #228]	; (8005f50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	015b      	lsls	r3, r3, #5
 8005e70:	0d1b      	lsrs	r3, r3, #20
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	fb02 f303 	mul.w	r3, r2, r3
 8005e78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e7a:	e054      	b.n	8005f26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e82:	d050      	beq.n	8005f26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e84:	f7fc ffc4 	bl	8002e10 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d902      	bls.n	8005e9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d13d      	bne.n	8005f16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ea8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eb2:	d111      	bne.n	8005ed8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ebc:	d004      	beq.n	8005ec8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ec6:	d107      	bne.n	8005ed8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee0:	d10f      	bne.n	8005f02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e017      	b.n	8005f46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4013      	ands	r3, r2
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	bf0c      	ite	eq
 8005f36:	2301      	moveq	r3, #1
 8005f38:	2300      	movne	r3, #0
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	79fb      	ldrb	r3, [r7, #7]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d19b      	bne.n	8005e7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3720      	adds	r7, #32
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000008 	.word	0x20000008

08005f54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af02      	add	r7, sp, #8
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2201      	movs	r2, #1
 8005f68:	2102      	movs	r1, #2
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f7ff ff6a 	bl	8005e44 <SPI_WaitFlagStateUntilTimeout>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d007      	beq.n	8005f86 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7a:	f043 0220 	orr.w	r2, r3, #32
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e032      	b.n	8005fec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f86:	4b1b      	ldr	r3, [pc, #108]	; (8005ff4 <SPI_EndRxTxTransaction+0xa0>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a1b      	ldr	r2, [pc, #108]	; (8005ff8 <SPI_EndRxTxTransaction+0xa4>)
 8005f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f90:	0d5b      	lsrs	r3, r3, #21
 8005f92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f96:	fb02 f303 	mul.w	r3, r2, r3
 8005f9a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fa4:	d112      	bne.n	8005fcc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2200      	movs	r2, #0
 8005fae:	2180      	movs	r1, #128	; 0x80
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f7ff ff47 	bl	8005e44 <SPI_WaitFlagStateUntilTimeout>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d016      	beq.n	8005fea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc0:	f043 0220 	orr.w	r2, r3, #32
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e00f      	b.n	8005fec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe2:	2b80      	cmp	r3, #128	; 0x80
 8005fe4:	d0f2      	beq.n	8005fcc <SPI_EndRxTxTransaction+0x78>
 8005fe6:	e000      	b.n	8005fea <SPI_EndRxTxTransaction+0x96>
        break;
 8005fe8:	bf00      	nop
  }

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	20000008 	.word	0x20000008
 8005ff8:	165e9f81 	.word	0x165e9f81

08005ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e041      	b.n	8006092 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d106      	bne.n	8006028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f839 	bl	800609a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3304      	adds	r3, #4
 8006038:	4619      	mov	r1, r3
 800603a:	4610      	mov	r0, r2
 800603c:	f000 f9b2 	bl	80063a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
	...

080060b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d001      	beq.n	80060c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e044      	b.n	8006152 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f042 0201 	orr.w	r2, r2, #1
 80060de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a1e      	ldr	r2, [pc, #120]	; (8006160 <HAL_TIM_Base_Start_IT+0xb0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d018      	beq.n	800611c <HAL_TIM_Base_Start_IT+0x6c>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f2:	d013      	beq.n	800611c <HAL_TIM_Base_Start_IT+0x6c>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a1a      	ldr	r2, [pc, #104]	; (8006164 <HAL_TIM_Base_Start_IT+0xb4>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d00e      	beq.n	800611c <HAL_TIM_Base_Start_IT+0x6c>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a19      	ldr	r2, [pc, #100]	; (8006168 <HAL_TIM_Base_Start_IT+0xb8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d009      	beq.n	800611c <HAL_TIM_Base_Start_IT+0x6c>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a17      	ldr	r2, [pc, #92]	; (800616c <HAL_TIM_Base_Start_IT+0xbc>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d004      	beq.n	800611c <HAL_TIM_Base_Start_IT+0x6c>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a16      	ldr	r2, [pc, #88]	; (8006170 <HAL_TIM_Base_Start_IT+0xc0>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d111      	bne.n	8006140 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b06      	cmp	r3, #6
 800612c:	d010      	beq.n	8006150 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f042 0201 	orr.w	r2, r2, #1
 800613c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800613e:	e007      	b.n	8006150 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0201 	orr.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	40010000 	.word	0x40010000
 8006164:	40000400 	.word	0x40000400
 8006168:	40000800 	.word	0x40000800
 800616c:	40000c00 	.word	0x40000c00
 8006170:	40014000 	.word	0x40014000

08006174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d020      	beq.n	80061d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01b      	beq.n	80061d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f06f 0202 	mvn.w	r2, #2
 80061a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	f003 0303 	and.w	r3, r3, #3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f8d2 	bl	8006368 <HAL_TIM_IC_CaptureCallback>
 80061c4:	e005      	b.n	80061d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f8c4 	bl	8006354 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f8d5 	bl	800637c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f003 0304 	and.w	r3, r3, #4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d020      	beq.n	8006224 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d01b      	beq.n	8006224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f06f 0204 	mvn.w	r2, #4
 80061f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2202      	movs	r2, #2
 80061fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f8ac 	bl	8006368 <HAL_TIM_IC_CaptureCallback>
 8006210:	e005      	b.n	800621e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f89e 	bl	8006354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f8af 	bl	800637c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f003 0308 	and.w	r3, r3, #8
 800622a:	2b00      	cmp	r3, #0
 800622c:	d020      	beq.n	8006270 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f003 0308 	and.w	r3, r3, #8
 8006234:	2b00      	cmp	r3, #0
 8006236:	d01b      	beq.n	8006270 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f06f 0208 	mvn.w	r2, #8
 8006240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2204      	movs	r2, #4
 8006246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f886 	bl	8006368 <HAL_TIM_IC_CaptureCallback>
 800625c:	e005      	b.n	800626a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f878 	bl	8006354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f889 	bl	800637c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f003 0310 	and.w	r3, r3, #16
 8006276:	2b00      	cmp	r3, #0
 8006278:	d020      	beq.n	80062bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f003 0310 	and.w	r3, r3, #16
 8006280:	2b00      	cmp	r3, #0
 8006282:	d01b      	beq.n	80062bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f06f 0210 	mvn.w	r2, #16
 800628c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2208      	movs	r2, #8
 8006292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f860 	bl	8006368 <HAL_TIM_IC_CaptureCallback>
 80062a8:	e005      	b.n	80062b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f852 	bl	8006354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f863 	bl	800637c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00c      	beq.n	80062e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d007      	beq.n	80062e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f06f 0201 	mvn.w	r2, #1
 80062d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fc fa92 	bl	8002804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00c      	beq.n	8006304 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d007      	beq.n	8006304 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f8e6 	bl	80064d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00c      	beq.n	8006328 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006314:	2b00      	cmp	r3, #0
 8006316:	d007      	beq.n	8006328 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f834 	bl	8006390 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	f003 0320 	and.w	r3, r3, #32
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00c      	beq.n	800634c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f003 0320 	and.w	r3, r3, #32
 8006338:	2b00      	cmp	r3, #0
 800633a:	d007      	beq.n	800634c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f06f 0220 	mvn.w	r2, #32
 8006344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f8b8 	bl	80064bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800634c:	bf00      	nop
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a3a      	ldr	r2, [pc, #232]	; (80064a0 <TIM_Base_SetConfig+0xfc>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d00f      	beq.n	80063dc <TIM_Base_SetConfig+0x38>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c2:	d00b      	beq.n	80063dc <TIM_Base_SetConfig+0x38>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a37      	ldr	r2, [pc, #220]	; (80064a4 <TIM_Base_SetConfig+0x100>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d007      	beq.n	80063dc <TIM_Base_SetConfig+0x38>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a36      	ldr	r2, [pc, #216]	; (80064a8 <TIM_Base_SetConfig+0x104>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d003      	beq.n	80063dc <TIM_Base_SetConfig+0x38>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a35      	ldr	r2, [pc, #212]	; (80064ac <TIM_Base_SetConfig+0x108>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d108      	bne.n	80063ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a2b      	ldr	r2, [pc, #172]	; (80064a0 <TIM_Base_SetConfig+0xfc>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d01b      	beq.n	800642e <TIM_Base_SetConfig+0x8a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063fc:	d017      	beq.n	800642e <TIM_Base_SetConfig+0x8a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a28      	ldr	r2, [pc, #160]	; (80064a4 <TIM_Base_SetConfig+0x100>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d013      	beq.n	800642e <TIM_Base_SetConfig+0x8a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a27      	ldr	r2, [pc, #156]	; (80064a8 <TIM_Base_SetConfig+0x104>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00f      	beq.n	800642e <TIM_Base_SetConfig+0x8a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a26      	ldr	r2, [pc, #152]	; (80064ac <TIM_Base_SetConfig+0x108>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00b      	beq.n	800642e <TIM_Base_SetConfig+0x8a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a25      	ldr	r2, [pc, #148]	; (80064b0 <TIM_Base_SetConfig+0x10c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d007      	beq.n	800642e <TIM_Base_SetConfig+0x8a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a24      	ldr	r2, [pc, #144]	; (80064b4 <TIM_Base_SetConfig+0x110>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d003      	beq.n	800642e <TIM_Base_SetConfig+0x8a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a23      	ldr	r2, [pc, #140]	; (80064b8 <TIM_Base_SetConfig+0x114>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d108      	bne.n	8006440 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4313      	orrs	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a0e      	ldr	r2, [pc, #56]	; (80064a0 <TIM_Base_SetConfig+0xfc>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d103      	bne.n	8006474 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	691a      	ldr	r2, [r3, #16]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b01      	cmp	r3, #1
 8006484:	d105      	bne.n	8006492 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f023 0201 	bic.w	r2, r3, #1
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	611a      	str	r2, [r3, #16]
  }
}
 8006492:	bf00      	nop
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	40010000 	.word	0x40010000
 80064a4:	40000400 	.word	0x40000400
 80064a8:	40000800 	.word	0x40000800
 80064ac:	40000c00 	.word	0x40000c00
 80064b0:	40014000 	.word	0x40014000
 80064b4:	40014400 	.word	0x40014400
 80064b8:	40014800 	.word	0x40014800

080064bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	4603      	mov	r3, r0
 80064ec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80064f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064f6:	2b84      	cmp	r3, #132	; 0x84
 80064f8:	d005      	beq.n	8006506 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80064fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4413      	add	r3, r2
 8006502:	3303      	adds	r3, #3
 8006504:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006506:	68fb      	ldr	r3, [r7, #12]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3714      	adds	r7, #20
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006518:	f000 fe1e 	bl	8007158 <vTaskStartScheduler>
  
  return osOK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	bd80      	pop	{r7, pc}

08006522 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006522:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006524:	b089      	sub	sp, #36	; 0x24
 8006526:	af04      	add	r7, sp, #16
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d020      	beq.n	8006576 <osThreadCreate+0x54>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d01c      	beq.n	8006576 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685c      	ldr	r4, [r3, #4]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691e      	ldr	r6, [r3, #16]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff ffc8 	bl	80064e4 <makeFreeRtosPriority>
 8006554:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800655e:	9202      	str	r2, [sp, #8]
 8006560:	9301      	str	r3, [sp, #4]
 8006562:	9100      	str	r1, [sp, #0]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	4632      	mov	r2, r6
 8006568:	4629      	mov	r1, r5
 800656a:	4620      	mov	r0, r4
 800656c:	f000 fc2c 	bl	8006dc8 <xTaskCreateStatic>
 8006570:	4603      	mov	r3, r0
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	e01c      	b.n	80065b0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685c      	ldr	r4, [r3, #4]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006582:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800658a:	4618      	mov	r0, r3
 800658c:	f7ff ffaa 	bl	80064e4 <makeFreeRtosPriority>
 8006590:	4602      	mov	r2, r0
 8006592:	f107 030c 	add.w	r3, r7, #12
 8006596:	9301      	str	r3, [sp, #4]
 8006598:	9200      	str	r2, [sp, #0]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	4632      	mov	r2, r6
 800659e:	4629      	mov	r1, r5
 80065a0:	4620      	mov	r0, r4
 80065a2:	f000 fc6e 	bl	8006e82 <xTaskCreate>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d001      	beq.n	80065b0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80065ac:	2300      	movs	r3, #0
 80065ae:	e000      	b.n	80065b2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80065b0:	68fb      	ldr	r3, [r7, #12]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080065ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b084      	sub	sp, #16
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <osDelay+0x16>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	e000      	b.n	80065d2 <osDelay+0x18>
 80065d0:	2301      	movs	r3, #1
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 fd8c 	bl	80070f0 <vTaskDelay>
  
  return osOK;
 80065d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b086      	sub	sp, #24
 80065e6:	af02      	add	r7, sp, #8
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00f      	beq.n	8006614 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d10a      	bne.n	8006610 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	2203      	movs	r2, #3
 8006600:	9200      	str	r2, [sp, #0]
 8006602:	2200      	movs	r2, #0
 8006604:	2100      	movs	r1, #0
 8006606:	2001      	movs	r0, #1
 8006608:	f000 f93a 	bl	8006880 <xQueueGenericCreateStatic>
 800660c:	4603      	mov	r3, r0
 800660e:	e016      	b.n	800663e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006610:	2300      	movs	r3, #0
 8006612:	e014      	b.n	800663e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d110      	bne.n	800663c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800661a:	2203      	movs	r2, #3
 800661c:	2100      	movs	r1, #0
 800661e:	2001      	movs	r0, #1
 8006620:	f000 f9a6 	bl	8006970 <xQueueGenericCreate>
 8006624:	60f8      	str	r0, [r7, #12]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d005      	beq.n	8006638 <osSemaphoreCreate+0x56>
 800662c:	2300      	movs	r3, #0
 800662e:	2200      	movs	r2, #0
 8006630:	2100      	movs	r1, #0
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 f9f6 	bl	8006a24 <xQueueGenericSend>
      return sema;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	e000      	b.n	800663e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800663c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f103 0208 	add.w	r2, r3, #8
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f04f 32ff 	mov.w	r2, #4294967295
 800665e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f103 0208 	add.w	r2, r3, #8
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f103 0208 	add.w	r2, r3, #8
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689a      	ldr	r2, [r3, #8]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	683a      	ldr	r2, [r7, #0]
 80066ca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	1c5a      	adds	r2, r3, #1
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	601a      	str	r2, [r3, #0]
}
 80066dc:	bf00      	nop
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fe:	d103      	bne.n	8006708 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	60fb      	str	r3, [r7, #12]
 8006706:	e00c      	b.n	8006722 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3308      	adds	r3, #8
 800670c:	60fb      	str	r3, [r7, #12]
 800670e:	e002      	b.n	8006716 <vListInsert+0x2e>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	429a      	cmp	r2, r3
 8006720:	d2f6      	bcs.n	8006710 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	601a      	str	r2, [r3, #0]
}
 800674e:	bf00      	nop
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800675a:	b480      	push	{r7}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	6892      	ldr	r2, [r2, #8]
 8006770:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	6852      	ldr	r2, [r2, #4]
 800677a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	429a      	cmp	r2, r3
 8006784:	d103      	bne.n	800678e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	689a      	ldr	r2, [r3, #8]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	1e5a      	subs	r2, r3, #1
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
	...

080067b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10a      	bne.n	80067da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80067da:	f001 faf3 	bl	8007dc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e6:	68f9      	ldr	r1, [r7, #12]
 80067e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80067ea:	fb01 f303 	mul.w	r3, r1, r3
 80067ee:	441a      	add	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680a:	3b01      	subs	r3, #1
 800680c:	68f9      	ldr	r1, [r7, #12]
 800680e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006810:	fb01 f303 	mul.w	r3, r1, r3
 8006814:	441a      	add	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	22ff      	movs	r2, #255	; 0xff
 800681e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	22ff      	movs	r2, #255	; 0xff
 8006826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d114      	bne.n	800685a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01a      	beq.n	800686e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3310      	adds	r3, #16
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fecd 	bl	80075dc <xTaskRemoveFromEventList>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d012      	beq.n	800686e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006848:	4b0c      	ldr	r3, [pc, #48]	; (800687c <xQueueGenericReset+0xcc>)
 800684a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	e009      	b.n	800686e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3310      	adds	r3, #16
 800685e:	4618      	mov	r0, r3
 8006860:	f7ff fef1 	bl	8006646 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	3324      	adds	r3, #36	; 0x24
 8006868:	4618      	mov	r0, r3
 800686a:	f7ff feec 	bl	8006646 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800686e:	f001 fad9 	bl	8007e24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006872:	2301      	movs	r3, #1
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	e000ed04 	.word	0xe000ed04

08006880 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08e      	sub	sp, #56	; 0x38
 8006884:	af02      	add	r7, sp, #8
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
 800688c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10a      	bne.n	80068aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068a6:	bf00      	nop
 80068a8:	e7fe      	b.n	80068a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10a      	bne.n	80068c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068c2:	bf00      	nop
 80068c4:	e7fe      	b.n	80068c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <xQueueGenericCreateStatic+0x52>
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <xQueueGenericCreateStatic+0x56>
 80068d2:	2301      	movs	r3, #1
 80068d4:	e000      	b.n	80068d8 <xQueueGenericCreateStatic+0x58>
 80068d6:	2300      	movs	r3, #0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10a      	bne.n	80068f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80068dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	623b      	str	r3, [r7, #32]
}
 80068ee:	bf00      	nop
 80068f0:	e7fe      	b.n	80068f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d102      	bne.n	80068fe <xQueueGenericCreateStatic+0x7e>
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <xQueueGenericCreateStatic+0x82>
 80068fe:	2301      	movs	r3, #1
 8006900:	e000      	b.n	8006904 <xQueueGenericCreateStatic+0x84>
 8006902:	2300      	movs	r3, #0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	61fb      	str	r3, [r7, #28]
}
 800691a:	bf00      	nop
 800691c:	e7fe      	b.n	800691c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800691e:	2348      	movs	r3, #72	; 0x48
 8006920:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2b48      	cmp	r3, #72	; 0x48
 8006926:	d00a      	beq.n	800693e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	61bb      	str	r3, [r7, #24]
}
 800693a:	bf00      	nop
 800693c:	e7fe      	b.n	800693c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800693e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00d      	beq.n	8006966 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800694a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006952:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	4613      	mov	r3, r2
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	68b9      	ldr	r1, [r7, #8]
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 f83f 	bl	80069e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006968:	4618      	mov	r0, r3
 800696a:	3730      	adds	r7, #48	; 0x30
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08a      	sub	sp, #40	; 0x28
 8006974:	af02      	add	r7, sp, #8
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	4613      	mov	r3, r2
 800697c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	613b      	str	r3, [r7, #16]
}
 8006996:	bf00      	nop
 8006998:	e7fe      	b.n	8006998 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	fb02 f303 	mul.w	r3, r2, r3
 80069a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	3348      	adds	r3, #72	; 0x48
 80069a8:	4618      	mov	r0, r3
 80069aa:	f001 faed 	bl	8007f88 <pvPortMalloc>
 80069ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d011      	beq.n	80069da <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	3348      	adds	r3, #72	; 0x48
 80069be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069c8:	79fa      	ldrb	r2, [r7, #7]
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	4613      	mov	r3, r2
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	68b9      	ldr	r1, [r7, #8]
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 f805 	bl	80069e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069da:	69bb      	ldr	r3, [r7, #24]
	}
 80069dc:	4618      	mov	r0, r3
 80069de:	3720      	adds	r7, #32
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d103      	bne.n	8006a00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	69ba      	ldr	r2, [r7, #24]
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	e002      	b.n	8006a06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a12:	2101      	movs	r1, #1
 8006a14:	69b8      	ldr	r0, [r7, #24]
 8006a16:	f7ff fecb 	bl	80067b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a1a:	bf00      	nop
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b08e      	sub	sp, #56	; 0x38
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
 8006a30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a32:	2300      	movs	r3, #0
 8006a34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10a      	bne.n	8006a56 <xQueueGenericSend+0x32>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d103      	bne.n	8006a64 <xQueueGenericSend+0x40>
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <xQueueGenericSend+0x44>
 8006a64:	2301      	movs	r3, #1
 8006a66:	e000      	b.n	8006a6a <xQueueGenericSend+0x46>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10a      	bne.n	8006a84 <xQueueGenericSend+0x60>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a80:	bf00      	nop
 8006a82:	e7fe      	b.n	8006a82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d103      	bne.n	8006a92 <xQueueGenericSend+0x6e>
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d101      	bne.n	8006a96 <xQueueGenericSend+0x72>
 8006a92:	2301      	movs	r3, #1
 8006a94:	e000      	b.n	8006a98 <xQueueGenericSend+0x74>
 8006a96:	2300      	movs	r3, #0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <xQueueGenericSend+0x8e>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	623b      	str	r3, [r7, #32]
}
 8006aae:	bf00      	nop
 8006ab0:	e7fe      	b.n	8006ab0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ab2:	f000 ff4f 	bl	8007954 <xTaskGetSchedulerState>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d102      	bne.n	8006ac2 <xQueueGenericSend+0x9e>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <xQueueGenericSend+0xa2>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e000      	b.n	8006ac8 <xQueueGenericSend+0xa4>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10a      	bne.n	8006ae2 <xQueueGenericSend+0xbe>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	61fb      	str	r3, [r7, #28]
}
 8006ade:	bf00      	nop
 8006ae0:	e7fe      	b.n	8006ae0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ae2:	f001 f96f 	bl	8007dc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d302      	bcc.n	8006af8 <xQueueGenericSend+0xd4>
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d129      	bne.n	8006b4c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	68b9      	ldr	r1, [r7, #8]
 8006afc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006afe:	f000 f88f 	bl	8006c20 <prvCopyDataToQueue>
 8006b02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d010      	beq.n	8006b2e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0e:	3324      	adds	r3, #36	; 0x24
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 fd63 	bl	80075dc <xTaskRemoveFromEventList>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d013      	beq.n	8006b44 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b1c:	4b3f      	ldr	r3, [pc, #252]	; (8006c1c <xQueueGenericSend+0x1f8>)
 8006b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	e00a      	b.n	8006b44 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d007      	beq.n	8006b44 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b34:	4b39      	ldr	r3, [pc, #228]	; (8006c1c <xQueueGenericSend+0x1f8>)
 8006b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b44:	f001 f96e 	bl	8007e24 <vPortExitCritical>
				return pdPASS;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e063      	b.n	8006c14 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d103      	bne.n	8006b5a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b52:	f001 f967 	bl	8007e24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b56:	2300      	movs	r3, #0
 8006b58:	e05c      	b.n	8006c14 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d106      	bne.n	8006b6e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b60:	f107 0314 	add.w	r3, r7, #20
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 fd9b 	bl	80076a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b6e:	f001 f959 	bl	8007e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b72:	f000 fb51 	bl	8007218 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b76:	f001 f925 	bl	8007dc4 <vPortEnterCritical>
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b80:	b25b      	sxtb	r3, r3
 8006b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b86:	d103      	bne.n	8006b90 <xQueueGenericSend+0x16c>
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b96:	b25b      	sxtb	r3, r3
 8006b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9c:	d103      	bne.n	8006ba6 <xQueueGenericSend+0x182>
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ba6:	f001 f93d 	bl	8007e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006baa:	1d3a      	adds	r2, r7, #4
 8006bac:	f107 0314 	add.w	r3, r7, #20
 8006bb0:	4611      	mov	r1, r2
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 fd8a 	bl	80076cc <xTaskCheckForTimeOut>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d124      	bne.n	8006c08 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006bbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bc0:	f000 f8ea 	bl	8006d98 <prvIsQueueFull>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d018      	beq.n	8006bfc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	3310      	adds	r3, #16
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fcde 	bl	8007594 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bda:	f000 f88b 	bl	8006cf4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006bde:	f000 fb29 	bl	8007234 <xTaskResumeAll>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f47f af7c 	bne.w	8006ae2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006bea:	4b0c      	ldr	r3, [pc, #48]	; (8006c1c <xQueueGenericSend+0x1f8>)
 8006bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	e772      	b.n	8006ae2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bfe:	f000 f879 	bl	8006cf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c02:	f000 fb17 	bl	8007234 <xTaskResumeAll>
 8006c06:	e76c      	b.n	8006ae2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c0a:	f000 f873 	bl	8006cf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c0e:	f000 fb11 	bl	8007234 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3738      	adds	r7, #56	; 0x38
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	e000ed04 	.word	0xe000ed04

08006c20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10d      	bne.n	8006c5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d14d      	bne.n	8006ce2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 fea0 	bl	8007990 <xTaskPriorityDisinherit>
 8006c50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	609a      	str	r2, [r3, #8]
 8006c58:	e043      	b.n	8006ce2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d119      	bne.n	8006c94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6858      	ldr	r0, [r3, #4]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c68:	461a      	mov	r2, r3
 8006c6a:	68b9      	ldr	r1, [r7, #8]
 8006c6c:	f002 fa01 	bl	8009072 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c78:	441a      	add	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d32b      	bcc.n	8006ce2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	605a      	str	r2, [r3, #4]
 8006c92:	e026      	b.n	8006ce2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	68d8      	ldr	r0, [r3, #12]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	68b9      	ldr	r1, [r7, #8]
 8006ca0:	f002 f9e7 	bl	8009072 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	68da      	ldr	r2, [r3, #12]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	425b      	negs	r3, r3
 8006cae:	441a      	add	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d207      	bcs.n	8006cd0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc8:	425b      	negs	r3, r3
 8006cca:	441a      	add	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d105      	bne.n	8006ce2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006cea:	697b      	ldr	r3, [r7, #20]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006cfc:	f001 f862 	bl	8007dc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d08:	e011      	b.n	8006d2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d012      	beq.n	8006d38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	3324      	adds	r3, #36	; 0x24
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 fc60 	bl	80075dc <xTaskRemoveFromEventList>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d22:	f000 fd35 	bl	8007790 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d26:	7bfb      	ldrb	r3, [r7, #15]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	dce9      	bgt.n	8006d0a <prvUnlockQueue+0x16>
 8006d36:	e000      	b.n	8006d3a <prvUnlockQueue+0x46>
					break;
 8006d38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	22ff      	movs	r2, #255	; 0xff
 8006d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006d42:	f001 f86f 	bl	8007e24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d46:	f001 f83d 	bl	8007dc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d52:	e011      	b.n	8006d78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d012      	beq.n	8006d82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3310      	adds	r3, #16
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 fc3b 	bl	80075dc <xTaskRemoveFromEventList>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d6c:	f000 fd10 	bl	8007790 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d70:	7bbb      	ldrb	r3, [r7, #14]
 8006d72:	3b01      	subs	r3, #1
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	dce9      	bgt.n	8006d54 <prvUnlockQueue+0x60>
 8006d80:	e000      	b.n	8006d84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	22ff      	movs	r2, #255	; 0xff
 8006d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006d8c:	f001 f84a 	bl	8007e24 <vPortExitCritical>
}
 8006d90:	bf00      	nop
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006da0:	f001 f810 	bl	8007dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d102      	bne.n	8006db6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006db0:	2301      	movs	r3, #1
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	e001      	b.n	8006dba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006db6:	2300      	movs	r3, #0
 8006db8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006dba:	f001 f833 	bl	8007e24 <vPortExitCritical>

	return xReturn;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08e      	sub	sp, #56	; 0x38
 8006dcc:	af04      	add	r7, sp, #16
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10a      	bne.n	8006df2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	623b      	str	r3, [r7, #32]
}
 8006dee:	bf00      	nop
 8006df0:	e7fe      	b.n	8006df0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <xTaskCreateStatic+0x46>
	__asm volatile
 8006df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	61fb      	str	r3, [r7, #28]
}
 8006e0a:	bf00      	nop
 8006e0c:	e7fe      	b.n	8006e0c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e0e:	2354      	movs	r3, #84	; 0x54
 8006e10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	2b54      	cmp	r3, #84	; 0x54
 8006e16:	d00a      	beq.n	8006e2e <xTaskCreateStatic+0x66>
	__asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	61bb      	str	r3, [r7, #24]
}
 8006e2a:	bf00      	nop
 8006e2c:	e7fe      	b.n	8006e2c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006e2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d01e      	beq.n	8006e74 <xTaskCreateStatic+0xac>
 8006e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d01b      	beq.n	8006e74 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	2202      	movs	r2, #2
 8006e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e4e:	2300      	movs	r3, #0
 8006e50:	9303      	str	r3, [sp, #12]
 8006e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e54:	9302      	str	r3, [sp, #8]
 8006e56:	f107 0314 	add.w	r3, r7, #20
 8006e5a:	9301      	str	r3, [sp, #4]
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	68b9      	ldr	r1, [r7, #8]
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f000 f850 	bl	8006f0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e6e:	f000 f8d5 	bl	800701c <prvAddNewTaskToReadyList>
 8006e72:	e001      	b.n	8006e78 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006e74:	2300      	movs	r3, #0
 8006e76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e78:	697b      	ldr	r3, [r7, #20]
	}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3728      	adds	r7, #40	; 0x28
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b08c      	sub	sp, #48	; 0x30
 8006e86:	af04      	add	r7, sp, #16
 8006e88:	60f8      	str	r0, [r7, #12]
 8006e8a:	60b9      	str	r1, [r7, #8]
 8006e8c:	603b      	str	r3, [r7, #0]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006e92:	88fb      	ldrh	r3, [r7, #6]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4618      	mov	r0, r3
 8006e98:	f001 f876 	bl	8007f88 <pvPortMalloc>
 8006e9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00e      	beq.n	8006ec2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ea4:	2054      	movs	r0, #84	; 0x54
 8006ea6:	f001 f86f 	bl	8007f88 <pvPortMalloc>
 8006eaa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	631a      	str	r2, [r3, #48]	; 0x30
 8006eb8:	e005      	b.n	8006ec6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006eba:	6978      	ldr	r0, [r7, #20]
 8006ebc:	f001 f930 	bl	8008120 <vPortFree>
 8006ec0:	e001      	b.n	8006ec6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d017      	beq.n	8006efc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ed4:	88fa      	ldrh	r2, [r7, #6]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	9303      	str	r3, [sp, #12]
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	9302      	str	r3, [sp, #8]
 8006ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee0:	9301      	str	r3, [sp, #4]
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68b9      	ldr	r1, [r7, #8]
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f000 f80e 	bl	8006f0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ef0:	69f8      	ldr	r0, [r7, #28]
 8006ef2:	f000 f893 	bl	800701c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	61bb      	str	r3, [r7, #24]
 8006efa:	e002      	b.n	8006f02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006efc:	f04f 33ff 	mov.w	r3, #4294967295
 8006f00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f02:	69bb      	ldr	r3, [r7, #24]
	}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3720      	adds	r7, #32
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
 8006f18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f24:	3b01      	subs	r3, #1
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	f023 0307 	bic.w	r3, r3, #7
 8006f32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	617b      	str	r3, [r7, #20]
}
 8006f50:	bf00      	nop
 8006f52:	e7fe      	b.n	8006f52 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d01f      	beq.n	8006f9a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	61fb      	str	r3, [r7, #28]
 8006f5e:	e012      	b.n	8006f86 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	4413      	add	r3, r2
 8006f66:	7819      	ldrb	r1, [r3, #0]
 8006f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	3334      	adds	r3, #52	; 0x34
 8006f70:	460a      	mov	r2, r1
 8006f72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	4413      	add	r3, r2
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d006      	beq.n	8006f8e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	3301      	adds	r3, #1
 8006f84:	61fb      	str	r3, [r7, #28]
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	2b0f      	cmp	r3, #15
 8006f8a:	d9e9      	bls.n	8006f60 <prvInitialiseNewTask+0x54>
 8006f8c:	e000      	b.n	8006f90 <prvInitialiseNewTask+0x84>
			{
				break;
 8006f8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f98:	e003      	b.n	8006fa2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	2b06      	cmp	r3, #6
 8006fa6:	d901      	bls.n	8006fac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006fa8:	2306      	movs	r3, #6
 8006faa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fb6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fba:	2200      	movs	r2, #0
 8006fbc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7ff fb5f 	bl	8006686 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fca:	3318      	adds	r3, #24
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7ff fb5a 	bl	8006686 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fda:	f1c3 0207 	rsb	r2, r3, #7
 8006fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fe6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fea:	2200      	movs	r2, #0
 8006fec:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	68f9      	ldr	r1, [r7, #12]
 8006ffa:	69b8      	ldr	r0, [r7, #24]
 8006ffc:	f000 fdb4 	bl	8007b68 <pxPortInitialiseStack>
 8007000:	4602      	mov	r2, r0
 8007002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007004:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800700c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007010:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007012:	bf00      	nop
 8007014:	3720      	adds	r7, #32
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007024:	f000 fece 	bl	8007dc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007028:	4b2a      	ldr	r3, [pc, #168]	; (80070d4 <prvAddNewTaskToReadyList+0xb8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3301      	adds	r3, #1
 800702e:	4a29      	ldr	r2, [pc, #164]	; (80070d4 <prvAddNewTaskToReadyList+0xb8>)
 8007030:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007032:	4b29      	ldr	r3, [pc, #164]	; (80070d8 <prvAddNewTaskToReadyList+0xbc>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d109      	bne.n	800704e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800703a:	4a27      	ldr	r2, [pc, #156]	; (80070d8 <prvAddNewTaskToReadyList+0xbc>)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007040:	4b24      	ldr	r3, [pc, #144]	; (80070d4 <prvAddNewTaskToReadyList+0xb8>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d110      	bne.n	800706a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007048:	f000 fbc6 	bl	80077d8 <prvInitialiseTaskLists>
 800704c:	e00d      	b.n	800706a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800704e:	4b23      	ldr	r3, [pc, #140]	; (80070dc <prvAddNewTaskToReadyList+0xc0>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d109      	bne.n	800706a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007056:	4b20      	ldr	r3, [pc, #128]	; (80070d8 <prvAddNewTaskToReadyList+0xbc>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	429a      	cmp	r2, r3
 8007062:	d802      	bhi.n	800706a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007064:	4a1c      	ldr	r2, [pc, #112]	; (80070d8 <prvAddNewTaskToReadyList+0xbc>)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800706a:	4b1d      	ldr	r3, [pc, #116]	; (80070e0 <prvAddNewTaskToReadyList+0xc4>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3301      	adds	r3, #1
 8007070:	4a1b      	ldr	r2, [pc, #108]	; (80070e0 <prvAddNewTaskToReadyList+0xc4>)
 8007072:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007078:	2201      	movs	r2, #1
 800707a:	409a      	lsls	r2, r3
 800707c:	4b19      	ldr	r3, [pc, #100]	; (80070e4 <prvAddNewTaskToReadyList+0xc8>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4313      	orrs	r3, r2
 8007082:	4a18      	ldr	r2, [pc, #96]	; (80070e4 <prvAddNewTaskToReadyList+0xc8>)
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708a:	4613      	mov	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4a15      	ldr	r2, [pc, #84]	; (80070e8 <prvAddNewTaskToReadyList+0xcc>)
 8007094:	441a      	add	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	3304      	adds	r3, #4
 800709a:	4619      	mov	r1, r3
 800709c:	4610      	mov	r0, r2
 800709e:	f7ff faff 	bl	80066a0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80070a2:	f000 febf 	bl	8007e24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80070a6:	4b0d      	ldr	r3, [pc, #52]	; (80070dc <prvAddNewTaskToReadyList+0xc0>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00e      	beq.n	80070cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80070ae:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <prvAddNewTaskToReadyList+0xbc>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d207      	bcs.n	80070cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80070bc:	4b0b      	ldr	r3, [pc, #44]	; (80070ec <prvAddNewTaskToReadyList+0xd0>)
 80070be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	f3bf 8f4f 	dsb	sy
 80070c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070cc:	bf00      	nop
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	200008b4 	.word	0x200008b4
 80070d8:	200007b4 	.word	0x200007b4
 80070dc:	200008c0 	.word	0x200008c0
 80070e0:	200008d0 	.word	0x200008d0
 80070e4:	200008bc 	.word	0x200008bc
 80070e8:	200007b8 	.word	0x200007b8
 80070ec:	e000ed04 	.word	0xe000ed04

080070f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80070f8:	2300      	movs	r3, #0
 80070fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d017      	beq.n	8007132 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007102:	4b13      	ldr	r3, [pc, #76]	; (8007150 <vTaskDelay+0x60>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00a      	beq.n	8007120 <vTaskDelay+0x30>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	60bb      	str	r3, [r7, #8]
}
 800711c:	bf00      	nop
 800711e:	e7fe      	b.n	800711e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007120:	f000 f87a 	bl	8007218 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007124:	2100      	movs	r1, #0
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fcb8 	bl	8007a9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800712c:	f000 f882 	bl	8007234 <xTaskResumeAll>
 8007130:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d107      	bne.n	8007148 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007138:	4b06      	ldr	r3, [pc, #24]	; (8007154 <vTaskDelay+0x64>)
 800713a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007148:	bf00      	nop
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	200008dc 	.word	0x200008dc
 8007154:	e000ed04 	.word	0xe000ed04

08007158 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08a      	sub	sp, #40	; 0x28
 800715c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800715e:	2300      	movs	r3, #0
 8007160:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007162:	2300      	movs	r3, #0
 8007164:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007166:	463a      	mov	r2, r7
 8007168:	1d39      	adds	r1, r7, #4
 800716a:	f107 0308 	add.w	r3, r7, #8
 800716e:	4618      	mov	r0, r3
 8007170:	f7fa fb80 	bl	8001874 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	9202      	str	r2, [sp, #8]
 800717c:	9301      	str	r3, [sp, #4]
 800717e:	2300      	movs	r3, #0
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	2300      	movs	r3, #0
 8007184:	460a      	mov	r2, r1
 8007186:	491e      	ldr	r1, [pc, #120]	; (8007200 <vTaskStartScheduler+0xa8>)
 8007188:	481e      	ldr	r0, [pc, #120]	; (8007204 <vTaskStartScheduler+0xac>)
 800718a:	f7ff fe1d 	bl	8006dc8 <xTaskCreateStatic>
 800718e:	4603      	mov	r3, r0
 8007190:	4a1d      	ldr	r2, [pc, #116]	; (8007208 <vTaskStartScheduler+0xb0>)
 8007192:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007194:	4b1c      	ldr	r3, [pc, #112]	; (8007208 <vTaskStartScheduler+0xb0>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800719c:	2301      	movs	r3, #1
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	e001      	b.n	80071a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80071a2:	2300      	movs	r3, #0
 80071a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d116      	bne.n	80071da <vTaskStartScheduler+0x82>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	613b      	str	r3, [r7, #16]
}
 80071be:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80071c0:	4b12      	ldr	r3, [pc, #72]	; (800720c <vTaskStartScheduler+0xb4>)
 80071c2:	f04f 32ff 	mov.w	r2, #4294967295
 80071c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80071c8:	4b11      	ldr	r3, [pc, #68]	; (8007210 <vTaskStartScheduler+0xb8>)
 80071ca:	2201      	movs	r2, #1
 80071cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80071ce:	4b11      	ldr	r3, [pc, #68]	; (8007214 <vTaskStartScheduler+0xbc>)
 80071d0:	2200      	movs	r2, #0
 80071d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80071d4:	f000 fd54 	bl	8007c80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80071d8:	e00e      	b.n	80071f8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e0:	d10a      	bne.n	80071f8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80071e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	60fb      	str	r3, [r7, #12]
}
 80071f4:	bf00      	nop
 80071f6:	e7fe      	b.n	80071f6 <vTaskStartScheduler+0x9e>
}
 80071f8:	bf00      	nop
 80071fa:	3718      	adds	r7, #24
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	0800b2e4 	.word	0x0800b2e4
 8007204:	080077a9 	.word	0x080077a9
 8007208:	200008d8 	.word	0x200008d8
 800720c:	200008d4 	.word	0x200008d4
 8007210:	200008c0 	.word	0x200008c0
 8007214:	200008b8 	.word	0x200008b8

08007218 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007218:	b480      	push	{r7}
 800721a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800721c:	4b04      	ldr	r3, [pc, #16]	; (8007230 <vTaskSuspendAll+0x18>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3301      	adds	r3, #1
 8007222:	4a03      	ldr	r2, [pc, #12]	; (8007230 <vTaskSuspendAll+0x18>)
 8007224:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007226:	bf00      	nop
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	200008dc 	.word	0x200008dc

08007234 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800723a:	2300      	movs	r3, #0
 800723c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800723e:	2300      	movs	r3, #0
 8007240:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007242:	4b41      	ldr	r3, [pc, #260]	; (8007348 <xTaskResumeAll+0x114>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10a      	bne.n	8007260 <xTaskResumeAll+0x2c>
	__asm volatile
 800724a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724e:	f383 8811 	msr	BASEPRI, r3
 8007252:	f3bf 8f6f 	isb	sy
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	603b      	str	r3, [r7, #0]
}
 800725c:	bf00      	nop
 800725e:	e7fe      	b.n	800725e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007260:	f000 fdb0 	bl	8007dc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007264:	4b38      	ldr	r3, [pc, #224]	; (8007348 <xTaskResumeAll+0x114>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3b01      	subs	r3, #1
 800726a:	4a37      	ldr	r2, [pc, #220]	; (8007348 <xTaskResumeAll+0x114>)
 800726c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800726e:	4b36      	ldr	r3, [pc, #216]	; (8007348 <xTaskResumeAll+0x114>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d161      	bne.n	800733a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007276:	4b35      	ldr	r3, [pc, #212]	; (800734c <xTaskResumeAll+0x118>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d05d      	beq.n	800733a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800727e:	e02e      	b.n	80072de <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007280:	4b33      	ldr	r3, [pc, #204]	; (8007350 <xTaskResumeAll+0x11c>)
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	3318      	adds	r3, #24
 800728c:	4618      	mov	r0, r3
 800728e:	f7ff fa64 	bl	800675a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3304      	adds	r3, #4
 8007296:	4618      	mov	r0, r3
 8007298:	f7ff fa5f 	bl	800675a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	2201      	movs	r2, #1
 80072a2:	409a      	lsls	r2, r3
 80072a4:	4b2b      	ldr	r3, [pc, #172]	; (8007354 <xTaskResumeAll+0x120>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	4a2a      	ldr	r2, [pc, #168]	; (8007354 <xTaskResumeAll+0x120>)
 80072ac:	6013      	str	r3, [r2, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b2:	4613      	mov	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4a27      	ldr	r2, [pc, #156]	; (8007358 <xTaskResumeAll+0x124>)
 80072bc:	441a      	add	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3304      	adds	r3, #4
 80072c2:	4619      	mov	r1, r3
 80072c4:	4610      	mov	r0, r2
 80072c6:	f7ff f9eb 	bl	80066a0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ce:	4b23      	ldr	r3, [pc, #140]	; (800735c <xTaskResumeAll+0x128>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d302      	bcc.n	80072de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80072d8:	4b21      	ldr	r3, [pc, #132]	; (8007360 <xTaskResumeAll+0x12c>)
 80072da:	2201      	movs	r2, #1
 80072dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072de:	4b1c      	ldr	r3, [pc, #112]	; (8007350 <xTaskResumeAll+0x11c>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1cc      	bne.n	8007280 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80072ec:	f000 fb12 	bl	8007914 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80072f0:	4b1c      	ldr	r3, [pc, #112]	; (8007364 <xTaskResumeAll+0x130>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d010      	beq.n	800731e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80072fc:	f000 f836 	bl	800736c <xTaskIncrementTick>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d002      	beq.n	800730c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007306:	4b16      	ldr	r3, [pc, #88]	; (8007360 <xTaskResumeAll+0x12c>)
 8007308:	2201      	movs	r2, #1
 800730a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	3b01      	subs	r3, #1
 8007310:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1f1      	bne.n	80072fc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007318:	4b12      	ldr	r3, [pc, #72]	; (8007364 <xTaskResumeAll+0x130>)
 800731a:	2200      	movs	r2, #0
 800731c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800731e:	4b10      	ldr	r3, [pc, #64]	; (8007360 <xTaskResumeAll+0x12c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d009      	beq.n	800733a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007326:	2301      	movs	r3, #1
 8007328:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800732a:	4b0f      	ldr	r3, [pc, #60]	; (8007368 <xTaskResumeAll+0x134>)
 800732c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800733a:	f000 fd73 	bl	8007e24 <vPortExitCritical>

	return xAlreadyYielded;
 800733e:	68bb      	ldr	r3, [r7, #8]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	200008dc 	.word	0x200008dc
 800734c:	200008b4 	.word	0x200008b4
 8007350:	20000874 	.word	0x20000874
 8007354:	200008bc 	.word	0x200008bc
 8007358:	200007b8 	.word	0x200007b8
 800735c:	200007b4 	.word	0x200007b4
 8007360:	200008c8 	.word	0x200008c8
 8007364:	200008c4 	.word	0x200008c4
 8007368:	e000ed04 	.word	0xe000ed04

0800736c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007372:	2300      	movs	r3, #0
 8007374:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007376:	4b4e      	ldr	r3, [pc, #312]	; (80074b0 <xTaskIncrementTick+0x144>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	f040 808e 	bne.w	800749c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007380:	4b4c      	ldr	r3, [pc, #304]	; (80074b4 <xTaskIncrementTick+0x148>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3301      	adds	r3, #1
 8007386:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007388:	4a4a      	ldr	r2, [pc, #296]	; (80074b4 <xTaskIncrementTick+0x148>)
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d120      	bne.n	80073d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007394:	4b48      	ldr	r3, [pc, #288]	; (80074b8 <xTaskIncrementTick+0x14c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00a      	beq.n	80073b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	603b      	str	r3, [r7, #0]
}
 80073b0:	bf00      	nop
 80073b2:	e7fe      	b.n	80073b2 <xTaskIncrementTick+0x46>
 80073b4:	4b40      	ldr	r3, [pc, #256]	; (80074b8 <xTaskIncrementTick+0x14c>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	60fb      	str	r3, [r7, #12]
 80073ba:	4b40      	ldr	r3, [pc, #256]	; (80074bc <xTaskIncrementTick+0x150>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a3e      	ldr	r2, [pc, #248]	; (80074b8 <xTaskIncrementTick+0x14c>)
 80073c0:	6013      	str	r3, [r2, #0]
 80073c2:	4a3e      	ldr	r2, [pc, #248]	; (80074bc <xTaskIncrementTick+0x150>)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6013      	str	r3, [r2, #0]
 80073c8:	4b3d      	ldr	r3, [pc, #244]	; (80074c0 <xTaskIncrementTick+0x154>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3301      	adds	r3, #1
 80073ce:	4a3c      	ldr	r2, [pc, #240]	; (80074c0 <xTaskIncrementTick+0x154>)
 80073d0:	6013      	str	r3, [r2, #0]
 80073d2:	f000 fa9f 	bl	8007914 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80073d6:	4b3b      	ldr	r3, [pc, #236]	; (80074c4 <xTaskIncrementTick+0x158>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d348      	bcc.n	8007472 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073e0:	4b35      	ldr	r3, [pc, #212]	; (80074b8 <xTaskIncrementTick+0x14c>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d104      	bne.n	80073f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073ea:	4b36      	ldr	r3, [pc, #216]	; (80074c4 <xTaskIncrementTick+0x158>)
 80073ec:	f04f 32ff 	mov.w	r2, #4294967295
 80073f0:	601a      	str	r2, [r3, #0]
					break;
 80073f2:	e03e      	b.n	8007472 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f4:	4b30      	ldr	r3, [pc, #192]	; (80074b8 <xTaskIncrementTick+0x14c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	429a      	cmp	r2, r3
 800740a:	d203      	bcs.n	8007414 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800740c:	4a2d      	ldr	r2, [pc, #180]	; (80074c4 <xTaskIncrementTick+0x158>)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007412:	e02e      	b.n	8007472 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	3304      	adds	r3, #4
 8007418:	4618      	mov	r0, r3
 800741a:	f7ff f99e 	bl	800675a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007422:	2b00      	cmp	r3, #0
 8007424:	d004      	beq.n	8007430 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	3318      	adds	r3, #24
 800742a:	4618      	mov	r0, r3
 800742c:	f7ff f995 	bl	800675a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007434:	2201      	movs	r2, #1
 8007436:	409a      	lsls	r2, r3
 8007438:	4b23      	ldr	r3, [pc, #140]	; (80074c8 <xTaskIncrementTick+0x15c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4313      	orrs	r3, r2
 800743e:	4a22      	ldr	r2, [pc, #136]	; (80074c8 <xTaskIncrementTick+0x15c>)
 8007440:	6013      	str	r3, [r2, #0]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007446:	4613      	mov	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4a1f      	ldr	r2, [pc, #124]	; (80074cc <xTaskIncrementTick+0x160>)
 8007450:	441a      	add	r2, r3
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	3304      	adds	r3, #4
 8007456:	4619      	mov	r1, r3
 8007458:	4610      	mov	r0, r2
 800745a:	f7ff f921 	bl	80066a0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007462:	4b1b      	ldr	r3, [pc, #108]	; (80074d0 <xTaskIncrementTick+0x164>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007468:	429a      	cmp	r2, r3
 800746a:	d3b9      	bcc.n	80073e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800746c:	2301      	movs	r3, #1
 800746e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007470:	e7b6      	b.n	80073e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007472:	4b17      	ldr	r3, [pc, #92]	; (80074d0 <xTaskIncrementTick+0x164>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007478:	4914      	ldr	r1, [pc, #80]	; (80074cc <xTaskIncrementTick+0x160>)
 800747a:	4613      	mov	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4413      	add	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	440b      	add	r3, r1
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d901      	bls.n	800748e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800748a:	2301      	movs	r3, #1
 800748c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800748e:	4b11      	ldr	r3, [pc, #68]	; (80074d4 <xTaskIncrementTick+0x168>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d007      	beq.n	80074a6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007496:	2301      	movs	r3, #1
 8007498:	617b      	str	r3, [r7, #20]
 800749a:	e004      	b.n	80074a6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800749c:	4b0e      	ldr	r3, [pc, #56]	; (80074d8 <xTaskIncrementTick+0x16c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	3301      	adds	r3, #1
 80074a2:	4a0d      	ldr	r2, [pc, #52]	; (80074d8 <xTaskIncrementTick+0x16c>)
 80074a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80074a6:	697b      	ldr	r3, [r7, #20]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	200008dc 	.word	0x200008dc
 80074b4:	200008b8 	.word	0x200008b8
 80074b8:	2000086c 	.word	0x2000086c
 80074bc:	20000870 	.word	0x20000870
 80074c0:	200008cc 	.word	0x200008cc
 80074c4:	200008d4 	.word	0x200008d4
 80074c8:	200008bc 	.word	0x200008bc
 80074cc:	200007b8 	.word	0x200007b8
 80074d0:	200007b4 	.word	0x200007b4
 80074d4:	200008c8 	.word	0x200008c8
 80074d8:	200008c4 	.word	0x200008c4

080074dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80074e2:	4b27      	ldr	r3, [pc, #156]	; (8007580 <vTaskSwitchContext+0xa4>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80074ea:	4b26      	ldr	r3, [pc, #152]	; (8007584 <vTaskSwitchContext+0xa8>)
 80074ec:	2201      	movs	r2, #1
 80074ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80074f0:	e03f      	b.n	8007572 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80074f2:	4b24      	ldr	r3, [pc, #144]	; (8007584 <vTaskSwitchContext+0xa8>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074f8:	4b23      	ldr	r3, [pc, #140]	; (8007588 <vTaskSwitchContext+0xac>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	fab3 f383 	clz	r3, r3
 8007504:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007506:	7afb      	ldrb	r3, [r7, #11]
 8007508:	f1c3 031f 	rsb	r3, r3, #31
 800750c:	617b      	str	r3, [r7, #20]
 800750e:	491f      	ldr	r1, [pc, #124]	; (800758c <vTaskSwitchContext+0xb0>)
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	4613      	mov	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	440b      	add	r3, r1
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10a      	bne.n	8007538 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	607b      	str	r3, [r7, #4]
}
 8007534:	bf00      	nop
 8007536:	e7fe      	b.n	8007536 <vTaskSwitchContext+0x5a>
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	4613      	mov	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	4a12      	ldr	r2, [pc, #72]	; (800758c <vTaskSwitchContext+0xb0>)
 8007544:	4413      	add	r3, r2
 8007546:	613b      	str	r3, [r7, #16]
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	605a      	str	r2, [r3, #4]
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	3308      	adds	r3, #8
 800755a:	429a      	cmp	r2, r3
 800755c:	d104      	bne.n	8007568 <vTaskSwitchContext+0x8c>
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	605a      	str	r2, [r3, #4]
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	4a08      	ldr	r2, [pc, #32]	; (8007590 <vTaskSwitchContext+0xb4>)
 8007570:	6013      	str	r3, [r2, #0]
}
 8007572:	bf00      	nop
 8007574:	371c      	adds	r7, #28
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	200008dc 	.word	0x200008dc
 8007584:	200008c8 	.word	0x200008c8
 8007588:	200008bc 	.word	0x200008bc
 800758c:	200007b8 	.word	0x200007b8
 8007590:	200007b4 	.word	0x200007b4

08007594 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10a      	bne.n	80075ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80075a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	60fb      	str	r3, [r7, #12]
}
 80075b6:	bf00      	nop
 80075b8:	e7fe      	b.n	80075b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075ba:	4b07      	ldr	r3, [pc, #28]	; (80075d8 <vTaskPlaceOnEventList+0x44>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3318      	adds	r3, #24
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff f890 	bl	80066e8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80075c8:	2101      	movs	r1, #1
 80075ca:	6838      	ldr	r0, [r7, #0]
 80075cc:	f000 fa66 	bl	8007a9c <prvAddCurrentTaskToDelayedList>
}
 80075d0:	bf00      	nop
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	200007b4 	.word	0x200007b4

080075dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10a      	bne.n	8007608 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	60fb      	str	r3, [r7, #12]
}
 8007604:	bf00      	nop
 8007606:	e7fe      	b.n	8007606 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	3318      	adds	r3, #24
 800760c:	4618      	mov	r0, r3
 800760e:	f7ff f8a4 	bl	800675a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007612:	4b1d      	ldr	r3, [pc, #116]	; (8007688 <xTaskRemoveFromEventList+0xac>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d11c      	bne.n	8007654 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	3304      	adds	r3, #4
 800761e:	4618      	mov	r0, r3
 8007620:	f7ff f89b 	bl	800675a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007628:	2201      	movs	r2, #1
 800762a:	409a      	lsls	r2, r3
 800762c:	4b17      	ldr	r3, [pc, #92]	; (800768c <xTaskRemoveFromEventList+0xb0>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4313      	orrs	r3, r2
 8007632:	4a16      	ldr	r2, [pc, #88]	; (800768c <xTaskRemoveFromEventList+0xb0>)
 8007634:	6013      	str	r3, [r2, #0]
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763a:	4613      	mov	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4a13      	ldr	r2, [pc, #76]	; (8007690 <xTaskRemoveFromEventList+0xb4>)
 8007644:	441a      	add	r2, r3
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	3304      	adds	r3, #4
 800764a:	4619      	mov	r1, r3
 800764c:	4610      	mov	r0, r2
 800764e:	f7ff f827 	bl	80066a0 <vListInsertEnd>
 8007652:	e005      	b.n	8007660 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	3318      	adds	r3, #24
 8007658:	4619      	mov	r1, r3
 800765a:	480e      	ldr	r0, [pc, #56]	; (8007694 <xTaskRemoveFromEventList+0xb8>)
 800765c:	f7ff f820 	bl	80066a0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007664:	4b0c      	ldr	r3, [pc, #48]	; (8007698 <xTaskRemoveFromEventList+0xbc>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766a:	429a      	cmp	r2, r3
 800766c:	d905      	bls.n	800767a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800766e:	2301      	movs	r3, #1
 8007670:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007672:	4b0a      	ldr	r3, [pc, #40]	; (800769c <xTaskRemoveFromEventList+0xc0>)
 8007674:	2201      	movs	r2, #1
 8007676:	601a      	str	r2, [r3, #0]
 8007678:	e001      	b.n	800767e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800767a:	2300      	movs	r3, #0
 800767c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800767e:	697b      	ldr	r3, [r7, #20]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3718      	adds	r7, #24
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	200008dc 	.word	0x200008dc
 800768c:	200008bc 	.word	0x200008bc
 8007690:	200007b8 	.word	0x200007b8
 8007694:	20000874 	.word	0x20000874
 8007698:	200007b4 	.word	0x200007b4
 800769c:	200008c8 	.word	0x200008c8

080076a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076a8:	4b06      	ldr	r3, [pc, #24]	; (80076c4 <vTaskInternalSetTimeOutState+0x24>)
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80076b0:	4b05      	ldr	r3, [pc, #20]	; (80076c8 <vTaskInternalSetTimeOutState+0x28>)
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	605a      	str	r2, [r3, #4]
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	200008cc 	.word	0x200008cc
 80076c8:	200008b8 	.word	0x200008b8

080076cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b088      	sub	sp, #32
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10a      	bne.n	80076f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	613b      	str	r3, [r7, #16]
}
 80076ee:	bf00      	nop
 80076f0:	e7fe      	b.n	80076f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10a      	bne.n	800770e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	60fb      	str	r3, [r7, #12]
}
 800770a:	bf00      	nop
 800770c:	e7fe      	b.n	800770c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800770e:	f000 fb59 	bl	8007dc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007712:	4b1d      	ldr	r3, [pc, #116]	; (8007788 <xTaskCheckForTimeOut+0xbc>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772a:	d102      	bne.n	8007732 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800772c:	2300      	movs	r3, #0
 800772e:	61fb      	str	r3, [r7, #28]
 8007730:	e023      	b.n	800777a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	4b15      	ldr	r3, [pc, #84]	; (800778c <xTaskCheckForTimeOut+0xc0>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	429a      	cmp	r2, r3
 800773c:	d007      	beq.n	800774e <xTaskCheckForTimeOut+0x82>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	69ba      	ldr	r2, [r7, #24]
 8007744:	429a      	cmp	r2, r3
 8007746:	d302      	bcc.n	800774e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007748:	2301      	movs	r3, #1
 800774a:	61fb      	str	r3, [r7, #28]
 800774c:	e015      	b.n	800777a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	429a      	cmp	r2, r3
 8007756:	d20b      	bcs.n	8007770 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	1ad2      	subs	r2, r2, r3
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f7ff ff9b 	bl	80076a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800776a:	2300      	movs	r3, #0
 800776c:	61fb      	str	r3, [r7, #28]
 800776e:	e004      	b.n	800777a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	2200      	movs	r2, #0
 8007774:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007776:	2301      	movs	r3, #1
 8007778:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800777a:	f000 fb53 	bl	8007e24 <vPortExitCritical>

	return xReturn;
 800777e:	69fb      	ldr	r3, [r7, #28]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3720      	adds	r7, #32
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	200008b8 	.word	0x200008b8
 800778c:	200008cc 	.word	0x200008cc

08007790 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007790:	b480      	push	{r7}
 8007792:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007794:	4b03      	ldr	r3, [pc, #12]	; (80077a4 <vTaskMissedYield+0x14>)
 8007796:	2201      	movs	r2, #1
 8007798:	601a      	str	r2, [r3, #0]
}
 800779a:	bf00      	nop
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	200008c8 	.word	0x200008c8

080077a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80077b0:	f000 f852 	bl	8007858 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80077b4:	4b06      	ldr	r3, [pc, #24]	; (80077d0 <prvIdleTask+0x28>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d9f9      	bls.n	80077b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80077bc:	4b05      	ldr	r3, [pc, #20]	; (80077d4 <prvIdleTask+0x2c>)
 80077be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80077cc:	e7f0      	b.n	80077b0 <prvIdleTask+0x8>
 80077ce:	bf00      	nop
 80077d0:	200007b8 	.word	0x200007b8
 80077d4:	e000ed04 	.word	0xe000ed04

080077d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077de:	2300      	movs	r3, #0
 80077e0:	607b      	str	r3, [r7, #4]
 80077e2:	e00c      	b.n	80077fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	4613      	mov	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4a12      	ldr	r2, [pc, #72]	; (8007838 <prvInitialiseTaskLists+0x60>)
 80077f0:	4413      	add	r3, r2
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fe ff27 	bl	8006646 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3301      	adds	r3, #1
 80077fc:	607b      	str	r3, [r7, #4]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b06      	cmp	r3, #6
 8007802:	d9ef      	bls.n	80077e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007804:	480d      	ldr	r0, [pc, #52]	; (800783c <prvInitialiseTaskLists+0x64>)
 8007806:	f7fe ff1e 	bl	8006646 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800780a:	480d      	ldr	r0, [pc, #52]	; (8007840 <prvInitialiseTaskLists+0x68>)
 800780c:	f7fe ff1b 	bl	8006646 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007810:	480c      	ldr	r0, [pc, #48]	; (8007844 <prvInitialiseTaskLists+0x6c>)
 8007812:	f7fe ff18 	bl	8006646 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007816:	480c      	ldr	r0, [pc, #48]	; (8007848 <prvInitialiseTaskLists+0x70>)
 8007818:	f7fe ff15 	bl	8006646 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800781c:	480b      	ldr	r0, [pc, #44]	; (800784c <prvInitialiseTaskLists+0x74>)
 800781e:	f7fe ff12 	bl	8006646 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007822:	4b0b      	ldr	r3, [pc, #44]	; (8007850 <prvInitialiseTaskLists+0x78>)
 8007824:	4a05      	ldr	r2, [pc, #20]	; (800783c <prvInitialiseTaskLists+0x64>)
 8007826:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007828:	4b0a      	ldr	r3, [pc, #40]	; (8007854 <prvInitialiseTaskLists+0x7c>)
 800782a:	4a05      	ldr	r2, [pc, #20]	; (8007840 <prvInitialiseTaskLists+0x68>)
 800782c:	601a      	str	r2, [r3, #0]
}
 800782e:	bf00      	nop
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	200007b8 	.word	0x200007b8
 800783c:	20000844 	.word	0x20000844
 8007840:	20000858 	.word	0x20000858
 8007844:	20000874 	.word	0x20000874
 8007848:	20000888 	.word	0x20000888
 800784c:	200008a0 	.word	0x200008a0
 8007850:	2000086c 	.word	0x2000086c
 8007854:	20000870 	.word	0x20000870

08007858 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800785e:	e019      	b.n	8007894 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007860:	f000 fab0 	bl	8007dc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007864:	4b10      	ldr	r3, [pc, #64]	; (80078a8 <prvCheckTasksWaitingTermination+0x50>)
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3304      	adds	r3, #4
 8007870:	4618      	mov	r0, r3
 8007872:	f7fe ff72 	bl	800675a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007876:	4b0d      	ldr	r3, [pc, #52]	; (80078ac <prvCheckTasksWaitingTermination+0x54>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3b01      	subs	r3, #1
 800787c:	4a0b      	ldr	r2, [pc, #44]	; (80078ac <prvCheckTasksWaitingTermination+0x54>)
 800787e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007880:	4b0b      	ldr	r3, [pc, #44]	; (80078b0 <prvCheckTasksWaitingTermination+0x58>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3b01      	subs	r3, #1
 8007886:	4a0a      	ldr	r2, [pc, #40]	; (80078b0 <prvCheckTasksWaitingTermination+0x58>)
 8007888:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800788a:	f000 facb 	bl	8007e24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f810 	bl	80078b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007894:	4b06      	ldr	r3, [pc, #24]	; (80078b0 <prvCheckTasksWaitingTermination+0x58>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1e1      	bne.n	8007860 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800789c:	bf00      	nop
 800789e:	bf00      	nop
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20000888 	.word	0x20000888
 80078ac:	200008b4 	.word	0x200008b4
 80078b0:	2000089c 	.word	0x2000089c

080078b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d108      	bne.n	80078d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 fc28 	bl	8008120 <vPortFree>
				vPortFree( pxTCB );
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fc25 	bl	8008120 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80078d6:	e018      	b.n	800790a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d103      	bne.n	80078ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fc1c 	bl	8008120 <vPortFree>
	}
 80078e8:	e00f      	b.n	800790a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d00a      	beq.n	800790a <prvDeleteTCB+0x56>
	__asm volatile
 80078f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	60fb      	str	r3, [r7, #12]
}
 8007906:	bf00      	nop
 8007908:	e7fe      	b.n	8007908 <prvDeleteTCB+0x54>
	}
 800790a:	bf00      	nop
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
	...

08007914 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800791a:	4b0c      	ldr	r3, [pc, #48]	; (800794c <prvResetNextTaskUnblockTime+0x38>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d104      	bne.n	800792e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007924:	4b0a      	ldr	r3, [pc, #40]	; (8007950 <prvResetNextTaskUnblockTime+0x3c>)
 8007926:	f04f 32ff 	mov.w	r2, #4294967295
 800792a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800792c:	e008      	b.n	8007940 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800792e:	4b07      	ldr	r3, [pc, #28]	; (800794c <prvResetNextTaskUnblockTime+0x38>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	4a04      	ldr	r2, [pc, #16]	; (8007950 <prvResetNextTaskUnblockTime+0x3c>)
 800793e:	6013      	str	r3, [r2, #0]
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	2000086c 	.word	0x2000086c
 8007950:	200008d4 	.word	0x200008d4

08007954 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800795a:	4b0b      	ldr	r3, [pc, #44]	; (8007988 <xTaskGetSchedulerState+0x34>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d102      	bne.n	8007968 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007962:	2301      	movs	r3, #1
 8007964:	607b      	str	r3, [r7, #4]
 8007966:	e008      	b.n	800797a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007968:	4b08      	ldr	r3, [pc, #32]	; (800798c <xTaskGetSchedulerState+0x38>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d102      	bne.n	8007976 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007970:	2302      	movs	r3, #2
 8007972:	607b      	str	r3, [r7, #4]
 8007974:	e001      	b.n	800797a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007976:	2300      	movs	r3, #0
 8007978:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800797a:	687b      	ldr	r3, [r7, #4]
	}
 800797c:	4618      	mov	r0, r3
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	200008c0 	.word	0x200008c0
 800798c:	200008dc 	.word	0x200008dc

08007990 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800799c:	2300      	movs	r3, #0
 800799e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d06e      	beq.n	8007a84 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079a6:	4b3a      	ldr	r3, [pc, #232]	; (8007a90 <xTaskPriorityDisinherit+0x100>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d00a      	beq.n	80079c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	60fb      	str	r3, [r7, #12]
}
 80079c2:	bf00      	nop
 80079c4:	e7fe      	b.n	80079c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10a      	bne.n	80079e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	60bb      	str	r3, [r7, #8]
}
 80079e0:	bf00      	nop
 80079e2:	e7fe      	b.n	80079e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079e8:	1e5a      	subs	r2, r3, #1
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d044      	beq.n	8007a84 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d140      	bne.n	8007a84 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	3304      	adds	r3, #4
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fe fea7 	bl	800675a <uxListRemove>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d115      	bne.n	8007a3e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a16:	491f      	ldr	r1, [pc, #124]	; (8007a94 <xTaskPriorityDisinherit+0x104>)
 8007a18:	4613      	mov	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	440b      	add	r3, r1
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10a      	bne.n	8007a3e <xTaskPriorityDisinherit+0xae>
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a32:	43da      	mvns	r2, r3
 8007a34:	4b18      	ldr	r3, [pc, #96]	; (8007a98 <xTaskPriorityDisinherit+0x108>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4013      	ands	r3, r2
 8007a3a:	4a17      	ldr	r2, [pc, #92]	; (8007a98 <xTaskPriorityDisinherit+0x108>)
 8007a3c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	f1c3 0207 	rsb	r2, r3, #7
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a56:	2201      	movs	r2, #1
 8007a58:	409a      	lsls	r2, r3
 8007a5a:	4b0f      	ldr	r3, [pc, #60]	; (8007a98 <xTaskPriorityDisinherit+0x108>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	4a0d      	ldr	r2, [pc, #52]	; (8007a98 <xTaskPriorityDisinherit+0x108>)
 8007a62:	6013      	str	r3, [r2, #0]
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a68:	4613      	mov	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4a08      	ldr	r2, [pc, #32]	; (8007a94 <xTaskPriorityDisinherit+0x104>)
 8007a72:	441a      	add	r2, r3
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	3304      	adds	r3, #4
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	f7fe fe10 	bl	80066a0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a80:	2301      	movs	r3, #1
 8007a82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a84:	697b      	ldr	r3, [r7, #20]
	}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	200007b4 	.word	0x200007b4
 8007a94:	200007b8 	.word	0x200007b8
 8007a98:	200008bc 	.word	0x200008bc

08007a9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007aa6:	4b29      	ldr	r3, [pc, #164]	; (8007b4c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007aac:	4b28      	ldr	r3, [pc, #160]	; (8007b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7fe fe51 	bl	800675a <uxListRemove>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10b      	bne.n	8007ad6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007abe:	4b24      	ldr	r3, [pc, #144]	; (8007b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aca:	43da      	mvns	r2, r3
 8007acc:	4b21      	ldr	r3, [pc, #132]	; (8007b54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	4a20      	ldr	r2, [pc, #128]	; (8007b54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ad4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007adc:	d10a      	bne.n	8007af4 <prvAddCurrentTaskToDelayedList+0x58>
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d007      	beq.n	8007af4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ae4:	4b1a      	ldr	r3, [pc, #104]	; (8007b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	4619      	mov	r1, r3
 8007aec:	481a      	ldr	r0, [pc, #104]	; (8007b58 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007aee:	f7fe fdd7 	bl	80066a0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007af2:	e026      	b.n	8007b42 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4413      	add	r3, r2
 8007afa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007afc:	4b14      	ldr	r3, [pc, #80]	; (8007b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d209      	bcs.n	8007b20 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b0c:	4b13      	ldr	r3, [pc, #76]	; (8007b5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	4b0f      	ldr	r3, [pc, #60]	; (8007b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3304      	adds	r3, #4
 8007b16:	4619      	mov	r1, r3
 8007b18:	4610      	mov	r0, r2
 8007b1a:	f7fe fde5 	bl	80066e8 <vListInsert>
}
 8007b1e:	e010      	b.n	8007b42 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b20:	4b0f      	ldr	r3, [pc, #60]	; (8007b60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	4b0a      	ldr	r3, [pc, #40]	; (8007b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3304      	adds	r3, #4
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	f7fe fddb 	bl	80066e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b32:	4b0c      	ldr	r3, [pc, #48]	; (8007b64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d202      	bcs.n	8007b42 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007b3c:	4a09      	ldr	r2, [pc, #36]	; (8007b64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	6013      	str	r3, [r2, #0]
}
 8007b42:	bf00      	nop
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	200008b8 	.word	0x200008b8
 8007b50:	200007b4 	.word	0x200007b4
 8007b54:	200008bc 	.word	0x200008bc
 8007b58:	200008a0 	.word	0x200008a0
 8007b5c:	20000870 	.word	0x20000870
 8007b60:	2000086c 	.word	0x2000086c
 8007b64:	200008d4 	.word	0x200008d4

08007b68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	3b04      	subs	r3, #4
 8007b78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3b04      	subs	r3, #4
 8007b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	f023 0201 	bic.w	r2, r3, #1
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	3b04      	subs	r3, #4
 8007b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b98:	4a0c      	ldr	r2, [pc, #48]	; (8007bcc <pxPortInitialiseStack+0x64>)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3b14      	subs	r3, #20
 8007ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3b04      	subs	r3, #4
 8007bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f06f 0202 	mvn.w	r2, #2
 8007bb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	3b20      	subs	r3, #32
 8007bbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	08007bd1 	.word	0x08007bd1

08007bd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007bda:	4b12      	ldr	r3, [pc, #72]	; (8007c24 <prvTaskExitError+0x54>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be2:	d00a      	beq.n	8007bfa <prvTaskExitError+0x2a>
	__asm volatile
 8007be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	60fb      	str	r3, [r7, #12]
}
 8007bf6:	bf00      	nop
 8007bf8:	e7fe      	b.n	8007bf8 <prvTaskExitError+0x28>
	__asm volatile
 8007bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfe:	f383 8811 	msr	BASEPRI, r3
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	60bb      	str	r3, [r7, #8]
}
 8007c0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c0e:	bf00      	nop
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d0fc      	beq.n	8007c10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c16:	bf00      	nop
 8007c18:	bf00      	nop
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr
 8007c24:	20000014 	.word	0x20000014
	...

08007c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c30:	4b07      	ldr	r3, [pc, #28]	; (8007c50 <pxCurrentTCBConst2>)
 8007c32:	6819      	ldr	r1, [r3, #0]
 8007c34:	6808      	ldr	r0, [r1, #0]
 8007c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3a:	f380 8809 	msr	PSP, r0
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f04f 0000 	mov.w	r0, #0
 8007c46:	f380 8811 	msr	BASEPRI, r0
 8007c4a:	4770      	bx	lr
 8007c4c:	f3af 8000 	nop.w

08007c50 <pxCurrentTCBConst2>:
 8007c50:	200007b4 	.word	0x200007b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop

08007c58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c58:	4808      	ldr	r0, [pc, #32]	; (8007c7c <prvPortStartFirstTask+0x24>)
 8007c5a:	6800      	ldr	r0, [r0, #0]
 8007c5c:	6800      	ldr	r0, [r0, #0]
 8007c5e:	f380 8808 	msr	MSP, r0
 8007c62:	f04f 0000 	mov.w	r0, #0
 8007c66:	f380 8814 	msr	CONTROL, r0
 8007c6a:	b662      	cpsie	i
 8007c6c:	b661      	cpsie	f
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	df00      	svc	0
 8007c78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c7a:	bf00      	nop
 8007c7c:	e000ed08 	.word	0xe000ed08

08007c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c86:	4b46      	ldr	r3, [pc, #280]	; (8007da0 <xPortStartScheduler+0x120>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a46      	ldr	r2, [pc, #280]	; (8007da4 <xPortStartScheduler+0x124>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d10a      	bne.n	8007ca6 <xPortStartScheduler+0x26>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	613b      	str	r3, [r7, #16]
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ca6:	4b3e      	ldr	r3, [pc, #248]	; (8007da0 <xPortStartScheduler+0x120>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a3f      	ldr	r2, [pc, #252]	; (8007da8 <xPortStartScheduler+0x128>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d10a      	bne.n	8007cc6 <xPortStartScheduler+0x46>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	60fb      	str	r3, [r7, #12]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007cc6:	4b39      	ldr	r3, [pc, #228]	; (8007dac <xPortStartScheduler+0x12c>)
 8007cc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	22ff      	movs	r2, #255	; 0xff
 8007cd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	4b31      	ldr	r3, [pc, #196]	; (8007db0 <xPortStartScheduler+0x130>)
 8007cec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cee:	4b31      	ldr	r3, [pc, #196]	; (8007db4 <xPortStartScheduler+0x134>)
 8007cf0:	2207      	movs	r2, #7
 8007cf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cf4:	e009      	b.n	8007d0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007cf6:	4b2f      	ldr	r3, [pc, #188]	; (8007db4 <xPortStartScheduler+0x134>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	4a2d      	ldr	r2, [pc, #180]	; (8007db4 <xPortStartScheduler+0x134>)
 8007cfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d00:	78fb      	ldrb	r3, [r7, #3]
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	005b      	lsls	r3, r3, #1
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d0a:	78fb      	ldrb	r3, [r7, #3]
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d12:	2b80      	cmp	r3, #128	; 0x80
 8007d14:	d0ef      	beq.n	8007cf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d16:	4b27      	ldr	r3, [pc, #156]	; (8007db4 <xPortStartScheduler+0x134>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f1c3 0307 	rsb	r3, r3, #7
 8007d1e:	2b04      	cmp	r3, #4
 8007d20:	d00a      	beq.n	8007d38 <xPortStartScheduler+0xb8>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	60bb      	str	r3, [r7, #8]
}
 8007d34:	bf00      	nop
 8007d36:	e7fe      	b.n	8007d36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d38:	4b1e      	ldr	r3, [pc, #120]	; (8007db4 <xPortStartScheduler+0x134>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	021b      	lsls	r3, r3, #8
 8007d3e:	4a1d      	ldr	r2, [pc, #116]	; (8007db4 <xPortStartScheduler+0x134>)
 8007d40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d42:	4b1c      	ldr	r3, [pc, #112]	; (8007db4 <xPortStartScheduler+0x134>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d4a:	4a1a      	ldr	r2, [pc, #104]	; (8007db4 <xPortStartScheduler+0x134>)
 8007d4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d56:	4b18      	ldr	r3, [pc, #96]	; (8007db8 <xPortStartScheduler+0x138>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a17      	ldr	r2, [pc, #92]	; (8007db8 <xPortStartScheduler+0x138>)
 8007d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d62:	4b15      	ldr	r3, [pc, #84]	; (8007db8 <xPortStartScheduler+0x138>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a14      	ldr	r2, [pc, #80]	; (8007db8 <xPortStartScheduler+0x138>)
 8007d68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d6e:	f000 f8dd 	bl	8007f2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d72:	4b12      	ldr	r3, [pc, #72]	; (8007dbc <xPortStartScheduler+0x13c>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d78:	f000 f8fc 	bl	8007f74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d7c:	4b10      	ldr	r3, [pc, #64]	; (8007dc0 <xPortStartScheduler+0x140>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a0f      	ldr	r2, [pc, #60]	; (8007dc0 <xPortStartScheduler+0x140>)
 8007d82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d88:	f7ff ff66 	bl	8007c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d8c:	f7ff fba6 	bl	80074dc <vTaskSwitchContext>
	prvTaskExitError();
 8007d90:	f7ff ff1e 	bl	8007bd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	e000ed00 	.word	0xe000ed00
 8007da4:	410fc271 	.word	0x410fc271
 8007da8:	410fc270 	.word	0x410fc270
 8007dac:	e000e400 	.word	0xe000e400
 8007db0:	200008e0 	.word	0x200008e0
 8007db4:	200008e4 	.word	0x200008e4
 8007db8:	e000ed20 	.word	0xe000ed20
 8007dbc:	20000014 	.word	0x20000014
 8007dc0:	e000ef34 	.word	0xe000ef34

08007dc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	607b      	str	r3, [r7, #4]
}
 8007ddc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007dde:	4b0f      	ldr	r3, [pc, #60]	; (8007e1c <vPortEnterCritical+0x58>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3301      	adds	r3, #1
 8007de4:	4a0d      	ldr	r2, [pc, #52]	; (8007e1c <vPortEnterCritical+0x58>)
 8007de6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007de8:	4b0c      	ldr	r3, [pc, #48]	; (8007e1c <vPortEnterCritical+0x58>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d10f      	bne.n	8007e10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007df0:	4b0b      	ldr	r3, [pc, #44]	; (8007e20 <vPortEnterCritical+0x5c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <vPortEnterCritical+0x4c>
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	603b      	str	r3, [r7, #0]
}
 8007e0c:	bf00      	nop
 8007e0e:	e7fe      	b.n	8007e0e <vPortEnterCritical+0x4a>
	}
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	20000014 	.word	0x20000014
 8007e20:	e000ed04 	.word	0xe000ed04

08007e24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e2a:	4b12      	ldr	r3, [pc, #72]	; (8007e74 <vPortExitCritical+0x50>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10a      	bne.n	8007e48 <vPortExitCritical+0x24>
	__asm volatile
 8007e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	607b      	str	r3, [r7, #4]
}
 8007e44:	bf00      	nop
 8007e46:	e7fe      	b.n	8007e46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e48:	4b0a      	ldr	r3, [pc, #40]	; (8007e74 <vPortExitCritical+0x50>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	4a09      	ldr	r2, [pc, #36]	; (8007e74 <vPortExitCritical+0x50>)
 8007e50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e52:	4b08      	ldr	r3, [pc, #32]	; (8007e74 <vPortExitCritical+0x50>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d105      	bne.n	8007e66 <vPortExitCritical+0x42>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e66:	bf00      	nop
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	20000014 	.word	0x20000014
	...

08007e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e80:	f3ef 8009 	mrs	r0, PSP
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	4b15      	ldr	r3, [pc, #84]	; (8007ee0 <pxCurrentTCBConst>)
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	f01e 0f10 	tst.w	lr, #16
 8007e90:	bf08      	it	eq
 8007e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9a:	6010      	str	r0, [r2, #0]
 8007e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ea4:	f380 8811 	msr	BASEPRI, r0
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f7ff fb14 	bl	80074dc <vTaskSwitchContext>
 8007eb4:	f04f 0000 	mov.w	r0, #0
 8007eb8:	f380 8811 	msr	BASEPRI, r0
 8007ebc:	bc09      	pop	{r0, r3}
 8007ebe:	6819      	ldr	r1, [r3, #0]
 8007ec0:	6808      	ldr	r0, [r1, #0]
 8007ec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec6:	f01e 0f10 	tst.w	lr, #16
 8007eca:	bf08      	it	eq
 8007ecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ed0:	f380 8809 	msr	PSP, r0
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	f3af 8000 	nop.w

08007ee0 <pxCurrentTCBConst>:
 8007ee0:	200007b4 	.word	0x200007b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ee4:	bf00      	nop
 8007ee6:	bf00      	nop

08007ee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	607b      	str	r3, [r7, #4]
}
 8007f00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f02:	f7ff fa33 	bl	800736c <xTaskIncrementTick>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d003      	beq.n	8007f14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f0c:	4b06      	ldr	r3, [pc, #24]	; (8007f28 <SysTick_Handler+0x40>)
 8007f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	2300      	movs	r3, #0
 8007f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	f383 8811 	msr	BASEPRI, r3
}
 8007f1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f20:	bf00      	nop
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	e000ed04 	.word	0xe000ed04

08007f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f30:	4b0b      	ldr	r3, [pc, #44]	; (8007f60 <vPortSetupTimerInterrupt+0x34>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f36:	4b0b      	ldr	r3, [pc, #44]	; (8007f64 <vPortSetupTimerInterrupt+0x38>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f3c:	4b0a      	ldr	r3, [pc, #40]	; (8007f68 <vPortSetupTimerInterrupt+0x3c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a0a      	ldr	r2, [pc, #40]	; (8007f6c <vPortSetupTimerInterrupt+0x40>)
 8007f42:	fba2 2303 	umull	r2, r3, r2, r3
 8007f46:	099b      	lsrs	r3, r3, #6
 8007f48:	4a09      	ldr	r2, [pc, #36]	; (8007f70 <vPortSetupTimerInterrupt+0x44>)
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f4e:	4b04      	ldr	r3, [pc, #16]	; (8007f60 <vPortSetupTimerInterrupt+0x34>)
 8007f50:	2207      	movs	r2, #7
 8007f52:	601a      	str	r2, [r3, #0]
}
 8007f54:	bf00      	nop
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	e000e010 	.word	0xe000e010
 8007f64:	e000e018 	.word	0xe000e018
 8007f68:	20000008 	.word	0x20000008
 8007f6c:	10624dd3 	.word	0x10624dd3
 8007f70:	e000e014 	.word	0xe000e014

08007f74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f84 <vPortEnableVFP+0x10>
 8007f78:	6801      	ldr	r1, [r0, #0]
 8007f7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f7e:	6001      	str	r1, [r0, #0]
 8007f80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f82:	bf00      	nop
 8007f84:	e000ed88 	.word	0xe000ed88

08007f88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b08a      	sub	sp, #40	; 0x28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f90:	2300      	movs	r3, #0
 8007f92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f94:	f7ff f940 	bl	8007218 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f98:	4b5b      	ldr	r3, [pc, #364]	; (8008108 <pvPortMalloc+0x180>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fa0:	f000 f920 	bl	80081e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fa4:	4b59      	ldr	r3, [pc, #356]	; (800810c <pvPortMalloc+0x184>)
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4013      	ands	r3, r2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f040 8093 	bne.w	80080d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d01d      	beq.n	8007ff4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007fb8:	2208      	movs	r2, #8
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f003 0307 	and.w	r3, r3, #7
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d014      	beq.n	8007ff4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f023 0307 	bic.w	r3, r3, #7
 8007fd0:	3308      	adds	r3, #8
 8007fd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f003 0307 	and.w	r3, r3, #7
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00a      	beq.n	8007ff4 <pvPortMalloc+0x6c>
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	617b      	str	r3, [r7, #20]
}
 8007ff0:	bf00      	nop
 8007ff2:	e7fe      	b.n	8007ff2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d06e      	beq.n	80080d8 <pvPortMalloc+0x150>
 8007ffa:	4b45      	ldr	r3, [pc, #276]	; (8008110 <pvPortMalloc+0x188>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	429a      	cmp	r2, r3
 8008002:	d869      	bhi.n	80080d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008004:	4b43      	ldr	r3, [pc, #268]	; (8008114 <pvPortMalloc+0x18c>)
 8008006:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008008:	4b42      	ldr	r3, [pc, #264]	; (8008114 <pvPortMalloc+0x18c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800800e:	e004      	b.n	800801a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	429a      	cmp	r2, r3
 8008022:	d903      	bls.n	800802c <pvPortMalloc+0xa4>
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1f1      	bne.n	8008010 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800802c:	4b36      	ldr	r3, [pc, #216]	; (8008108 <pvPortMalloc+0x180>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008032:	429a      	cmp	r2, r3
 8008034:	d050      	beq.n	80080d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2208      	movs	r2, #8
 800803c:	4413      	add	r3, r2
 800803e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	6a3b      	ldr	r3, [r7, #32]
 8008046:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	1ad2      	subs	r2, r2, r3
 8008050:	2308      	movs	r3, #8
 8008052:	005b      	lsls	r3, r3, #1
 8008054:	429a      	cmp	r2, r3
 8008056:	d91f      	bls.n	8008098 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4413      	add	r3, r2
 800805e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	f003 0307 	and.w	r3, r3, #7
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00a      	beq.n	8008080 <pvPortMalloc+0xf8>
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	613b      	str	r3, [r7, #16]
}
 800807c:	bf00      	nop
 800807e:	e7fe      	b.n	800807e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	1ad2      	subs	r2, r2, r3
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008092:	69b8      	ldr	r0, [r7, #24]
 8008094:	f000 f908 	bl	80082a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008098:	4b1d      	ldr	r3, [pc, #116]	; (8008110 <pvPortMalloc+0x188>)
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	4a1b      	ldr	r2, [pc, #108]	; (8008110 <pvPortMalloc+0x188>)
 80080a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080a6:	4b1a      	ldr	r3, [pc, #104]	; (8008110 <pvPortMalloc+0x188>)
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	4b1b      	ldr	r3, [pc, #108]	; (8008118 <pvPortMalloc+0x190>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d203      	bcs.n	80080ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080b2:	4b17      	ldr	r3, [pc, #92]	; (8008110 <pvPortMalloc+0x188>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a18      	ldr	r2, [pc, #96]	; (8008118 <pvPortMalloc+0x190>)
 80080b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	4b13      	ldr	r3, [pc, #76]	; (800810c <pvPortMalloc+0x184>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	431a      	orrs	r2, r3
 80080c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	2200      	movs	r2, #0
 80080cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80080ce:	4b13      	ldr	r3, [pc, #76]	; (800811c <pvPortMalloc+0x194>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3301      	adds	r3, #1
 80080d4:	4a11      	ldr	r2, [pc, #68]	; (800811c <pvPortMalloc+0x194>)
 80080d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080d8:	f7ff f8ac 	bl	8007234 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	f003 0307 	and.w	r3, r3, #7
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00a      	beq.n	80080fc <pvPortMalloc+0x174>
	__asm volatile
 80080e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ea:	f383 8811 	msr	BASEPRI, r3
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	60fb      	str	r3, [r7, #12]
}
 80080f8:	bf00      	nop
 80080fa:	e7fe      	b.n	80080fa <pvPortMalloc+0x172>
	return pvReturn;
 80080fc:	69fb      	ldr	r3, [r7, #28]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3728      	adds	r7, #40	; 0x28
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	200044f0 	.word	0x200044f0
 800810c:	20004504 	.word	0x20004504
 8008110:	200044f4 	.word	0x200044f4
 8008114:	200044e8 	.word	0x200044e8
 8008118:	200044f8 	.word	0x200044f8
 800811c:	200044fc 	.word	0x200044fc

08008120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d04d      	beq.n	80081ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008132:	2308      	movs	r3, #8
 8008134:	425b      	negs	r3, r3
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	4413      	add	r3, r2
 800813a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	685a      	ldr	r2, [r3, #4]
 8008144:	4b24      	ldr	r3, [pc, #144]	; (80081d8 <vPortFree+0xb8>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4013      	ands	r3, r2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10a      	bne.n	8008164 <vPortFree+0x44>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	60fb      	str	r3, [r7, #12]
}
 8008160:	bf00      	nop
 8008162:	e7fe      	b.n	8008162 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00a      	beq.n	8008182 <vPortFree+0x62>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	60bb      	str	r3, [r7, #8]
}
 800817e:	bf00      	nop
 8008180:	e7fe      	b.n	8008180 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	4b14      	ldr	r3, [pc, #80]	; (80081d8 <vPortFree+0xb8>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4013      	ands	r3, r2
 800818c:	2b00      	cmp	r3, #0
 800818e:	d01e      	beq.n	80081ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d11a      	bne.n	80081ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	4b0e      	ldr	r3, [pc, #56]	; (80081d8 <vPortFree+0xb8>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	43db      	mvns	r3, r3
 80081a2:	401a      	ands	r2, r3
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081a8:	f7ff f836 	bl	8007218 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	685a      	ldr	r2, [r3, #4]
 80081b0:	4b0a      	ldr	r3, [pc, #40]	; (80081dc <vPortFree+0xbc>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4413      	add	r3, r2
 80081b6:	4a09      	ldr	r2, [pc, #36]	; (80081dc <vPortFree+0xbc>)
 80081b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081ba:	6938      	ldr	r0, [r7, #16]
 80081bc:	f000 f874 	bl	80082a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80081c0:	4b07      	ldr	r3, [pc, #28]	; (80081e0 <vPortFree+0xc0>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	3301      	adds	r3, #1
 80081c6:	4a06      	ldr	r2, [pc, #24]	; (80081e0 <vPortFree+0xc0>)
 80081c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80081ca:	f7ff f833 	bl	8007234 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081ce:	bf00      	nop
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	20004504 	.word	0x20004504
 80081dc:	200044f4 	.word	0x200044f4
 80081e0:	20004500 	.word	0x20004500

080081e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80081ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081f0:	4b27      	ldr	r3, [pc, #156]	; (8008290 <prvHeapInit+0xac>)
 80081f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f003 0307 	and.w	r3, r3, #7
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00c      	beq.n	8008218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3307      	adds	r3, #7
 8008202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f023 0307 	bic.w	r3, r3, #7
 800820a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	4a1f      	ldr	r2, [pc, #124]	; (8008290 <prvHeapInit+0xac>)
 8008214:	4413      	add	r3, r2
 8008216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800821c:	4a1d      	ldr	r2, [pc, #116]	; (8008294 <prvHeapInit+0xb0>)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008222:	4b1c      	ldr	r3, [pc, #112]	; (8008294 <prvHeapInit+0xb0>)
 8008224:	2200      	movs	r2, #0
 8008226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	4413      	add	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008230:	2208      	movs	r2, #8
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	1a9b      	subs	r3, r3, r2
 8008236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f023 0307 	bic.w	r3, r3, #7
 800823e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4a15      	ldr	r2, [pc, #84]	; (8008298 <prvHeapInit+0xb4>)
 8008244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008246:	4b14      	ldr	r3, [pc, #80]	; (8008298 <prvHeapInit+0xb4>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2200      	movs	r2, #0
 800824c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800824e:	4b12      	ldr	r3, [pc, #72]	; (8008298 <prvHeapInit+0xb4>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2200      	movs	r2, #0
 8008254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	1ad2      	subs	r2, r2, r3
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008264:	4b0c      	ldr	r3, [pc, #48]	; (8008298 <prvHeapInit+0xb4>)
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	4a0a      	ldr	r2, [pc, #40]	; (800829c <prvHeapInit+0xb8>)
 8008272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	4a09      	ldr	r2, [pc, #36]	; (80082a0 <prvHeapInit+0xbc>)
 800827a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800827c:	4b09      	ldr	r3, [pc, #36]	; (80082a4 <prvHeapInit+0xc0>)
 800827e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008282:	601a      	str	r2, [r3, #0]
}
 8008284:	bf00      	nop
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	200008e8 	.word	0x200008e8
 8008294:	200044e8 	.word	0x200044e8
 8008298:	200044f0 	.word	0x200044f0
 800829c:	200044f8 	.word	0x200044f8
 80082a0:	200044f4 	.word	0x200044f4
 80082a4:	20004504 	.word	0x20004504

080082a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082b0:	4b28      	ldr	r3, [pc, #160]	; (8008354 <prvInsertBlockIntoFreeList+0xac>)
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	e002      	b.n	80082bc <prvInsertBlockIntoFreeList+0x14>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d8f7      	bhi.n	80082b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	4413      	add	r3, r2
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d108      	bne.n	80082ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	441a      	add	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	441a      	add	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d118      	bne.n	8008330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	4b15      	ldr	r3, [pc, #84]	; (8008358 <prvInsertBlockIntoFreeList+0xb0>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	429a      	cmp	r2, r3
 8008308:	d00d      	beq.n	8008326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685a      	ldr	r2, [r3, #4]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	441a      	add	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	e008      	b.n	8008338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008326:	4b0c      	ldr	r3, [pc, #48]	; (8008358 <prvInsertBlockIntoFreeList+0xb0>)
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	601a      	str	r2, [r3, #0]
 800832e:	e003      	b.n	8008338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	429a      	cmp	r2, r3
 800833e:	d002      	beq.n	8008346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008346:	bf00      	nop
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	200044e8 	.word	0x200044e8
 8008358:	200044f0 	.word	0x200044f0

0800835c <srand>:
 800835c:	b538      	push	{r3, r4, r5, lr}
 800835e:	4b10      	ldr	r3, [pc, #64]	; (80083a0 <srand+0x44>)
 8008360:	681d      	ldr	r5, [r3, #0]
 8008362:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008364:	4604      	mov	r4, r0
 8008366:	b9b3      	cbnz	r3, 8008396 <srand+0x3a>
 8008368:	2018      	movs	r0, #24
 800836a:	f001 fd77 	bl	8009e5c <malloc>
 800836e:	4602      	mov	r2, r0
 8008370:	6328      	str	r0, [r5, #48]	; 0x30
 8008372:	b920      	cbnz	r0, 800837e <srand+0x22>
 8008374:	4b0b      	ldr	r3, [pc, #44]	; (80083a4 <srand+0x48>)
 8008376:	480c      	ldr	r0, [pc, #48]	; (80083a8 <srand+0x4c>)
 8008378:	2146      	movs	r1, #70	; 0x46
 800837a:	f000 fe89 	bl	8009090 <__assert_func>
 800837e:	490b      	ldr	r1, [pc, #44]	; (80083ac <srand+0x50>)
 8008380:	4b0b      	ldr	r3, [pc, #44]	; (80083b0 <srand+0x54>)
 8008382:	e9c0 1300 	strd	r1, r3, [r0]
 8008386:	4b0b      	ldr	r3, [pc, #44]	; (80083b4 <srand+0x58>)
 8008388:	6083      	str	r3, [r0, #8]
 800838a:	230b      	movs	r3, #11
 800838c:	8183      	strh	r3, [r0, #12]
 800838e:	2100      	movs	r1, #0
 8008390:	2001      	movs	r0, #1
 8008392:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008396:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008398:	2200      	movs	r2, #0
 800839a:	611c      	str	r4, [r3, #16]
 800839c:	615a      	str	r2, [r3, #20]
 800839e:	bd38      	pop	{r3, r4, r5, pc}
 80083a0:	20000070 	.word	0x20000070
 80083a4:	0800d3f0 	.word	0x0800d3f0
 80083a8:	0800d407 	.word	0x0800d407
 80083ac:	abcd330e 	.word	0xabcd330e
 80083b0:	e66d1234 	.word	0xe66d1234
 80083b4:	0005deec 	.word	0x0005deec

080083b8 <rand>:
 80083b8:	4b16      	ldr	r3, [pc, #88]	; (8008414 <rand+0x5c>)
 80083ba:	b510      	push	{r4, lr}
 80083bc:	681c      	ldr	r4, [r3, #0]
 80083be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80083c0:	b9b3      	cbnz	r3, 80083f0 <rand+0x38>
 80083c2:	2018      	movs	r0, #24
 80083c4:	f001 fd4a 	bl	8009e5c <malloc>
 80083c8:	4602      	mov	r2, r0
 80083ca:	6320      	str	r0, [r4, #48]	; 0x30
 80083cc:	b920      	cbnz	r0, 80083d8 <rand+0x20>
 80083ce:	4b12      	ldr	r3, [pc, #72]	; (8008418 <rand+0x60>)
 80083d0:	4812      	ldr	r0, [pc, #72]	; (800841c <rand+0x64>)
 80083d2:	2152      	movs	r1, #82	; 0x52
 80083d4:	f000 fe5c 	bl	8009090 <__assert_func>
 80083d8:	4911      	ldr	r1, [pc, #68]	; (8008420 <rand+0x68>)
 80083da:	4b12      	ldr	r3, [pc, #72]	; (8008424 <rand+0x6c>)
 80083dc:	e9c0 1300 	strd	r1, r3, [r0]
 80083e0:	4b11      	ldr	r3, [pc, #68]	; (8008428 <rand+0x70>)
 80083e2:	6083      	str	r3, [r0, #8]
 80083e4:	230b      	movs	r3, #11
 80083e6:	8183      	strh	r3, [r0, #12]
 80083e8:	2100      	movs	r1, #0
 80083ea:	2001      	movs	r0, #1
 80083ec:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80083f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80083f2:	480e      	ldr	r0, [pc, #56]	; (800842c <rand+0x74>)
 80083f4:	690b      	ldr	r3, [r1, #16]
 80083f6:	694c      	ldr	r4, [r1, #20]
 80083f8:	4a0d      	ldr	r2, [pc, #52]	; (8008430 <rand+0x78>)
 80083fa:	4358      	muls	r0, r3
 80083fc:	fb02 0004 	mla	r0, r2, r4, r0
 8008400:	fba3 3202 	umull	r3, r2, r3, r2
 8008404:	3301      	adds	r3, #1
 8008406:	eb40 0002 	adc.w	r0, r0, r2
 800840a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800840e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008412:	bd10      	pop	{r4, pc}
 8008414:	20000070 	.word	0x20000070
 8008418:	0800d3f0 	.word	0x0800d3f0
 800841c:	0800d407 	.word	0x0800d407
 8008420:	abcd330e 	.word	0xabcd330e
 8008424:	e66d1234 	.word	0xe66d1234
 8008428:	0005deec 	.word	0x0005deec
 800842c:	5851f42d 	.word	0x5851f42d
 8008430:	4c957f2d 	.word	0x4c957f2d

08008434 <__cvt>:
 8008434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008438:	ec55 4b10 	vmov	r4, r5, d0
 800843c:	2d00      	cmp	r5, #0
 800843e:	460e      	mov	r6, r1
 8008440:	4619      	mov	r1, r3
 8008442:	462b      	mov	r3, r5
 8008444:	bfbb      	ittet	lt
 8008446:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800844a:	461d      	movlt	r5, r3
 800844c:	2300      	movge	r3, #0
 800844e:	232d      	movlt	r3, #45	; 0x2d
 8008450:	700b      	strb	r3, [r1, #0]
 8008452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008454:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008458:	4691      	mov	r9, r2
 800845a:	f023 0820 	bic.w	r8, r3, #32
 800845e:	bfbc      	itt	lt
 8008460:	4622      	movlt	r2, r4
 8008462:	4614      	movlt	r4, r2
 8008464:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008468:	d005      	beq.n	8008476 <__cvt+0x42>
 800846a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800846e:	d100      	bne.n	8008472 <__cvt+0x3e>
 8008470:	3601      	adds	r6, #1
 8008472:	2102      	movs	r1, #2
 8008474:	e000      	b.n	8008478 <__cvt+0x44>
 8008476:	2103      	movs	r1, #3
 8008478:	ab03      	add	r3, sp, #12
 800847a:	9301      	str	r3, [sp, #4]
 800847c:	ab02      	add	r3, sp, #8
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	ec45 4b10 	vmov	d0, r4, r5
 8008484:	4653      	mov	r3, sl
 8008486:	4632      	mov	r2, r6
 8008488:	f000 feaa 	bl	80091e0 <_dtoa_r>
 800848c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008490:	4607      	mov	r7, r0
 8008492:	d102      	bne.n	800849a <__cvt+0x66>
 8008494:	f019 0f01 	tst.w	r9, #1
 8008498:	d022      	beq.n	80084e0 <__cvt+0xac>
 800849a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800849e:	eb07 0906 	add.w	r9, r7, r6
 80084a2:	d110      	bne.n	80084c6 <__cvt+0x92>
 80084a4:	783b      	ldrb	r3, [r7, #0]
 80084a6:	2b30      	cmp	r3, #48	; 0x30
 80084a8:	d10a      	bne.n	80084c0 <__cvt+0x8c>
 80084aa:	2200      	movs	r2, #0
 80084ac:	2300      	movs	r3, #0
 80084ae:	4620      	mov	r0, r4
 80084b0:	4629      	mov	r1, r5
 80084b2:	f7f8 fb11 	bl	8000ad8 <__aeabi_dcmpeq>
 80084b6:	b918      	cbnz	r0, 80084c0 <__cvt+0x8c>
 80084b8:	f1c6 0601 	rsb	r6, r6, #1
 80084bc:	f8ca 6000 	str.w	r6, [sl]
 80084c0:	f8da 3000 	ldr.w	r3, [sl]
 80084c4:	4499      	add	r9, r3
 80084c6:	2200      	movs	r2, #0
 80084c8:	2300      	movs	r3, #0
 80084ca:	4620      	mov	r0, r4
 80084cc:	4629      	mov	r1, r5
 80084ce:	f7f8 fb03 	bl	8000ad8 <__aeabi_dcmpeq>
 80084d2:	b108      	cbz	r0, 80084d8 <__cvt+0xa4>
 80084d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80084d8:	2230      	movs	r2, #48	; 0x30
 80084da:	9b03      	ldr	r3, [sp, #12]
 80084dc:	454b      	cmp	r3, r9
 80084de:	d307      	bcc.n	80084f0 <__cvt+0xbc>
 80084e0:	9b03      	ldr	r3, [sp, #12]
 80084e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084e4:	1bdb      	subs	r3, r3, r7
 80084e6:	4638      	mov	r0, r7
 80084e8:	6013      	str	r3, [r2, #0]
 80084ea:	b004      	add	sp, #16
 80084ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f0:	1c59      	adds	r1, r3, #1
 80084f2:	9103      	str	r1, [sp, #12]
 80084f4:	701a      	strb	r2, [r3, #0]
 80084f6:	e7f0      	b.n	80084da <__cvt+0xa6>

080084f8 <__exponent>:
 80084f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084fa:	4603      	mov	r3, r0
 80084fc:	2900      	cmp	r1, #0
 80084fe:	bfb8      	it	lt
 8008500:	4249      	neglt	r1, r1
 8008502:	f803 2b02 	strb.w	r2, [r3], #2
 8008506:	bfb4      	ite	lt
 8008508:	222d      	movlt	r2, #45	; 0x2d
 800850a:	222b      	movge	r2, #43	; 0x2b
 800850c:	2909      	cmp	r1, #9
 800850e:	7042      	strb	r2, [r0, #1]
 8008510:	dd2a      	ble.n	8008568 <__exponent+0x70>
 8008512:	f10d 0207 	add.w	r2, sp, #7
 8008516:	4617      	mov	r7, r2
 8008518:	260a      	movs	r6, #10
 800851a:	4694      	mov	ip, r2
 800851c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008520:	fb06 1415 	mls	r4, r6, r5, r1
 8008524:	3430      	adds	r4, #48	; 0x30
 8008526:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800852a:	460c      	mov	r4, r1
 800852c:	2c63      	cmp	r4, #99	; 0x63
 800852e:	f102 32ff 	add.w	r2, r2, #4294967295
 8008532:	4629      	mov	r1, r5
 8008534:	dcf1      	bgt.n	800851a <__exponent+0x22>
 8008536:	3130      	adds	r1, #48	; 0x30
 8008538:	f1ac 0402 	sub.w	r4, ip, #2
 800853c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008540:	1c41      	adds	r1, r0, #1
 8008542:	4622      	mov	r2, r4
 8008544:	42ba      	cmp	r2, r7
 8008546:	d30a      	bcc.n	800855e <__exponent+0x66>
 8008548:	f10d 0209 	add.w	r2, sp, #9
 800854c:	eba2 020c 	sub.w	r2, r2, ip
 8008550:	42bc      	cmp	r4, r7
 8008552:	bf88      	it	hi
 8008554:	2200      	movhi	r2, #0
 8008556:	4413      	add	r3, r2
 8008558:	1a18      	subs	r0, r3, r0
 800855a:	b003      	add	sp, #12
 800855c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800855e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008562:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008566:	e7ed      	b.n	8008544 <__exponent+0x4c>
 8008568:	2330      	movs	r3, #48	; 0x30
 800856a:	3130      	adds	r1, #48	; 0x30
 800856c:	7083      	strb	r3, [r0, #2]
 800856e:	70c1      	strb	r1, [r0, #3]
 8008570:	1d03      	adds	r3, r0, #4
 8008572:	e7f1      	b.n	8008558 <__exponent+0x60>

08008574 <_printf_float>:
 8008574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008578:	ed2d 8b02 	vpush	{d8}
 800857c:	b08d      	sub	sp, #52	; 0x34
 800857e:	460c      	mov	r4, r1
 8008580:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008584:	4616      	mov	r6, r2
 8008586:	461f      	mov	r7, r3
 8008588:	4605      	mov	r5, r0
 800858a:	f000 fcfb 	bl	8008f84 <_localeconv_r>
 800858e:	f8d0 a000 	ldr.w	sl, [r0]
 8008592:	4650      	mov	r0, sl
 8008594:	f7f7 fe74 	bl	8000280 <strlen>
 8008598:	2300      	movs	r3, #0
 800859a:	930a      	str	r3, [sp, #40]	; 0x28
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	9305      	str	r3, [sp, #20]
 80085a0:	f8d8 3000 	ldr.w	r3, [r8]
 80085a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80085a8:	3307      	adds	r3, #7
 80085aa:	f023 0307 	bic.w	r3, r3, #7
 80085ae:	f103 0208 	add.w	r2, r3, #8
 80085b2:	f8c8 2000 	str.w	r2, [r8]
 80085b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80085be:	9307      	str	r3, [sp, #28]
 80085c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80085c4:	ee08 0a10 	vmov	s16, r0
 80085c8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80085cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085d0:	4b9e      	ldr	r3, [pc, #632]	; (800884c <_printf_float+0x2d8>)
 80085d2:	f04f 32ff 	mov.w	r2, #4294967295
 80085d6:	f7f8 fab1 	bl	8000b3c <__aeabi_dcmpun>
 80085da:	bb88      	cbnz	r0, 8008640 <_printf_float+0xcc>
 80085dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085e0:	4b9a      	ldr	r3, [pc, #616]	; (800884c <_printf_float+0x2d8>)
 80085e2:	f04f 32ff 	mov.w	r2, #4294967295
 80085e6:	f7f8 fa8b 	bl	8000b00 <__aeabi_dcmple>
 80085ea:	bb48      	cbnz	r0, 8008640 <_printf_float+0xcc>
 80085ec:	2200      	movs	r2, #0
 80085ee:	2300      	movs	r3, #0
 80085f0:	4640      	mov	r0, r8
 80085f2:	4649      	mov	r1, r9
 80085f4:	f7f8 fa7a 	bl	8000aec <__aeabi_dcmplt>
 80085f8:	b110      	cbz	r0, 8008600 <_printf_float+0x8c>
 80085fa:	232d      	movs	r3, #45	; 0x2d
 80085fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008600:	4a93      	ldr	r2, [pc, #588]	; (8008850 <_printf_float+0x2dc>)
 8008602:	4b94      	ldr	r3, [pc, #592]	; (8008854 <_printf_float+0x2e0>)
 8008604:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008608:	bf94      	ite	ls
 800860a:	4690      	movls	r8, r2
 800860c:	4698      	movhi	r8, r3
 800860e:	2303      	movs	r3, #3
 8008610:	6123      	str	r3, [r4, #16]
 8008612:	9b05      	ldr	r3, [sp, #20]
 8008614:	f023 0304 	bic.w	r3, r3, #4
 8008618:	6023      	str	r3, [r4, #0]
 800861a:	f04f 0900 	mov.w	r9, #0
 800861e:	9700      	str	r7, [sp, #0]
 8008620:	4633      	mov	r3, r6
 8008622:	aa0b      	add	r2, sp, #44	; 0x2c
 8008624:	4621      	mov	r1, r4
 8008626:	4628      	mov	r0, r5
 8008628:	f000 f9da 	bl	80089e0 <_printf_common>
 800862c:	3001      	adds	r0, #1
 800862e:	f040 8090 	bne.w	8008752 <_printf_float+0x1de>
 8008632:	f04f 30ff 	mov.w	r0, #4294967295
 8008636:	b00d      	add	sp, #52	; 0x34
 8008638:	ecbd 8b02 	vpop	{d8}
 800863c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008640:	4642      	mov	r2, r8
 8008642:	464b      	mov	r3, r9
 8008644:	4640      	mov	r0, r8
 8008646:	4649      	mov	r1, r9
 8008648:	f7f8 fa78 	bl	8000b3c <__aeabi_dcmpun>
 800864c:	b140      	cbz	r0, 8008660 <_printf_float+0xec>
 800864e:	464b      	mov	r3, r9
 8008650:	2b00      	cmp	r3, #0
 8008652:	bfbc      	itt	lt
 8008654:	232d      	movlt	r3, #45	; 0x2d
 8008656:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800865a:	4a7f      	ldr	r2, [pc, #508]	; (8008858 <_printf_float+0x2e4>)
 800865c:	4b7f      	ldr	r3, [pc, #508]	; (800885c <_printf_float+0x2e8>)
 800865e:	e7d1      	b.n	8008604 <_printf_float+0x90>
 8008660:	6863      	ldr	r3, [r4, #4]
 8008662:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008666:	9206      	str	r2, [sp, #24]
 8008668:	1c5a      	adds	r2, r3, #1
 800866a:	d13f      	bne.n	80086ec <_printf_float+0x178>
 800866c:	2306      	movs	r3, #6
 800866e:	6063      	str	r3, [r4, #4]
 8008670:	9b05      	ldr	r3, [sp, #20]
 8008672:	6861      	ldr	r1, [r4, #4]
 8008674:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008678:	2300      	movs	r3, #0
 800867a:	9303      	str	r3, [sp, #12]
 800867c:	ab0a      	add	r3, sp, #40	; 0x28
 800867e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008682:	ab09      	add	r3, sp, #36	; 0x24
 8008684:	ec49 8b10 	vmov	d0, r8, r9
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	6022      	str	r2, [r4, #0]
 800868c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008690:	4628      	mov	r0, r5
 8008692:	f7ff fecf 	bl	8008434 <__cvt>
 8008696:	9b06      	ldr	r3, [sp, #24]
 8008698:	9909      	ldr	r1, [sp, #36]	; 0x24
 800869a:	2b47      	cmp	r3, #71	; 0x47
 800869c:	4680      	mov	r8, r0
 800869e:	d108      	bne.n	80086b2 <_printf_float+0x13e>
 80086a0:	1cc8      	adds	r0, r1, #3
 80086a2:	db02      	blt.n	80086aa <_printf_float+0x136>
 80086a4:	6863      	ldr	r3, [r4, #4]
 80086a6:	4299      	cmp	r1, r3
 80086a8:	dd41      	ble.n	800872e <_printf_float+0x1ba>
 80086aa:	f1ab 0302 	sub.w	r3, fp, #2
 80086ae:	fa5f fb83 	uxtb.w	fp, r3
 80086b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80086b6:	d820      	bhi.n	80086fa <_printf_float+0x186>
 80086b8:	3901      	subs	r1, #1
 80086ba:	465a      	mov	r2, fp
 80086bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80086c0:	9109      	str	r1, [sp, #36]	; 0x24
 80086c2:	f7ff ff19 	bl	80084f8 <__exponent>
 80086c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086c8:	1813      	adds	r3, r2, r0
 80086ca:	2a01      	cmp	r2, #1
 80086cc:	4681      	mov	r9, r0
 80086ce:	6123      	str	r3, [r4, #16]
 80086d0:	dc02      	bgt.n	80086d8 <_printf_float+0x164>
 80086d2:	6822      	ldr	r2, [r4, #0]
 80086d4:	07d2      	lsls	r2, r2, #31
 80086d6:	d501      	bpl.n	80086dc <_printf_float+0x168>
 80086d8:	3301      	adds	r3, #1
 80086da:	6123      	str	r3, [r4, #16]
 80086dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d09c      	beq.n	800861e <_printf_float+0xaa>
 80086e4:	232d      	movs	r3, #45	; 0x2d
 80086e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086ea:	e798      	b.n	800861e <_printf_float+0xaa>
 80086ec:	9a06      	ldr	r2, [sp, #24]
 80086ee:	2a47      	cmp	r2, #71	; 0x47
 80086f0:	d1be      	bne.n	8008670 <_printf_float+0xfc>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1bc      	bne.n	8008670 <_printf_float+0xfc>
 80086f6:	2301      	movs	r3, #1
 80086f8:	e7b9      	b.n	800866e <_printf_float+0xfa>
 80086fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80086fe:	d118      	bne.n	8008732 <_printf_float+0x1be>
 8008700:	2900      	cmp	r1, #0
 8008702:	6863      	ldr	r3, [r4, #4]
 8008704:	dd0b      	ble.n	800871e <_printf_float+0x1aa>
 8008706:	6121      	str	r1, [r4, #16]
 8008708:	b913      	cbnz	r3, 8008710 <_printf_float+0x19c>
 800870a:	6822      	ldr	r2, [r4, #0]
 800870c:	07d0      	lsls	r0, r2, #31
 800870e:	d502      	bpl.n	8008716 <_printf_float+0x1a2>
 8008710:	3301      	adds	r3, #1
 8008712:	440b      	add	r3, r1
 8008714:	6123      	str	r3, [r4, #16]
 8008716:	65a1      	str	r1, [r4, #88]	; 0x58
 8008718:	f04f 0900 	mov.w	r9, #0
 800871c:	e7de      	b.n	80086dc <_printf_float+0x168>
 800871e:	b913      	cbnz	r3, 8008726 <_printf_float+0x1b2>
 8008720:	6822      	ldr	r2, [r4, #0]
 8008722:	07d2      	lsls	r2, r2, #31
 8008724:	d501      	bpl.n	800872a <_printf_float+0x1b6>
 8008726:	3302      	adds	r3, #2
 8008728:	e7f4      	b.n	8008714 <_printf_float+0x1a0>
 800872a:	2301      	movs	r3, #1
 800872c:	e7f2      	b.n	8008714 <_printf_float+0x1a0>
 800872e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008734:	4299      	cmp	r1, r3
 8008736:	db05      	blt.n	8008744 <_printf_float+0x1d0>
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	6121      	str	r1, [r4, #16]
 800873c:	07d8      	lsls	r0, r3, #31
 800873e:	d5ea      	bpl.n	8008716 <_printf_float+0x1a2>
 8008740:	1c4b      	adds	r3, r1, #1
 8008742:	e7e7      	b.n	8008714 <_printf_float+0x1a0>
 8008744:	2900      	cmp	r1, #0
 8008746:	bfd4      	ite	le
 8008748:	f1c1 0202 	rsble	r2, r1, #2
 800874c:	2201      	movgt	r2, #1
 800874e:	4413      	add	r3, r2
 8008750:	e7e0      	b.n	8008714 <_printf_float+0x1a0>
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	055a      	lsls	r2, r3, #21
 8008756:	d407      	bmi.n	8008768 <_printf_float+0x1f4>
 8008758:	6923      	ldr	r3, [r4, #16]
 800875a:	4642      	mov	r2, r8
 800875c:	4631      	mov	r1, r6
 800875e:	4628      	mov	r0, r5
 8008760:	47b8      	blx	r7
 8008762:	3001      	adds	r0, #1
 8008764:	d12c      	bne.n	80087c0 <_printf_float+0x24c>
 8008766:	e764      	b.n	8008632 <_printf_float+0xbe>
 8008768:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800876c:	f240 80e0 	bls.w	8008930 <_printf_float+0x3bc>
 8008770:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008774:	2200      	movs	r2, #0
 8008776:	2300      	movs	r3, #0
 8008778:	f7f8 f9ae 	bl	8000ad8 <__aeabi_dcmpeq>
 800877c:	2800      	cmp	r0, #0
 800877e:	d034      	beq.n	80087ea <_printf_float+0x276>
 8008780:	4a37      	ldr	r2, [pc, #220]	; (8008860 <_printf_float+0x2ec>)
 8008782:	2301      	movs	r3, #1
 8008784:	4631      	mov	r1, r6
 8008786:	4628      	mov	r0, r5
 8008788:	47b8      	blx	r7
 800878a:	3001      	adds	r0, #1
 800878c:	f43f af51 	beq.w	8008632 <_printf_float+0xbe>
 8008790:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008794:	429a      	cmp	r2, r3
 8008796:	db02      	blt.n	800879e <_printf_float+0x22a>
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	07d8      	lsls	r0, r3, #31
 800879c:	d510      	bpl.n	80087c0 <_printf_float+0x24c>
 800879e:	ee18 3a10 	vmov	r3, s16
 80087a2:	4652      	mov	r2, sl
 80087a4:	4631      	mov	r1, r6
 80087a6:	4628      	mov	r0, r5
 80087a8:	47b8      	blx	r7
 80087aa:	3001      	adds	r0, #1
 80087ac:	f43f af41 	beq.w	8008632 <_printf_float+0xbe>
 80087b0:	f04f 0800 	mov.w	r8, #0
 80087b4:	f104 091a 	add.w	r9, r4, #26
 80087b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ba:	3b01      	subs	r3, #1
 80087bc:	4543      	cmp	r3, r8
 80087be:	dc09      	bgt.n	80087d4 <_printf_float+0x260>
 80087c0:	6823      	ldr	r3, [r4, #0]
 80087c2:	079b      	lsls	r3, r3, #30
 80087c4:	f100 8107 	bmi.w	80089d6 <_printf_float+0x462>
 80087c8:	68e0      	ldr	r0, [r4, #12]
 80087ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087cc:	4298      	cmp	r0, r3
 80087ce:	bfb8      	it	lt
 80087d0:	4618      	movlt	r0, r3
 80087d2:	e730      	b.n	8008636 <_printf_float+0xc2>
 80087d4:	2301      	movs	r3, #1
 80087d6:	464a      	mov	r2, r9
 80087d8:	4631      	mov	r1, r6
 80087da:	4628      	mov	r0, r5
 80087dc:	47b8      	blx	r7
 80087de:	3001      	adds	r0, #1
 80087e0:	f43f af27 	beq.w	8008632 <_printf_float+0xbe>
 80087e4:	f108 0801 	add.w	r8, r8, #1
 80087e8:	e7e6      	b.n	80087b8 <_printf_float+0x244>
 80087ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	dc39      	bgt.n	8008864 <_printf_float+0x2f0>
 80087f0:	4a1b      	ldr	r2, [pc, #108]	; (8008860 <_printf_float+0x2ec>)
 80087f2:	2301      	movs	r3, #1
 80087f4:	4631      	mov	r1, r6
 80087f6:	4628      	mov	r0, r5
 80087f8:	47b8      	blx	r7
 80087fa:	3001      	adds	r0, #1
 80087fc:	f43f af19 	beq.w	8008632 <_printf_float+0xbe>
 8008800:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008804:	4313      	orrs	r3, r2
 8008806:	d102      	bne.n	800880e <_printf_float+0x29a>
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	07d9      	lsls	r1, r3, #31
 800880c:	d5d8      	bpl.n	80087c0 <_printf_float+0x24c>
 800880e:	ee18 3a10 	vmov	r3, s16
 8008812:	4652      	mov	r2, sl
 8008814:	4631      	mov	r1, r6
 8008816:	4628      	mov	r0, r5
 8008818:	47b8      	blx	r7
 800881a:	3001      	adds	r0, #1
 800881c:	f43f af09 	beq.w	8008632 <_printf_float+0xbe>
 8008820:	f04f 0900 	mov.w	r9, #0
 8008824:	f104 0a1a 	add.w	sl, r4, #26
 8008828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800882a:	425b      	negs	r3, r3
 800882c:	454b      	cmp	r3, r9
 800882e:	dc01      	bgt.n	8008834 <_printf_float+0x2c0>
 8008830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008832:	e792      	b.n	800875a <_printf_float+0x1e6>
 8008834:	2301      	movs	r3, #1
 8008836:	4652      	mov	r2, sl
 8008838:	4631      	mov	r1, r6
 800883a:	4628      	mov	r0, r5
 800883c:	47b8      	blx	r7
 800883e:	3001      	adds	r0, #1
 8008840:	f43f aef7 	beq.w	8008632 <_printf_float+0xbe>
 8008844:	f109 0901 	add.w	r9, r9, #1
 8008848:	e7ee      	b.n	8008828 <_printf_float+0x2b4>
 800884a:	bf00      	nop
 800884c:	7fefffff 	.word	0x7fefffff
 8008850:	0800d45f 	.word	0x0800d45f
 8008854:	0800d463 	.word	0x0800d463
 8008858:	0800d467 	.word	0x0800d467
 800885c:	0800d46b 	.word	0x0800d46b
 8008860:	0800d46f 	.word	0x0800d46f
 8008864:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008866:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008868:	429a      	cmp	r2, r3
 800886a:	bfa8      	it	ge
 800886c:	461a      	movge	r2, r3
 800886e:	2a00      	cmp	r2, #0
 8008870:	4691      	mov	r9, r2
 8008872:	dc37      	bgt.n	80088e4 <_printf_float+0x370>
 8008874:	f04f 0b00 	mov.w	fp, #0
 8008878:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800887c:	f104 021a 	add.w	r2, r4, #26
 8008880:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008882:	9305      	str	r3, [sp, #20]
 8008884:	eba3 0309 	sub.w	r3, r3, r9
 8008888:	455b      	cmp	r3, fp
 800888a:	dc33      	bgt.n	80088f4 <_printf_float+0x380>
 800888c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008890:	429a      	cmp	r2, r3
 8008892:	db3b      	blt.n	800890c <_printf_float+0x398>
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	07da      	lsls	r2, r3, #31
 8008898:	d438      	bmi.n	800890c <_printf_float+0x398>
 800889a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800889e:	eba2 0903 	sub.w	r9, r2, r3
 80088a2:	9b05      	ldr	r3, [sp, #20]
 80088a4:	1ad2      	subs	r2, r2, r3
 80088a6:	4591      	cmp	r9, r2
 80088a8:	bfa8      	it	ge
 80088aa:	4691      	movge	r9, r2
 80088ac:	f1b9 0f00 	cmp.w	r9, #0
 80088b0:	dc35      	bgt.n	800891e <_printf_float+0x3aa>
 80088b2:	f04f 0800 	mov.w	r8, #0
 80088b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088ba:	f104 0a1a 	add.w	sl, r4, #26
 80088be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088c2:	1a9b      	subs	r3, r3, r2
 80088c4:	eba3 0309 	sub.w	r3, r3, r9
 80088c8:	4543      	cmp	r3, r8
 80088ca:	f77f af79 	ble.w	80087c0 <_printf_float+0x24c>
 80088ce:	2301      	movs	r3, #1
 80088d0:	4652      	mov	r2, sl
 80088d2:	4631      	mov	r1, r6
 80088d4:	4628      	mov	r0, r5
 80088d6:	47b8      	blx	r7
 80088d8:	3001      	adds	r0, #1
 80088da:	f43f aeaa 	beq.w	8008632 <_printf_float+0xbe>
 80088de:	f108 0801 	add.w	r8, r8, #1
 80088e2:	e7ec      	b.n	80088be <_printf_float+0x34a>
 80088e4:	4613      	mov	r3, r2
 80088e6:	4631      	mov	r1, r6
 80088e8:	4642      	mov	r2, r8
 80088ea:	4628      	mov	r0, r5
 80088ec:	47b8      	blx	r7
 80088ee:	3001      	adds	r0, #1
 80088f0:	d1c0      	bne.n	8008874 <_printf_float+0x300>
 80088f2:	e69e      	b.n	8008632 <_printf_float+0xbe>
 80088f4:	2301      	movs	r3, #1
 80088f6:	4631      	mov	r1, r6
 80088f8:	4628      	mov	r0, r5
 80088fa:	9205      	str	r2, [sp, #20]
 80088fc:	47b8      	blx	r7
 80088fe:	3001      	adds	r0, #1
 8008900:	f43f ae97 	beq.w	8008632 <_printf_float+0xbe>
 8008904:	9a05      	ldr	r2, [sp, #20]
 8008906:	f10b 0b01 	add.w	fp, fp, #1
 800890a:	e7b9      	b.n	8008880 <_printf_float+0x30c>
 800890c:	ee18 3a10 	vmov	r3, s16
 8008910:	4652      	mov	r2, sl
 8008912:	4631      	mov	r1, r6
 8008914:	4628      	mov	r0, r5
 8008916:	47b8      	blx	r7
 8008918:	3001      	adds	r0, #1
 800891a:	d1be      	bne.n	800889a <_printf_float+0x326>
 800891c:	e689      	b.n	8008632 <_printf_float+0xbe>
 800891e:	9a05      	ldr	r2, [sp, #20]
 8008920:	464b      	mov	r3, r9
 8008922:	4442      	add	r2, r8
 8008924:	4631      	mov	r1, r6
 8008926:	4628      	mov	r0, r5
 8008928:	47b8      	blx	r7
 800892a:	3001      	adds	r0, #1
 800892c:	d1c1      	bne.n	80088b2 <_printf_float+0x33e>
 800892e:	e680      	b.n	8008632 <_printf_float+0xbe>
 8008930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008932:	2a01      	cmp	r2, #1
 8008934:	dc01      	bgt.n	800893a <_printf_float+0x3c6>
 8008936:	07db      	lsls	r3, r3, #31
 8008938:	d53a      	bpl.n	80089b0 <_printf_float+0x43c>
 800893a:	2301      	movs	r3, #1
 800893c:	4642      	mov	r2, r8
 800893e:	4631      	mov	r1, r6
 8008940:	4628      	mov	r0, r5
 8008942:	47b8      	blx	r7
 8008944:	3001      	adds	r0, #1
 8008946:	f43f ae74 	beq.w	8008632 <_printf_float+0xbe>
 800894a:	ee18 3a10 	vmov	r3, s16
 800894e:	4652      	mov	r2, sl
 8008950:	4631      	mov	r1, r6
 8008952:	4628      	mov	r0, r5
 8008954:	47b8      	blx	r7
 8008956:	3001      	adds	r0, #1
 8008958:	f43f ae6b 	beq.w	8008632 <_printf_float+0xbe>
 800895c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008960:	2200      	movs	r2, #0
 8008962:	2300      	movs	r3, #0
 8008964:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008968:	f7f8 f8b6 	bl	8000ad8 <__aeabi_dcmpeq>
 800896c:	b9d8      	cbnz	r0, 80089a6 <_printf_float+0x432>
 800896e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008972:	f108 0201 	add.w	r2, r8, #1
 8008976:	4631      	mov	r1, r6
 8008978:	4628      	mov	r0, r5
 800897a:	47b8      	blx	r7
 800897c:	3001      	adds	r0, #1
 800897e:	d10e      	bne.n	800899e <_printf_float+0x42a>
 8008980:	e657      	b.n	8008632 <_printf_float+0xbe>
 8008982:	2301      	movs	r3, #1
 8008984:	4652      	mov	r2, sl
 8008986:	4631      	mov	r1, r6
 8008988:	4628      	mov	r0, r5
 800898a:	47b8      	blx	r7
 800898c:	3001      	adds	r0, #1
 800898e:	f43f ae50 	beq.w	8008632 <_printf_float+0xbe>
 8008992:	f108 0801 	add.w	r8, r8, #1
 8008996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008998:	3b01      	subs	r3, #1
 800899a:	4543      	cmp	r3, r8
 800899c:	dcf1      	bgt.n	8008982 <_printf_float+0x40e>
 800899e:	464b      	mov	r3, r9
 80089a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80089a4:	e6da      	b.n	800875c <_printf_float+0x1e8>
 80089a6:	f04f 0800 	mov.w	r8, #0
 80089aa:	f104 0a1a 	add.w	sl, r4, #26
 80089ae:	e7f2      	b.n	8008996 <_printf_float+0x422>
 80089b0:	2301      	movs	r3, #1
 80089b2:	4642      	mov	r2, r8
 80089b4:	e7df      	b.n	8008976 <_printf_float+0x402>
 80089b6:	2301      	movs	r3, #1
 80089b8:	464a      	mov	r2, r9
 80089ba:	4631      	mov	r1, r6
 80089bc:	4628      	mov	r0, r5
 80089be:	47b8      	blx	r7
 80089c0:	3001      	adds	r0, #1
 80089c2:	f43f ae36 	beq.w	8008632 <_printf_float+0xbe>
 80089c6:	f108 0801 	add.w	r8, r8, #1
 80089ca:	68e3      	ldr	r3, [r4, #12]
 80089cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089ce:	1a5b      	subs	r3, r3, r1
 80089d0:	4543      	cmp	r3, r8
 80089d2:	dcf0      	bgt.n	80089b6 <_printf_float+0x442>
 80089d4:	e6f8      	b.n	80087c8 <_printf_float+0x254>
 80089d6:	f04f 0800 	mov.w	r8, #0
 80089da:	f104 0919 	add.w	r9, r4, #25
 80089de:	e7f4      	b.n	80089ca <_printf_float+0x456>

080089e0 <_printf_common>:
 80089e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089e4:	4616      	mov	r6, r2
 80089e6:	4699      	mov	r9, r3
 80089e8:	688a      	ldr	r2, [r1, #8]
 80089ea:	690b      	ldr	r3, [r1, #16]
 80089ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089f0:	4293      	cmp	r3, r2
 80089f2:	bfb8      	it	lt
 80089f4:	4613      	movlt	r3, r2
 80089f6:	6033      	str	r3, [r6, #0]
 80089f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089fc:	4607      	mov	r7, r0
 80089fe:	460c      	mov	r4, r1
 8008a00:	b10a      	cbz	r2, 8008a06 <_printf_common+0x26>
 8008a02:	3301      	adds	r3, #1
 8008a04:	6033      	str	r3, [r6, #0]
 8008a06:	6823      	ldr	r3, [r4, #0]
 8008a08:	0699      	lsls	r1, r3, #26
 8008a0a:	bf42      	ittt	mi
 8008a0c:	6833      	ldrmi	r3, [r6, #0]
 8008a0e:	3302      	addmi	r3, #2
 8008a10:	6033      	strmi	r3, [r6, #0]
 8008a12:	6825      	ldr	r5, [r4, #0]
 8008a14:	f015 0506 	ands.w	r5, r5, #6
 8008a18:	d106      	bne.n	8008a28 <_printf_common+0x48>
 8008a1a:	f104 0a19 	add.w	sl, r4, #25
 8008a1e:	68e3      	ldr	r3, [r4, #12]
 8008a20:	6832      	ldr	r2, [r6, #0]
 8008a22:	1a9b      	subs	r3, r3, r2
 8008a24:	42ab      	cmp	r3, r5
 8008a26:	dc26      	bgt.n	8008a76 <_printf_common+0x96>
 8008a28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a2c:	1e13      	subs	r3, r2, #0
 8008a2e:	6822      	ldr	r2, [r4, #0]
 8008a30:	bf18      	it	ne
 8008a32:	2301      	movne	r3, #1
 8008a34:	0692      	lsls	r2, r2, #26
 8008a36:	d42b      	bmi.n	8008a90 <_printf_common+0xb0>
 8008a38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a3c:	4649      	mov	r1, r9
 8008a3e:	4638      	mov	r0, r7
 8008a40:	47c0      	blx	r8
 8008a42:	3001      	adds	r0, #1
 8008a44:	d01e      	beq.n	8008a84 <_printf_common+0xa4>
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	6922      	ldr	r2, [r4, #16]
 8008a4a:	f003 0306 	and.w	r3, r3, #6
 8008a4e:	2b04      	cmp	r3, #4
 8008a50:	bf02      	ittt	eq
 8008a52:	68e5      	ldreq	r5, [r4, #12]
 8008a54:	6833      	ldreq	r3, [r6, #0]
 8008a56:	1aed      	subeq	r5, r5, r3
 8008a58:	68a3      	ldr	r3, [r4, #8]
 8008a5a:	bf0c      	ite	eq
 8008a5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a60:	2500      	movne	r5, #0
 8008a62:	4293      	cmp	r3, r2
 8008a64:	bfc4      	itt	gt
 8008a66:	1a9b      	subgt	r3, r3, r2
 8008a68:	18ed      	addgt	r5, r5, r3
 8008a6a:	2600      	movs	r6, #0
 8008a6c:	341a      	adds	r4, #26
 8008a6e:	42b5      	cmp	r5, r6
 8008a70:	d11a      	bne.n	8008aa8 <_printf_common+0xc8>
 8008a72:	2000      	movs	r0, #0
 8008a74:	e008      	b.n	8008a88 <_printf_common+0xa8>
 8008a76:	2301      	movs	r3, #1
 8008a78:	4652      	mov	r2, sl
 8008a7a:	4649      	mov	r1, r9
 8008a7c:	4638      	mov	r0, r7
 8008a7e:	47c0      	blx	r8
 8008a80:	3001      	adds	r0, #1
 8008a82:	d103      	bne.n	8008a8c <_printf_common+0xac>
 8008a84:	f04f 30ff 	mov.w	r0, #4294967295
 8008a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a8c:	3501      	adds	r5, #1
 8008a8e:	e7c6      	b.n	8008a1e <_printf_common+0x3e>
 8008a90:	18e1      	adds	r1, r4, r3
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	2030      	movs	r0, #48	; 0x30
 8008a96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a9a:	4422      	add	r2, r4
 8008a9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008aa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008aa4:	3302      	adds	r3, #2
 8008aa6:	e7c7      	b.n	8008a38 <_printf_common+0x58>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	4622      	mov	r2, r4
 8008aac:	4649      	mov	r1, r9
 8008aae:	4638      	mov	r0, r7
 8008ab0:	47c0      	blx	r8
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	d0e6      	beq.n	8008a84 <_printf_common+0xa4>
 8008ab6:	3601      	adds	r6, #1
 8008ab8:	e7d9      	b.n	8008a6e <_printf_common+0x8e>
	...

08008abc <_printf_i>:
 8008abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac0:	7e0f      	ldrb	r7, [r1, #24]
 8008ac2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ac4:	2f78      	cmp	r7, #120	; 0x78
 8008ac6:	4691      	mov	r9, r2
 8008ac8:	4680      	mov	r8, r0
 8008aca:	460c      	mov	r4, r1
 8008acc:	469a      	mov	sl, r3
 8008ace:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ad2:	d807      	bhi.n	8008ae4 <_printf_i+0x28>
 8008ad4:	2f62      	cmp	r7, #98	; 0x62
 8008ad6:	d80a      	bhi.n	8008aee <_printf_i+0x32>
 8008ad8:	2f00      	cmp	r7, #0
 8008ada:	f000 80d4 	beq.w	8008c86 <_printf_i+0x1ca>
 8008ade:	2f58      	cmp	r7, #88	; 0x58
 8008ae0:	f000 80c0 	beq.w	8008c64 <_printf_i+0x1a8>
 8008ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ae8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008aec:	e03a      	b.n	8008b64 <_printf_i+0xa8>
 8008aee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008af2:	2b15      	cmp	r3, #21
 8008af4:	d8f6      	bhi.n	8008ae4 <_printf_i+0x28>
 8008af6:	a101      	add	r1, pc, #4	; (adr r1, 8008afc <_printf_i+0x40>)
 8008af8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008afc:	08008b55 	.word	0x08008b55
 8008b00:	08008b69 	.word	0x08008b69
 8008b04:	08008ae5 	.word	0x08008ae5
 8008b08:	08008ae5 	.word	0x08008ae5
 8008b0c:	08008ae5 	.word	0x08008ae5
 8008b10:	08008ae5 	.word	0x08008ae5
 8008b14:	08008b69 	.word	0x08008b69
 8008b18:	08008ae5 	.word	0x08008ae5
 8008b1c:	08008ae5 	.word	0x08008ae5
 8008b20:	08008ae5 	.word	0x08008ae5
 8008b24:	08008ae5 	.word	0x08008ae5
 8008b28:	08008c6d 	.word	0x08008c6d
 8008b2c:	08008b95 	.word	0x08008b95
 8008b30:	08008c27 	.word	0x08008c27
 8008b34:	08008ae5 	.word	0x08008ae5
 8008b38:	08008ae5 	.word	0x08008ae5
 8008b3c:	08008c8f 	.word	0x08008c8f
 8008b40:	08008ae5 	.word	0x08008ae5
 8008b44:	08008b95 	.word	0x08008b95
 8008b48:	08008ae5 	.word	0x08008ae5
 8008b4c:	08008ae5 	.word	0x08008ae5
 8008b50:	08008c2f 	.word	0x08008c2f
 8008b54:	682b      	ldr	r3, [r5, #0]
 8008b56:	1d1a      	adds	r2, r3, #4
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	602a      	str	r2, [r5, #0]
 8008b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b64:	2301      	movs	r3, #1
 8008b66:	e09f      	b.n	8008ca8 <_printf_i+0x1ec>
 8008b68:	6820      	ldr	r0, [r4, #0]
 8008b6a:	682b      	ldr	r3, [r5, #0]
 8008b6c:	0607      	lsls	r7, r0, #24
 8008b6e:	f103 0104 	add.w	r1, r3, #4
 8008b72:	6029      	str	r1, [r5, #0]
 8008b74:	d501      	bpl.n	8008b7a <_printf_i+0xbe>
 8008b76:	681e      	ldr	r6, [r3, #0]
 8008b78:	e003      	b.n	8008b82 <_printf_i+0xc6>
 8008b7a:	0646      	lsls	r6, r0, #25
 8008b7c:	d5fb      	bpl.n	8008b76 <_printf_i+0xba>
 8008b7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008b82:	2e00      	cmp	r6, #0
 8008b84:	da03      	bge.n	8008b8e <_printf_i+0xd2>
 8008b86:	232d      	movs	r3, #45	; 0x2d
 8008b88:	4276      	negs	r6, r6
 8008b8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b8e:	485a      	ldr	r0, [pc, #360]	; (8008cf8 <_printf_i+0x23c>)
 8008b90:	230a      	movs	r3, #10
 8008b92:	e012      	b.n	8008bba <_printf_i+0xfe>
 8008b94:	682b      	ldr	r3, [r5, #0]
 8008b96:	6820      	ldr	r0, [r4, #0]
 8008b98:	1d19      	adds	r1, r3, #4
 8008b9a:	6029      	str	r1, [r5, #0]
 8008b9c:	0605      	lsls	r5, r0, #24
 8008b9e:	d501      	bpl.n	8008ba4 <_printf_i+0xe8>
 8008ba0:	681e      	ldr	r6, [r3, #0]
 8008ba2:	e002      	b.n	8008baa <_printf_i+0xee>
 8008ba4:	0641      	lsls	r1, r0, #25
 8008ba6:	d5fb      	bpl.n	8008ba0 <_printf_i+0xe4>
 8008ba8:	881e      	ldrh	r6, [r3, #0]
 8008baa:	4853      	ldr	r0, [pc, #332]	; (8008cf8 <_printf_i+0x23c>)
 8008bac:	2f6f      	cmp	r7, #111	; 0x6f
 8008bae:	bf0c      	ite	eq
 8008bb0:	2308      	moveq	r3, #8
 8008bb2:	230a      	movne	r3, #10
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bba:	6865      	ldr	r5, [r4, #4]
 8008bbc:	60a5      	str	r5, [r4, #8]
 8008bbe:	2d00      	cmp	r5, #0
 8008bc0:	bfa2      	ittt	ge
 8008bc2:	6821      	ldrge	r1, [r4, #0]
 8008bc4:	f021 0104 	bicge.w	r1, r1, #4
 8008bc8:	6021      	strge	r1, [r4, #0]
 8008bca:	b90e      	cbnz	r6, 8008bd0 <_printf_i+0x114>
 8008bcc:	2d00      	cmp	r5, #0
 8008bce:	d04b      	beq.n	8008c68 <_printf_i+0x1ac>
 8008bd0:	4615      	mov	r5, r2
 8008bd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008bd6:	fb03 6711 	mls	r7, r3, r1, r6
 8008bda:	5dc7      	ldrb	r7, [r0, r7]
 8008bdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008be0:	4637      	mov	r7, r6
 8008be2:	42bb      	cmp	r3, r7
 8008be4:	460e      	mov	r6, r1
 8008be6:	d9f4      	bls.n	8008bd2 <_printf_i+0x116>
 8008be8:	2b08      	cmp	r3, #8
 8008bea:	d10b      	bne.n	8008c04 <_printf_i+0x148>
 8008bec:	6823      	ldr	r3, [r4, #0]
 8008bee:	07de      	lsls	r6, r3, #31
 8008bf0:	d508      	bpl.n	8008c04 <_printf_i+0x148>
 8008bf2:	6923      	ldr	r3, [r4, #16]
 8008bf4:	6861      	ldr	r1, [r4, #4]
 8008bf6:	4299      	cmp	r1, r3
 8008bf8:	bfde      	ittt	le
 8008bfa:	2330      	movle	r3, #48	; 0x30
 8008bfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c04:	1b52      	subs	r2, r2, r5
 8008c06:	6122      	str	r2, [r4, #16]
 8008c08:	f8cd a000 	str.w	sl, [sp]
 8008c0c:	464b      	mov	r3, r9
 8008c0e:	aa03      	add	r2, sp, #12
 8008c10:	4621      	mov	r1, r4
 8008c12:	4640      	mov	r0, r8
 8008c14:	f7ff fee4 	bl	80089e0 <_printf_common>
 8008c18:	3001      	adds	r0, #1
 8008c1a:	d14a      	bne.n	8008cb2 <_printf_i+0x1f6>
 8008c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c20:	b004      	add	sp, #16
 8008c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	f043 0320 	orr.w	r3, r3, #32
 8008c2c:	6023      	str	r3, [r4, #0]
 8008c2e:	4833      	ldr	r0, [pc, #204]	; (8008cfc <_printf_i+0x240>)
 8008c30:	2778      	movs	r7, #120	; 0x78
 8008c32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c36:	6823      	ldr	r3, [r4, #0]
 8008c38:	6829      	ldr	r1, [r5, #0]
 8008c3a:	061f      	lsls	r7, r3, #24
 8008c3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c40:	d402      	bmi.n	8008c48 <_printf_i+0x18c>
 8008c42:	065f      	lsls	r7, r3, #25
 8008c44:	bf48      	it	mi
 8008c46:	b2b6      	uxthmi	r6, r6
 8008c48:	07df      	lsls	r7, r3, #31
 8008c4a:	bf48      	it	mi
 8008c4c:	f043 0320 	orrmi.w	r3, r3, #32
 8008c50:	6029      	str	r1, [r5, #0]
 8008c52:	bf48      	it	mi
 8008c54:	6023      	strmi	r3, [r4, #0]
 8008c56:	b91e      	cbnz	r6, 8008c60 <_printf_i+0x1a4>
 8008c58:	6823      	ldr	r3, [r4, #0]
 8008c5a:	f023 0320 	bic.w	r3, r3, #32
 8008c5e:	6023      	str	r3, [r4, #0]
 8008c60:	2310      	movs	r3, #16
 8008c62:	e7a7      	b.n	8008bb4 <_printf_i+0xf8>
 8008c64:	4824      	ldr	r0, [pc, #144]	; (8008cf8 <_printf_i+0x23c>)
 8008c66:	e7e4      	b.n	8008c32 <_printf_i+0x176>
 8008c68:	4615      	mov	r5, r2
 8008c6a:	e7bd      	b.n	8008be8 <_printf_i+0x12c>
 8008c6c:	682b      	ldr	r3, [r5, #0]
 8008c6e:	6826      	ldr	r6, [r4, #0]
 8008c70:	6961      	ldr	r1, [r4, #20]
 8008c72:	1d18      	adds	r0, r3, #4
 8008c74:	6028      	str	r0, [r5, #0]
 8008c76:	0635      	lsls	r5, r6, #24
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	d501      	bpl.n	8008c80 <_printf_i+0x1c4>
 8008c7c:	6019      	str	r1, [r3, #0]
 8008c7e:	e002      	b.n	8008c86 <_printf_i+0x1ca>
 8008c80:	0670      	lsls	r0, r6, #25
 8008c82:	d5fb      	bpl.n	8008c7c <_printf_i+0x1c0>
 8008c84:	8019      	strh	r1, [r3, #0]
 8008c86:	2300      	movs	r3, #0
 8008c88:	6123      	str	r3, [r4, #16]
 8008c8a:	4615      	mov	r5, r2
 8008c8c:	e7bc      	b.n	8008c08 <_printf_i+0x14c>
 8008c8e:	682b      	ldr	r3, [r5, #0]
 8008c90:	1d1a      	adds	r2, r3, #4
 8008c92:	602a      	str	r2, [r5, #0]
 8008c94:	681d      	ldr	r5, [r3, #0]
 8008c96:	6862      	ldr	r2, [r4, #4]
 8008c98:	2100      	movs	r1, #0
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	f7f7 faa0 	bl	80001e0 <memchr>
 8008ca0:	b108      	cbz	r0, 8008ca6 <_printf_i+0x1ea>
 8008ca2:	1b40      	subs	r0, r0, r5
 8008ca4:	6060      	str	r0, [r4, #4]
 8008ca6:	6863      	ldr	r3, [r4, #4]
 8008ca8:	6123      	str	r3, [r4, #16]
 8008caa:	2300      	movs	r3, #0
 8008cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cb0:	e7aa      	b.n	8008c08 <_printf_i+0x14c>
 8008cb2:	6923      	ldr	r3, [r4, #16]
 8008cb4:	462a      	mov	r2, r5
 8008cb6:	4649      	mov	r1, r9
 8008cb8:	4640      	mov	r0, r8
 8008cba:	47d0      	blx	sl
 8008cbc:	3001      	adds	r0, #1
 8008cbe:	d0ad      	beq.n	8008c1c <_printf_i+0x160>
 8008cc0:	6823      	ldr	r3, [r4, #0]
 8008cc2:	079b      	lsls	r3, r3, #30
 8008cc4:	d413      	bmi.n	8008cee <_printf_i+0x232>
 8008cc6:	68e0      	ldr	r0, [r4, #12]
 8008cc8:	9b03      	ldr	r3, [sp, #12]
 8008cca:	4298      	cmp	r0, r3
 8008ccc:	bfb8      	it	lt
 8008cce:	4618      	movlt	r0, r3
 8008cd0:	e7a6      	b.n	8008c20 <_printf_i+0x164>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	4632      	mov	r2, r6
 8008cd6:	4649      	mov	r1, r9
 8008cd8:	4640      	mov	r0, r8
 8008cda:	47d0      	blx	sl
 8008cdc:	3001      	adds	r0, #1
 8008cde:	d09d      	beq.n	8008c1c <_printf_i+0x160>
 8008ce0:	3501      	adds	r5, #1
 8008ce2:	68e3      	ldr	r3, [r4, #12]
 8008ce4:	9903      	ldr	r1, [sp, #12]
 8008ce6:	1a5b      	subs	r3, r3, r1
 8008ce8:	42ab      	cmp	r3, r5
 8008cea:	dcf2      	bgt.n	8008cd2 <_printf_i+0x216>
 8008cec:	e7eb      	b.n	8008cc6 <_printf_i+0x20a>
 8008cee:	2500      	movs	r5, #0
 8008cf0:	f104 0619 	add.w	r6, r4, #25
 8008cf4:	e7f5      	b.n	8008ce2 <_printf_i+0x226>
 8008cf6:	bf00      	nop
 8008cf8:	0800d471 	.word	0x0800d471
 8008cfc:	0800d482 	.word	0x0800d482

08008d00 <std>:
 8008d00:	2300      	movs	r3, #0
 8008d02:	b510      	push	{r4, lr}
 8008d04:	4604      	mov	r4, r0
 8008d06:	e9c0 3300 	strd	r3, r3, [r0]
 8008d0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d0e:	6083      	str	r3, [r0, #8]
 8008d10:	8181      	strh	r1, [r0, #12]
 8008d12:	6643      	str	r3, [r0, #100]	; 0x64
 8008d14:	81c2      	strh	r2, [r0, #14]
 8008d16:	6183      	str	r3, [r0, #24]
 8008d18:	4619      	mov	r1, r3
 8008d1a:	2208      	movs	r2, #8
 8008d1c:	305c      	adds	r0, #92	; 0x5c
 8008d1e:	f000 f928 	bl	8008f72 <memset>
 8008d22:	4b0d      	ldr	r3, [pc, #52]	; (8008d58 <std+0x58>)
 8008d24:	6263      	str	r3, [r4, #36]	; 0x24
 8008d26:	4b0d      	ldr	r3, [pc, #52]	; (8008d5c <std+0x5c>)
 8008d28:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d2a:	4b0d      	ldr	r3, [pc, #52]	; (8008d60 <std+0x60>)
 8008d2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d2e:	4b0d      	ldr	r3, [pc, #52]	; (8008d64 <std+0x64>)
 8008d30:	6323      	str	r3, [r4, #48]	; 0x30
 8008d32:	4b0d      	ldr	r3, [pc, #52]	; (8008d68 <std+0x68>)
 8008d34:	6224      	str	r4, [r4, #32]
 8008d36:	429c      	cmp	r4, r3
 8008d38:	d006      	beq.n	8008d48 <std+0x48>
 8008d3a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008d3e:	4294      	cmp	r4, r2
 8008d40:	d002      	beq.n	8008d48 <std+0x48>
 8008d42:	33d0      	adds	r3, #208	; 0xd0
 8008d44:	429c      	cmp	r4, r3
 8008d46:	d105      	bne.n	8008d54 <std+0x54>
 8008d48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d50:	f000 b98c 	b.w	800906c <__retarget_lock_init_recursive>
 8008d54:	bd10      	pop	{r4, pc}
 8008d56:	bf00      	nop
 8008d58:	08008eed 	.word	0x08008eed
 8008d5c:	08008f0f 	.word	0x08008f0f
 8008d60:	08008f47 	.word	0x08008f47
 8008d64:	08008f6b 	.word	0x08008f6b
 8008d68:	20004508 	.word	0x20004508

08008d6c <stdio_exit_handler>:
 8008d6c:	4a02      	ldr	r2, [pc, #8]	; (8008d78 <stdio_exit_handler+0xc>)
 8008d6e:	4903      	ldr	r1, [pc, #12]	; (8008d7c <stdio_exit_handler+0x10>)
 8008d70:	4803      	ldr	r0, [pc, #12]	; (8008d80 <stdio_exit_handler+0x14>)
 8008d72:	f000 b869 	b.w	8008e48 <_fwalk_sglue>
 8008d76:	bf00      	nop
 8008d78:	20000018 	.word	0x20000018
 8008d7c:	0800aa79 	.word	0x0800aa79
 8008d80:	20000024 	.word	0x20000024

08008d84 <cleanup_stdio>:
 8008d84:	6841      	ldr	r1, [r0, #4]
 8008d86:	4b0c      	ldr	r3, [pc, #48]	; (8008db8 <cleanup_stdio+0x34>)
 8008d88:	4299      	cmp	r1, r3
 8008d8a:	b510      	push	{r4, lr}
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	d001      	beq.n	8008d94 <cleanup_stdio+0x10>
 8008d90:	f001 fe72 	bl	800aa78 <_fflush_r>
 8008d94:	68a1      	ldr	r1, [r4, #8]
 8008d96:	4b09      	ldr	r3, [pc, #36]	; (8008dbc <cleanup_stdio+0x38>)
 8008d98:	4299      	cmp	r1, r3
 8008d9a:	d002      	beq.n	8008da2 <cleanup_stdio+0x1e>
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f001 fe6b 	bl	800aa78 <_fflush_r>
 8008da2:	68e1      	ldr	r1, [r4, #12]
 8008da4:	4b06      	ldr	r3, [pc, #24]	; (8008dc0 <cleanup_stdio+0x3c>)
 8008da6:	4299      	cmp	r1, r3
 8008da8:	d004      	beq.n	8008db4 <cleanup_stdio+0x30>
 8008daa:	4620      	mov	r0, r4
 8008dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008db0:	f001 be62 	b.w	800aa78 <_fflush_r>
 8008db4:	bd10      	pop	{r4, pc}
 8008db6:	bf00      	nop
 8008db8:	20004508 	.word	0x20004508
 8008dbc:	20004570 	.word	0x20004570
 8008dc0:	200045d8 	.word	0x200045d8

08008dc4 <global_stdio_init.part.0>:
 8008dc4:	b510      	push	{r4, lr}
 8008dc6:	4b0b      	ldr	r3, [pc, #44]	; (8008df4 <global_stdio_init.part.0+0x30>)
 8008dc8:	4c0b      	ldr	r4, [pc, #44]	; (8008df8 <global_stdio_init.part.0+0x34>)
 8008dca:	4a0c      	ldr	r2, [pc, #48]	; (8008dfc <global_stdio_init.part.0+0x38>)
 8008dcc:	601a      	str	r2, [r3, #0]
 8008dce:	4620      	mov	r0, r4
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	2104      	movs	r1, #4
 8008dd4:	f7ff ff94 	bl	8008d00 <std>
 8008dd8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008ddc:	2201      	movs	r2, #1
 8008dde:	2109      	movs	r1, #9
 8008de0:	f7ff ff8e 	bl	8008d00 <std>
 8008de4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008de8:	2202      	movs	r2, #2
 8008dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dee:	2112      	movs	r1, #18
 8008df0:	f7ff bf86 	b.w	8008d00 <std>
 8008df4:	20004640 	.word	0x20004640
 8008df8:	20004508 	.word	0x20004508
 8008dfc:	08008d6d 	.word	0x08008d6d

08008e00 <__sfp_lock_acquire>:
 8008e00:	4801      	ldr	r0, [pc, #4]	; (8008e08 <__sfp_lock_acquire+0x8>)
 8008e02:	f000 b934 	b.w	800906e <__retarget_lock_acquire_recursive>
 8008e06:	bf00      	nop
 8008e08:	20004649 	.word	0x20004649

08008e0c <__sfp_lock_release>:
 8008e0c:	4801      	ldr	r0, [pc, #4]	; (8008e14 <__sfp_lock_release+0x8>)
 8008e0e:	f000 b92f 	b.w	8009070 <__retarget_lock_release_recursive>
 8008e12:	bf00      	nop
 8008e14:	20004649 	.word	0x20004649

08008e18 <__sinit>:
 8008e18:	b510      	push	{r4, lr}
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	f7ff fff0 	bl	8008e00 <__sfp_lock_acquire>
 8008e20:	6a23      	ldr	r3, [r4, #32]
 8008e22:	b11b      	cbz	r3, 8008e2c <__sinit+0x14>
 8008e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e28:	f7ff bff0 	b.w	8008e0c <__sfp_lock_release>
 8008e2c:	4b04      	ldr	r3, [pc, #16]	; (8008e40 <__sinit+0x28>)
 8008e2e:	6223      	str	r3, [r4, #32]
 8008e30:	4b04      	ldr	r3, [pc, #16]	; (8008e44 <__sinit+0x2c>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1f5      	bne.n	8008e24 <__sinit+0xc>
 8008e38:	f7ff ffc4 	bl	8008dc4 <global_stdio_init.part.0>
 8008e3c:	e7f2      	b.n	8008e24 <__sinit+0xc>
 8008e3e:	bf00      	nop
 8008e40:	08008d85 	.word	0x08008d85
 8008e44:	20004640 	.word	0x20004640

08008e48 <_fwalk_sglue>:
 8008e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e4c:	4607      	mov	r7, r0
 8008e4e:	4688      	mov	r8, r1
 8008e50:	4614      	mov	r4, r2
 8008e52:	2600      	movs	r6, #0
 8008e54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e58:	f1b9 0901 	subs.w	r9, r9, #1
 8008e5c:	d505      	bpl.n	8008e6a <_fwalk_sglue+0x22>
 8008e5e:	6824      	ldr	r4, [r4, #0]
 8008e60:	2c00      	cmp	r4, #0
 8008e62:	d1f7      	bne.n	8008e54 <_fwalk_sglue+0xc>
 8008e64:	4630      	mov	r0, r6
 8008e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e6a:	89ab      	ldrh	r3, [r5, #12]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d907      	bls.n	8008e80 <_fwalk_sglue+0x38>
 8008e70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e74:	3301      	adds	r3, #1
 8008e76:	d003      	beq.n	8008e80 <_fwalk_sglue+0x38>
 8008e78:	4629      	mov	r1, r5
 8008e7a:	4638      	mov	r0, r7
 8008e7c:	47c0      	blx	r8
 8008e7e:	4306      	orrs	r6, r0
 8008e80:	3568      	adds	r5, #104	; 0x68
 8008e82:	e7e9      	b.n	8008e58 <_fwalk_sglue+0x10>

08008e84 <sniprintf>:
 8008e84:	b40c      	push	{r2, r3}
 8008e86:	b530      	push	{r4, r5, lr}
 8008e88:	4b17      	ldr	r3, [pc, #92]	; (8008ee8 <sniprintf+0x64>)
 8008e8a:	1e0c      	subs	r4, r1, #0
 8008e8c:	681d      	ldr	r5, [r3, #0]
 8008e8e:	b09d      	sub	sp, #116	; 0x74
 8008e90:	da08      	bge.n	8008ea4 <sniprintf+0x20>
 8008e92:	238b      	movs	r3, #139	; 0x8b
 8008e94:	602b      	str	r3, [r5, #0]
 8008e96:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9a:	b01d      	add	sp, #116	; 0x74
 8008e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ea0:	b002      	add	sp, #8
 8008ea2:	4770      	bx	lr
 8008ea4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008ea8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008eac:	bf14      	ite	ne
 8008eae:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008eb2:	4623      	moveq	r3, r4
 8008eb4:	9304      	str	r3, [sp, #16]
 8008eb6:	9307      	str	r3, [sp, #28]
 8008eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ebc:	9002      	str	r0, [sp, #8]
 8008ebe:	9006      	str	r0, [sp, #24]
 8008ec0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ec4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008ec6:	ab21      	add	r3, sp, #132	; 0x84
 8008ec8:	a902      	add	r1, sp, #8
 8008eca:	4628      	mov	r0, r5
 8008ecc:	9301      	str	r3, [sp, #4]
 8008ece:	f001 fc4f 	bl	800a770 <_svfiprintf_r>
 8008ed2:	1c43      	adds	r3, r0, #1
 8008ed4:	bfbc      	itt	lt
 8008ed6:	238b      	movlt	r3, #139	; 0x8b
 8008ed8:	602b      	strlt	r3, [r5, #0]
 8008eda:	2c00      	cmp	r4, #0
 8008edc:	d0dd      	beq.n	8008e9a <sniprintf+0x16>
 8008ede:	9b02      	ldr	r3, [sp, #8]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	701a      	strb	r2, [r3, #0]
 8008ee4:	e7d9      	b.n	8008e9a <sniprintf+0x16>
 8008ee6:	bf00      	nop
 8008ee8:	20000070 	.word	0x20000070

08008eec <__sread>:
 8008eec:	b510      	push	{r4, lr}
 8008eee:	460c      	mov	r4, r1
 8008ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ef4:	f000 f86c 	bl	8008fd0 <_read_r>
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	bfab      	itete	ge
 8008efc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008efe:	89a3      	ldrhlt	r3, [r4, #12]
 8008f00:	181b      	addge	r3, r3, r0
 8008f02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f06:	bfac      	ite	ge
 8008f08:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f0a:	81a3      	strhlt	r3, [r4, #12]
 8008f0c:	bd10      	pop	{r4, pc}

08008f0e <__swrite>:
 8008f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f12:	461f      	mov	r7, r3
 8008f14:	898b      	ldrh	r3, [r1, #12]
 8008f16:	05db      	lsls	r3, r3, #23
 8008f18:	4605      	mov	r5, r0
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	4616      	mov	r6, r2
 8008f1e:	d505      	bpl.n	8008f2c <__swrite+0x1e>
 8008f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f24:	2302      	movs	r3, #2
 8008f26:	2200      	movs	r2, #0
 8008f28:	f000 f840 	bl	8008fac <_lseek_r>
 8008f2c:	89a3      	ldrh	r3, [r4, #12]
 8008f2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f36:	81a3      	strh	r3, [r4, #12]
 8008f38:	4632      	mov	r2, r6
 8008f3a:	463b      	mov	r3, r7
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f42:	f000 b857 	b.w	8008ff4 <_write_r>

08008f46 <__sseek>:
 8008f46:	b510      	push	{r4, lr}
 8008f48:	460c      	mov	r4, r1
 8008f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f4e:	f000 f82d 	bl	8008fac <_lseek_r>
 8008f52:	1c43      	adds	r3, r0, #1
 8008f54:	89a3      	ldrh	r3, [r4, #12]
 8008f56:	bf15      	itete	ne
 8008f58:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f62:	81a3      	strheq	r3, [r4, #12]
 8008f64:	bf18      	it	ne
 8008f66:	81a3      	strhne	r3, [r4, #12]
 8008f68:	bd10      	pop	{r4, pc}

08008f6a <__sclose>:
 8008f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f6e:	f000 b80d 	b.w	8008f8c <_close_r>

08008f72 <memset>:
 8008f72:	4402      	add	r2, r0
 8008f74:	4603      	mov	r3, r0
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d100      	bne.n	8008f7c <memset+0xa>
 8008f7a:	4770      	bx	lr
 8008f7c:	f803 1b01 	strb.w	r1, [r3], #1
 8008f80:	e7f9      	b.n	8008f76 <memset+0x4>
	...

08008f84 <_localeconv_r>:
 8008f84:	4800      	ldr	r0, [pc, #0]	; (8008f88 <_localeconv_r+0x4>)
 8008f86:	4770      	bx	lr
 8008f88:	20000164 	.word	0x20000164

08008f8c <_close_r>:
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	4d06      	ldr	r5, [pc, #24]	; (8008fa8 <_close_r+0x1c>)
 8008f90:	2300      	movs	r3, #0
 8008f92:	4604      	mov	r4, r0
 8008f94:	4608      	mov	r0, r1
 8008f96:	602b      	str	r3, [r5, #0]
 8008f98:	f7f9 fe5d 	bl	8002c56 <_close>
 8008f9c:	1c43      	adds	r3, r0, #1
 8008f9e:	d102      	bne.n	8008fa6 <_close_r+0x1a>
 8008fa0:	682b      	ldr	r3, [r5, #0]
 8008fa2:	b103      	cbz	r3, 8008fa6 <_close_r+0x1a>
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	bd38      	pop	{r3, r4, r5, pc}
 8008fa8:	20004644 	.word	0x20004644

08008fac <_lseek_r>:
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	4d07      	ldr	r5, [pc, #28]	; (8008fcc <_lseek_r+0x20>)
 8008fb0:	4604      	mov	r4, r0
 8008fb2:	4608      	mov	r0, r1
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	602a      	str	r2, [r5, #0]
 8008fba:	461a      	mov	r2, r3
 8008fbc:	f7f9 fe72 	bl	8002ca4 <_lseek>
 8008fc0:	1c43      	adds	r3, r0, #1
 8008fc2:	d102      	bne.n	8008fca <_lseek_r+0x1e>
 8008fc4:	682b      	ldr	r3, [r5, #0]
 8008fc6:	b103      	cbz	r3, 8008fca <_lseek_r+0x1e>
 8008fc8:	6023      	str	r3, [r4, #0]
 8008fca:	bd38      	pop	{r3, r4, r5, pc}
 8008fcc:	20004644 	.word	0x20004644

08008fd0 <_read_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4d07      	ldr	r5, [pc, #28]	; (8008ff0 <_read_r+0x20>)
 8008fd4:	4604      	mov	r4, r0
 8008fd6:	4608      	mov	r0, r1
 8008fd8:	4611      	mov	r1, r2
 8008fda:	2200      	movs	r2, #0
 8008fdc:	602a      	str	r2, [r5, #0]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	f7f9 fe00 	bl	8002be4 <_read>
 8008fe4:	1c43      	adds	r3, r0, #1
 8008fe6:	d102      	bne.n	8008fee <_read_r+0x1e>
 8008fe8:	682b      	ldr	r3, [r5, #0]
 8008fea:	b103      	cbz	r3, 8008fee <_read_r+0x1e>
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	bd38      	pop	{r3, r4, r5, pc}
 8008ff0:	20004644 	.word	0x20004644

08008ff4 <_write_r>:
 8008ff4:	b538      	push	{r3, r4, r5, lr}
 8008ff6:	4d07      	ldr	r5, [pc, #28]	; (8009014 <_write_r+0x20>)
 8008ff8:	4604      	mov	r4, r0
 8008ffa:	4608      	mov	r0, r1
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	2200      	movs	r2, #0
 8009000:	602a      	str	r2, [r5, #0]
 8009002:	461a      	mov	r2, r3
 8009004:	f7f9 fe0b 	bl	8002c1e <_write>
 8009008:	1c43      	adds	r3, r0, #1
 800900a:	d102      	bne.n	8009012 <_write_r+0x1e>
 800900c:	682b      	ldr	r3, [r5, #0]
 800900e:	b103      	cbz	r3, 8009012 <_write_r+0x1e>
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	bd38      	pop	{r3, r4, r5, pc}
 8009014:	20004644 	.word	0x20004644

08009018 <__errno>:
 8009018:	4b01      	ldr	r3, [pc, #4]	; (8009020 <__errno+0x8>)
 800901a:	6818      	ldr	r0, [r3, #0]
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	20000070 	.word	0x20000070

08009024 <__libc_init_array>:
 8009024:	b570      	push	{r4, r5, r6, lr}
 8009026:	4d0d      	ldr	r5, [pc, #52]	; (800905c <__libc_init_array+0x38>)
 8009028:	4c0d      	ldr	r4, [pc, #52]	; (8009060 <__libc_init_array+0x3c>)
 800902a:	1b64      	subs	r4, r4, r5
 800902c:	10a4      	asrs	r4, r4, #2
 800902e:	2600      	movs	r6, #0
 8009030:	42a6      	cmp	r6, r4
 8009032:	d109      	bne.n	8009048 <__libc_init_array+0x24>
 8009034:	4d0b      	ldr	r5, [pc, #44]	; (8009064 <__libc_init_array+0x40>)
 8009036:	4c0c      	ldr	r4, [pc, #48]	; (8009068 <__libc_init_array+0x44>)
 8009038:	f002 f896 	bl	800b168 <_init>
 800903c:	1b64      	subs	r4, r4, r5
 800903e:	10a4      	asrs	r4, r4, #2
 8009040:	2600      	movs	r6, #0
 8009042:	42a6      	cmp	r6, r4
 8009044:	d105      	bne.n	8009052 <__libc_init_array+0x2e>
 8009046:	bd70      	pop	{r4, r5, r6, pc}
 8009048:	f855 3b04 	ldr.w	r3, [r5], #4
 800904c:	4798      	blx	r3
 800904e:	3601      	adds	r6, #1
 8009050:	e7ee      	b.n	8009030 <__libc_init_array+0xc>
 8009052:	f855 3b04 	ldr.w	r3, [r5], #4
 8009056:	4798      	blx	r3
 8009058:	3601      	adds	r6, #1
 800905a:	e7f2      	b.n	8009042 <__libc_init_array+0x1e>
 800905c:	0800d7c0 	.word	0x0800d7c0
 8009060:	0800d7c0 	.word	0x0800d7c0
 8009064:	0800d7c0 	.word	0x0800d7c0
 8009068:	0800d7c4 	.word	0x0800d7c4

0800906c <__retarget_lock_init_recursive>:
 800906c:	4770      	bx	lr

0800906e <__retarget_lock_acquire_recursive>:
 800906e:	4770      	bx	lr

08009070 <__retarget_lock_release_recursive>:
 8009070:	4770      	bx	lr

08009072 <memcpy>:
 8009072:	440a      	add	r2, r1
 8009074:	4291      	cmp	r1, r2
 8009076:	f100 33ff 	add.w	r3, r0, #4294967295
 800907a:	d100      	bne.n	800907e <memcpy+0xc>
 800907c:	4770      	bx	lr
 800907e:	b510      	push	{r4, lr}
 8009080:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009084:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009088:	4291      	cmp	r1, r2
 800908a:	d1f9      	bne.n	8009080 <memcpy+0xe>
 800908c:	bd10      	pop	{r4, pc}
	...

08009090 <__assert_func>:
 8009090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009092:	4614      	mov	r4, r2
 8009094:	461a      	mov	r2, r3
 8009096:	4b09      	ldr	r3, [pc, #36]	; (80090bc <__assert_func+0x2c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4605      	mov	r5, r0
 800909c:	68d8      	ldr	r0, [r3, #12]
 800909e:	b14c      	cbz	r4, 80090b4 <__assert_func+0x24>
 80090a0:	4b07      	ldr	r3, [pc, #28]	; (80090c0 <__assert_func+0x30>)
 80090a2:	9100      	str	r1, [sp, #0]
 80090a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090a8:	4906      	ldr	r1, [pc, #24]	; (80090c4 <__assert_func+0x34>)
 80090aa:	462b      	mov	r3, r5
 80090ac:	f001 fd0c 	bl	800aac8 <fiprintf>
 80090b0:	f001 fd46 	bl	800ab40 <abort>
 80090b4:	4b04      	ldr	r3, [pc, #16]	; (80090c8 <__assert_func+0x38>)
 80090b6:	461c      	mov	r4, r3
 80090b8:	e7f3      	b.n	80090a2 <__assert_func+0x12>
 80090ba:	bf00      	nop
 80090bc:	20000070 	.word	0x20000070
 80090c0:	0800d493 	.word	0x0800d493
 80090c4:	0800d4a0 	.word	0x0800d4a0
 80090c8:	0800d4ce 	.word	0x0800d4ce

080090cc <quorem>:
 80090cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d0:	6903      	ldr	r3, [r0, #16]
 80090d2:	690c      	ldr	r4, [r1, #16]
 80090d4:	42a3      	cmp	r3, r4
 80090d6:	4607      	mov	r7, r0
 80090d8:	db7e      	blt.n	80091d8 <quorem+0x10c>
 80090da:	3c01      	subs	r4, #1
 80090dc:	f101 0814 	add.w	r8, r1, #20
 80090e0:	f100 0514 	add.w	r5, r0, #20
 80090e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090e8:	9301      	str	r3, [sp, #4]
 80090ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80090ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090f2:	3301      	adds	r3, #1
 80090f4:	429a      	cmp	r2, r3
 80090f6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80090fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80090fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8009102:	d331      	bcc.n	8009168 <quorem+0x9c>
 8009104:	f04f 0e00 	mov.w	lr, #0
 8009108:	4640      	mov	r0, r8
 800910a:	46ac      	mov	ip, r5
 800910c:	46f2      	mov	sl, lr
 800910e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009112:	b293      	uxth	r3, r2
 8009114:	fb06 e303 	mla	r3, r6, r3, lr
 8009118:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800911c:	0c1a      	lsrs	r2, r3, #16
 800911e:	b29b      	uxth	r3, r3
 8009120:	ebaa 0303 	sub.w	r3, sl, r3
 8009124:	f8dc a000 	ldr.w	sl, [ip]
 8009128:	fa13 f38a 	uxtah	r3, r3, sl
 800912c:	fb06 220e 	mla	r2, r6, lr, r2
 8009130:	9300      	str	r3, [sp, #0]
 8009132:	9b00      	ldr	r3, [sp, #0]
 8009134:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009138:	b292      	uxth	r2, r2
 800913a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800913e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009142:	f8bd 3000 	ldrh.w	r3, [sp]
 8009146:	4581      	cmp	r9, r0
 8009148:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800914c:	f84c 3b04 	str.w	r3, [ip], #4
 8009150:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009154:	d2db      	bcs.n	800910e <quorem+0x42>
 8009156:	f855 300b 	ldr.w	r3, [r5, fp]
 800915a:	b92b      	cbnz	r3, 8009168 <quorem+0x9c>
 800915c:	9b01      	ldr	r3, [sp, #4]
 800915e:	3b04      	subs	r3, #4
 8009160:	429d      	cmp	r5, r3
 8009162:	461a      	mov	r2, r3
 8009164:	d32c      	bcc.n	80091c0 <quorem+0xf4>
 8009166:	613c      	str	r4, [r7, #16]
 8009168:	4638      	mov	r0, r7
 800916a:	f001 f9a7 	bl	800a4bc <__mcmp>
 800916e:	2800      	cmp	r0, #0
 8009170:	db22      	blt.n	80091b8 <quorem+0xec>
 8009172:	3601      	adds	r6, #1
 8009174:	4629      	mov	r1, r5
 8009176:	2000      	movs	r0, #0
 8009178:	f858 2b04 	ldr.w	r2, [r8], #4
 800917c:	f8d1 c000 	ldr.w	ip, [r1]
 8009180:	b293      	uxth	r3, r2
 8009182:	1ac3      	subs	r3, r0, r3
 8009184:	0c12      	lsrs	r2, r2, #16
 8009186:	fa13 f38c 	uxtah	r3, r3, ip
 800918a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800918e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009192:	b29b      	uxth	r3, r3
 8009194:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009198:	45c1      	cmp	r9, r8
 800919a:	f841 3b04 	str.w	r3, [r1], #4
 800919e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80091a2:	d2e9      	bcs.n	8009178 <quorem+0xac>
 80091a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091ac:	b922      	cbnz	r2, 80091b8 <quorem+0xec>
 80091ae:	3b04      	subs	r3, #4
 80091b0:	429d      	cmp	r5, r3
 80091b2:	461a      	mov	r2, r3
 80091b4:	d30a      	bcc.n	80091cc <quorem+0x100>
 80091b6:	613c      	str	r4, [r7, #16]
 80091b8:	4630      	mov	r0, r6
 80091ba:	b003      	add	sp, #12
 80091bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c0:	6812      	ldr	r2, [r2, #0]
 80091c2:	3b04      	subs	r3, #4
 80091c4:	2a00      	cmp	r2, #0
 80091c6:	d1ce      	bne.n	8009166 <quorem+0x9a>
 80091c8:	3c01      	subs	r4, #1
 80091ca:	e7c9      	b.n	8009160 <quorem+0x94>
 80091cc:	6812      	ldr	r2, [r2, #0]
 80091ce:	3b04      	subs	r3, #4
 80091d0:	2a00      	cmp	r2, #0
 80091d2:	d1f0      	bne.n	80091b6 <quorem+0xea>
 80091d4:	3c01      	subs	r4, #1
 80091d6:	e7eb      	b.n	80091b0 <quorem+0xe4>
 80091d8:	2000      	movs	r0, #0
 80091da:	e7ee      	b.n	80091ba <quorem+0xee>
 80091dc:	0000      	movs	r0, r0
	...

080091e0 <_dtoa_r>:
 80091e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e4:	ed2d 8b04 	vpush	{d8-d9}
 80091e8:	69c5      	ldr	r5, [r0, #28]
 80091ea:	b093      	sub	sp, #76	; 0x4c
 80091ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80091f0:	ec57 6b10 	vmov	r6, r7, d0
 80091f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80091f8:	9107      	str	r1, [sp, #28]
 80091fa:	4604      	mov	r4, r0
 80091fc:	920a      	str	r2, [sp, #40]	; 0x28
 80091fe:	930d      	str	r3, [sp, #52]	; 0x34
 8009200:	b975      	cbnz	r5, 8009220 <_dtoa_r+0x40>
 8009202:	2010      	movs	r0, #16
 8009204:	f000 fe2a 	bl	8009e5c <malloc>
 8009208:	4602      	mov	r2, r0
 800920a:	61e0      	str	r0, [r4, #28]
 800920c:	b920      	cbnz	r0, 8009218 <_dtoa_r+0x38>
 800920e:	4bae      	ldr	r3, [pc, #696]	; (80094c8 <_dtoa_r+0x2e8>)
 8009210:	21ef      	movs	r1, #239	; 0xef
 8009212:	48ae      	ldr	r0, [pc, #696]	; (80094cc <_dtoa_r+0x2ec>)
 8009214:	f7ff ff3c 	bl	8009090 <__assert_func>
 8009218:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800921c:	6005      	str	r5, [r0, #0]
 800921e:	60c5      	str	r5, [r0, #12]
 8009220:	69e3      	ldr	r3, [r4, #28]
 8009222:	6819      	ldr	r1, [r3, #0]
 8009224:	b151      	cbz	r1, 800923c <_dtoa_r+0x5c>
 8009226:	685a      	ldr	r2, [r3, #4]
 8009228:	604a      	str	r2, [r1, #4]
 800922a:	2301      	movs	r3, #1
 800922c:	4093      	lsls	r3, r2
 800922e:	608b      	str	r3, [r1, #8]
 8009230:	4620      	mov	r0, r4
 8009232:	f000 ff07 	bl	800a044 <_Bfree>
 8009236:	69e3      	ldr	r3, [r4, #28]
 8009238:	2200      	movs	r2, #0
 800923a:	601a      	str	r2, [r3, #0]
 800923c:	1e3b      	subs	r3, r7, #0
 800923e:	bfbb      	ittet	lt
 8009240:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009244:	9303      	strlt	r3, [sp, #12]
 8009246:	2300      	movge	r3, #0
 8009248:	2201      	movlt	r2, #1
 800924a:	bfac      	ite	ge
 800924c:	f8c8 3000 	strge.w	r3, [r8]
 8009250:	f8c8 2000 	strlt.w	r2, [r8]
 8009254:	4b9e      	ldr	r3, [pc, #632]	; (80094d0 <_dtoa_r+0x2f0>)
 8009256:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800925a:	ea33 0308 	bics.w	r3, r3, r8
 800925e:	d11b      	bne.n	8009298 <_dtoa_r+0xb8>
 8009260:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009262:	f242 730f 	movw	r3, #9999	; 0x270f
 8009266:	6013      	str	r3, [r2, #0]
 8009268:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800926c:	4333      	orrs	r3, r6
 800926e:	f000 8593 	beq.w	8009d98 <_dtoa_r+0xbb8>
 8009272:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009274:	b963      	cbnz	r3, 8009290 <_dtoa_r+0xb0>
 8009276:	4b97      	ldr	r3, [pc, #604]	; (80094d4 <_dtoa_r+0x2f4>)
 8009278:	e027      	b.n	80092ca <_dtoa_r+0xea>
 800927a:	4b97      	ldr	r3, [pc, #604]	; (80094d8 <_dtoa_r+0x2f8>)
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	3308      	adds	r3, #8
 8009280:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009282:	6013      	str	r3, [r2, #0]
 8009284:	9800      	ldr	r0, [sp, #0]
 8009286:	b013      	add	sp, #76	; 0x4c
 8009288:	ecbd 8b04 	vpop	{d8-d9}
 800928c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009290:	4b90      	ldr	r3, [pc, #576]	; (80094d4 <_dtoa_r+0x2f4>)
 8009292:	9300      	str	r3, [sp, #0]
 8009294:	3303      	adds	r3, #3
 8009296:	e7f3      	b.n	8009280 <_dtoa_r+0xa0>
 8009298:	ed9d 7b02 	vldr	d7, [sp, #8]
 800929c:	2200      	movs	r2, #0
 800929e:	ec51 0b17 	vmov	r0, r1, d7
 80092a2:	eeb0 8a47 	vmov.f32	s16, s14
 80092a6:	eef0 8a67 	vmov.f32	s17, s15
 80092aa:	2300      	movs	r3, #0
 80092ac:	f7f7 fc14 	bl	8000ad8 <__aeabi_dcmpeq>
 80092b0:	4681      	mov	r9, r0
 80092b2:	b160      	cbz	r0, 80092ce <_dtoa_r+0xee>
 80092b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80092b6:	2301      	movs	r3, #1
 80092b8:	6013      	str	r3, [r2, #0]
 80092ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 8568 	beq.w	8009d92 <_dtoa_r+0xbb2>
 80092c2:	4b86      	ldr	r3, [pc, #536]	; (80094dc <_dtoa_r+0x2fc>)
 80092c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80092c6:	6013      	str	r3, [r2, #0]
 80092c8:	3b01      	subs	r3, #1
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	e7da      	b.n	8009284 <_dtoa_r+0xa4>
 80092ce:	aa10      	add	r2, sp, #64	; 0x40
 80092d0:	a911      	add	r1, sp, #68	; 0x44
 80092d2:	4620      	mov	r0, r4
 80092d4:	eeb0 0a48 	vmov.f32	s0, s16
 80092d8:	eef0 0a68 	vmov.f32	s1, s17
 80092dc:	f001 f994 	bl	800a608 <__d2b>
 80092e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80092e4:	4682      	mov	sl, r0
 80092e6:	2d00      	cmp	r5, #0
 80092e8:	d07f      	beq.n	80093ea <_dtoa_r+0x20a>
 80092ea:	ee18 3a90 	vmov	r3, s17
 80092ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80092f6:	ec51 0b18 	vmov	r0, r1, d8
 80092fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80092fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009302:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009306:	4619      	mov	r1, r3
 8009308:	2200      	movs	r2, #0
 800930a:	4b75      	ldr	r3, [pc, #468]	; (80094e0 <_dtoa_r+0x300>)
 800930c:	f7f6 ffc4 	bl	8000298 <__aeabi_dsub>
 8009310:	a367      	add	r3, pc, #412	; (adr r3, 80094b0 <_dtoa_r+0x2d0>)
 8009312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009316:	f7f7 f977 	bl	8000608 <__aeabi_dmul>
 800931a:	a367      	add	r3, pc, #412	; (adr r3, 80094b8 <_dtoa_r+0x2d8>)
 800931c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009320:	f7f6 ffbc 	bl	800029c <__adddf3>
 8009324:	4606      	mov	r6, r0
 8009326:	4628      	mov	r0, r5
 8009328:	460f      	mov	r7, r1
 800932a:	f7f7 f903 	bl	8000534 <__aeabi_i2d>
 800932e:	a364      	add	r3, pc, #400	; (adr r3, 80094c0 <_dtoa_r+0x2e0>)
 8009330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009334:	f7f7 f968 	bl	8000608 <__aeabi_dmul>
 8009338:	4602      	mov	r2, r0
 800933a:	460b      	mov	r3, r1
 800933c:	4630      	mov	r0, r6
 800933e:	4639      	mov	r1, r7
 8009340:	f7f6 ffac 	bl	800029c <__adddf3>
 8009344:	4606      	mov	r6, r0
 8009346:	460f      	mov	r7, r1
 8009348:	f7f7 fc0e 	bl	8000b68 <__aeabi_d2iz>
 800934c:	2200      	movs	r2, #0
 800934e:	4683      	mov	fp, r0
 8009350:	2300      	movs	r3, #0
 8009352:	4630      	mov	r0, r6
 8009354:	4639      	mov	r1, r7
 8009356:	f7f7 fbc9 	bl	8000aec <__aeabi_dcmplt>
 800935a:	b148      	cbz	r0, 8009370 <_dtoa_r+0x190>
 800935c:	4658      	mov	r0, fp
 800935e:	f7f7 f8e9 	bl	8000534 <__aeabi_i2d>
 8009362:	4632      	mov	r2, r6
 8009364:	463b      	mov	r3, r7
 8009366:	f7f7 fbb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800936a:	b908      	cbnz	r0, 8009370 <_dtoa_r+0x190>
 800936c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009370:	f1bb 0f16 	cmp.w	fp, #22
 8009374:	d857      	bhi.n	8009426 <_dtoa_r+0x246>
 8009376:	4b5b      	ldr	r3, [pc, #364]	; (80094e4 <_dtoa_r+0x304>)
 8009378:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800937c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009380:	ec51 0b18 	vmov	r0, r1, d8
 8009384:	f7f7 fbb2 	bl	8000aec <__aeabi_dcmplt>
 8009388:	2800      	cmp	r0, #0
 800938a:	d04e      	beq.n	800942a <_dtoa_r+0x24a>
 800938c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009390:	2300      	movs	r3, #0
 8009392:	930c      	str	r3, [sp, #48]	; 0x30
 8009394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009396:	1b5b      	subs	r3, r3, r5
 8009398:	1e5a      	subs	r2, r3, #1
 800939a:	bf45      	ittet	mi
 800939c:	f1c3 0301 	rsbmi	r3, r3, #1
 80093a0:	9305      	strmi	r3, [sp, #20]
 80093a2:	2300      	movpl	r3, #0
 80093a4:	2300      	movmi	r3, #0
 80093a6:	9206      	str	r2, [sp, #24]
 80093a8:	bf54      	ite	pl
 80093aa:	9305      	strpl	r3, [sp, #20]
 80093ac:	9306      	strmi	r3, [sp, #24]
 80093ae:	f1bb 0f00 	cmp.w	fp, #0
 80093b2:	db3c      	blt.n	800942e <_dtoa_r+0x24e>
 80093b4:	9b06      	ldr	r3, [sp, #24]
 80093b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80093ba:	445b      	add	r3, fp
 80093bc:	9306      	str	r3, [sp, #24]
 80093be:	2300      	movs	r3, #0
 80093c0:	9308      	str	r3, [sp, #32]
 80093c2:	9b07      	ldr	r3, [sp, #28]
 80093c4:	2b09      	cmp	r3, #9
 80093c6:	d868      	bhi.n	800949a <_dtoa_r+0x2ba>
 80093c8:	2b05      	cmp	r3, #5
 80093ca:	bfc4      	itt	gt
 80093cc:	3b04      	subgt	r3, #4
 80093ce:	9307      	strgt	r3, [sp, #28]
 80093d0:	9b07      	ldr	r3, [sp, #28]
 80093d2:	f1a3 0302 	sub.w	r3, r3, #2
 80093d6:	bfcc      	ite	gt
 80093d8:	2500      	movgt	r5, #0
 80093da:	2501      	movle	r5, #1
 80093dc:	2b03      	cmp	r3, #3
 80093de:	f200 8085 	bhi.w	80094ec <_dtoa_r+0x30c>
 80093e2:	e8df f003 	tbb	[pc, r3]
 80093e6:	3b2e      	.short	0x3b2e
 80093e8:	5839      	.short	0x5839
 80093ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80093ee:	441d      	add	r5, r3
 80093f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80093f4:	2b20      	cmp	r3, #32
 80093f6:	bfc1      	itttt	gt
 80093f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80093fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8009400:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009404:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009408:	bfd6      	itet	le
 800940a:	f1c3 0320 	rsble	r3, r3, #32
 800940e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009412:	fa06 f003 	lslle.w	r0, r6, r3
 8009416:	f7f7 f87d 	bl	8000514 <__aeabi_ui2d>
 800941a:	2201      	movs	r2, #1
 800941c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009420:	3d01      	subs	r5, #1
 8009422:	920e      	str	r2, [sp, #56]	; 0x38
 8009424:	e76f      	b.n	8009306 <_dtoa_r+0x126>
 8009426:	2301      	movs	r3, #1
 8009428:	e7b3      	b.n	8009392 <_dtoa_r+0x1b2>
 800942a:	900c      	str	r0, [sp, #48]	; 0x30
 800942c:	e7b2      	b.n	8009394 <_dtoa_r+0x1b4>
 800942e:	9b05      	ldr	r3, [sp, #20]
 8009430:	eba3 030b 	sub.w	r3, r3, fp
 8009434:	9305      	str	r3, [sp, #20]
 8009436:	f1cb 0300 	rsb	r3, fp, #0
 800943a:	9308      	str	r3, [sp, #32]
 800943c:	2300      	movs	r3, #0
 800943e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009440:	e7bf      	b.n	80093c2 <_dtoa_r+0x1e2>
 8009442:	2300      	movs	r3, #0
 8009444:	9309      	str	r3, [sp, #36]	; 0x24
 8009446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009448:	2b00      	cmp	r3, #0
 800944a:	dc52      	bgt.n	80094f2 <_dtoa_r+0x312>
 800944c:	2301      	movs	r3, #1
 800944e:	9301      	str	r3, [sp, #4]
 8009450:	9304      	str	r3, [sp, #16]
 8009452:	461a      	mov	r2, r3
 8009454:	920a      	str	r2, [sp, #40]	; 0x28
 8009456:	e00b      	b.n	8009470 <_dtoa_r+0x290>
 8009458:	2301      	movs	r3, #1
 800945a:	e7f3      	b.n	8009444 <_dtoa_r+0x264>
 800945c:	2300      	movs	r3, #0
 800945e:	9309      	str	r3, [sp, #36]	; 0x24
 8009460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009462:	445b      	add	r3, fp
 8009464:	9301      	str	r3, [sp, #4]
 8009466:	3301      	adds	r3, #1
 8009468:	2b01      	cmp	r3, #1
 800946a:	9304      	str	r3, [sp, #16]
 800946c:	bfb8      	it	lt
 800946e:	2301      	movlt	r3, #1
 8009470:	69e0      	ldr	r0, [r4, #28]
 8009472:	2100      	movs	r1, #0
 8009474:	2204      	movs	r2, #4
 8009476:	f102 0614 	add.w	r6, r2, #20
 800947a:	429e      	cmp	r6, r3
 800947c:	d93d      	bls.n	80094fa <_dtoa_r+0x31a>
 800947e:	6041      	str	r1, [r0, #4]
 8009480:	4620      	mov	r0, r4
 8009482:	f000 fd9f 	bl	8009fc4 <_Balloc>
 8009486:	9000      	str	r0, [sp, #0]
 8009488:	2800      	cmp	r0, #0
 800948a:	d139      	bne.n	8009500 <_dtoa_r+0x320>
 800948c:	4b16      	ldr	r3, [pc, #88]	; (80094e8 <_dtoa_r+0x308>)
 800948e:	4602      	mov	r2, r0
 8009490:	f240 11af 	movw	r1, #431	; 0x1af
 8009494:	e6bd      	b.n	8009212 <_dtoa_r+0x32>
 8009496:	2301      	movs	r3, #1
 8009498:	e7e1      	b.n	800945e <_dtoa_r+0x27e>
 800949a:	2501      	movs	r5, #1
 800949c:	2300      	movs	r3, #0
 800949e:	9307      	str	r3, [sp, #28]
 80094a0:	9509      	str	r5, [sp, #36]	; 0x24
 80094a2:	f04f 33ff 	mov.w	r3, #4294967295
 80094a6:	9301      	str	r3, [sp, #4]
 80094a8:	9304      	str	r3, [sp, #16]
 80094aa:	2200      	movs	r2, #0
 80094ac:	2312      	movs	r3, #18
 80094ae:	e7d1      	b.n	8009454 <_dtoa_r+0x274>
 80094b0:	636f4361 	.word	0x636f4361
 80094b4:	3fd287a7 	.word	0x3fd287a7
 80094b8:	8b60c8b3 	.word	0x8b60c8b3
 80094bc:	3fc68a28 	.word	0x3fc68a28
 80094c0:	509f79fb 	.word	0x509f79fb
 80094c4:	3fd34413 	.word	0x3fd34413
 80094c8:	0800d3f0 	.word	0x0800d3f0
 80094cc:	0800d4dc 	.word	0x0800d4dc
 80094d0:	7ff00000 	.word	0x7ff00000
 80094d4:	0800d4d8 	.word	0x0800d4d8
 80094d8:	0800d4cf 	.word	0x0800d4cf
 80094dc:	0800d470 	.word	0x0800d470
 80094e0:	3ff80000 	.word	0x3ff80000
 80094e4:	0800d5c8 	.word	0x0800d5c8
 80094e8:	0800d534 	.word	0x0800d534
 80094ec:	2301      	movs	r3, #1
 80094ee:	9309      	str	r3, [sp, #36]	; 0x24
 80094f0:	e7d7      	b.n	80094a2 <_dtoa_r+0x2c2>
 80094f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094f4:	9301      	str	r3, [sp, #4]
 80094f6:	9304      	str	r3, [sp, #16]
 80094f8:	e7ba      	b.n	8009470 <_dtoa_r+0x290>
 80094fa:	3101      	adds	r1, #1
 80094fc:	0052      	lsls	r2, r2, #1
 80094fe:	e7ba      	b.n	8009476 <_dtoa_r+0x296>
 8009500:	69e3      	ldr	r3, [r4, #28]
 8009502:	9a00      	ldr	r2, [sp, #0]
 8009504:	601a      	str	r2, [r3, #0]
 8009506:	9b04      	ldr	r3, [sp, #16]
 8009508:	2b0e      	cmp	r3, #14
 800950a:	f200 80a8 	bhi.w	800965e <_dtoa_r+0x47e>
 800950e:	2d00      	cmp	r5, #0
 8009510:	f000 80a5 	beq.w	800965e <_dtoa_r+0x47e>
 8009514:	f1bb 0f00 	cmp.w	fp, #0
 8009518:	dd38      	ble.n	800958c <_dtoa_r+0x3ac>
 800951a:	4bc0      	ldr	r3, [pc, #768]	; (800981c <_dtoa_r+0x63c>)
 800951c:	f00b 020f 	and.w	r2, fp, #15
 8009520:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009524:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009528:	e9d3 6700 	ldrd	r6, r7, [r3]
 800952c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009530:	d019      	beq.n	8009566 <_dtoa_r+0x386>
 8009532:	4bbb      	ldr	r3, [pc, #748]	; (8009820 <_dtoa_r+0x640>)
 8009534:	ec51 0b18 	vmov	r0, r1, d8
 8009538:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800953c:	f7f7 f98e 	bl	800085c <__aeabi_ddiv>
 8009540:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009544:	f008 080f 	and.w	r8, r8, #15
 8009548:	2503      	movs	r5, #3
 800954a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009820 <_dtoa_r+0x640>
 800954e:	f1b8 0f00 	cmp.w	r8, #0
 8009552:	d10a      	bne.n	800956a <_dtoa_r+0x38a>
 8009554:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009558:	4632      	mov	r2, r6
 800955a:	463b      	mov	r3, r7
 800955c:	f7f7 f97e 	bl	800085c <__aeabi_ddiv>
 8009560:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009564:	e02b      	b.n	80095be <_dtoa_r+0x3de>
 8009566:	2502      	movs	r5, #2
 8009568:	e7ef      	b.n	800954a <_dtoa_r+0x36a>
 800956a:	f018 0f01 	tst.w	r8, #1
 800956e:	d008      	beq.n	8009582 <_dtoa_r+0x3a2>
 8009570:	4630      	mov	r0, r6
 8009572:	4639      	mov	r1, r7
 8009574:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009578:	f7f7 f846 	bl	8000608 <__aeabi_dmul>
 800957c:	3501      	adds	r5, #1
 800957e:	4606      	mov	r6, r0
 8009580:	460f      	mov	r7, r1
 8009582:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009586:	f109 0908 	add.w	r9, r9, #8
 800958a:	e7e0      	b.n	800954e <_dtoa_r+0x36e>
 800958c:	f000 809f 	beq.w	80096ce <_dtoa_r+0x4ee>
 8009590:	f1cb 0600 	rsb	r6, fp, #0
 8009594:	4ba1      	ldr	r3, [pc, #644]	; (800981c <_dtoa_r+0x63c>)
 8009596:	4fa2      	ldr	r7, [pc, #648]	; (8009820 <_dtoa_r+0x640>)
 8009598:	f006 020f 	and.w	r2, r6, #15
 800959c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a4:	ec51 0b18 	vmov	r0, r1, d8
 80095a8:	f7f7 f82e 	bl	8000608 <__aeabi_dmul>
 80095ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095b0:	1136      	asrs	r6, r6, #4
 80095b2:	2300      	movs	r3, #0
 80095b4:	2502      	movs	r5, #2
 80095b6:	2e00      	cmp	r6, #0
 80095b8:	d17e      	bne.n	80096b8 <_dtoa_r+0x4d8>
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1d0      	bne.n	8009560 <_dtoa_r+0x380>
 80095be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 8084 	beq.w	80096d2 <_dtoa_r+0x4f2>
 80095ca:	4b96      	ldr	r3, [pc, #600]	; (8009824 <_dtoa_r+0x644>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	4640      	mov	r0, r8
 80095d0:	4649      	mov	r1, r9
 80095d2:	f7f7 fa8b 	bl	8000aec <__aeabi_dcmplt>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	d07b      	beq.n	80096d2 <_dtoa_r+0x4f2>
 80095da:	9b04      	ldr	r3, [sp, #16]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d078      	beq.n	80096d2 <_dtoa_r+0x4f2>
 80095e0:	9b01      	ldr	r3, [sp, #4]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	dd39      	ble.n	800965a <_dtoa_r+0x47a>
 80095e6:	4b90      	ldr	r3, [pc, #576]	; (8009828 <_dtoa_r+0x648>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	4640      	mov	r0, r8
 80095ec:	4649      	mov	r1, r9
 80095ee:	f7f7 f80b 	bl	8000608 <__aeabi_dmul>
 80095f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095f6:	9e01      	ldr	r6, [sp, #4]
 80095f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80095fc:	3501      	adds	r5, #1
 80095fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009602:	4628      	mov	r0, r5
 8009604:	f7f6 ff96 	bl	8000534 <__aeabi_i2d>
 8009608:	4642      	mov	r2, r8
 800960a:	464b      	mov	r3, r9
 800960c:	f7f6 fffc 	bl	8000608 <__aeabi_dmul>
 8009610:	4b86      	ldr	r3, [pc, #536]	; (800982c <_dtoa_r+0x64c>)
 8009612:	2200      	movs	r2, #0
 8009614:	f7f6 fe42 	bl	800029c <__adddf3>
 8009618:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800961c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009620:	9303      	str	r3, [sp, #12]
 8009622:	2e00      	cmp	r6, #0
 8009624:	d158      	bne.n	80096d8 <_dtoa_r+0x4f8>
 8009626:	4b82      	ldr	r3, [pc, #520]	; (8009830 <_dtoa_r+0x650>)
 8009628:	2200      	movs	r2, #0
 800962a:	4640      	mov	r0, r8
 800962c:	4649      	mov	r1, r9
 800962e:	f7f6 fe33 	bl	8000298 <__aeabi_dsub>
 8009632:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009636:	4680      	mov	r8, r0
 8009638:	4689      	mov	r9, r1
 800963a:	f7f7 fa75 	bl	8000b28 <__aeabi_dcmpgt>
 800963e:	2800      	cmp	r0, #0
 8009640:	f040 8296 	bne.w	8009b70 <_dtoa_r+0x990>
 8009644:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009648:	4640      	mov	r0, r8
 800964a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800964e:	4649      	mov	r1, r9
 8009650:	f7f7 fa4c 	bl	8000aec <__aeabi_dcmplt>
 8009654:	2800      	cmp	r0, #0
 8009656:	f040 8289 	bne.w	8009b6c <_dtoa_r+0x98c>
 800965a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800965e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009660:	2b00      	cmp	r3, #0
 8009662:	f2c0 814e 	blt.w	8009902 <_dtoa_r+0x722>
 8009666:	f1bb 0f0e 	cmp.w	fp, #14
 800966a:	f300 814a 	bgt.w	8009902 <_dtoa_r+0x722>
 800966e:	4b6b      	ldr	r3, [pc, #428]	; (800981c <_dtoa_r+0x63c>)
 8009670:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009674:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800967a:	2b00      	cmp	r3, #0
 800967c:	f280 80dc 	bge.w	8009838 <_dtoa_r+0x658>
 8009680:	9b04      	ldr	r3, [sp, #16]
 8009682:	2b00      	cmp	r3, #0
 8009684:	f300 80d8 	bgt.w	8009838 <_dtoa_r+0x658>
 8009688:	f040 826f 	bne.w	8009b6a <_dtoa_r+0x98a>
 800968c:	4b68      	ldr	r3, [pc, #416]	; (8009830 <_dtoa_r+0x650>)
 800968e:	2200      	movs	r2, #0
 8009690:	4640      	mov	r0, r8
 8009692:	4649      	mov	r1, r9
 8009694:	f7f6 ffb8 	bl	8000608 <__aeabi_dmul>
 8009698:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800969c:	f7f7 fa3a 	bl	8000b14 <__aeabi_dcmpge>
 80096a0:	9e04      	ldr	r6, [sp, #16]
 80096a2:	4637      	mov	r7, r6
 80096a4:	2800      	cmp	r0, #0
 80096a6:	f040 8245 	bne.w	8009b34 <_dtoa_r+0x954>
 80096aa:	9d00      	ldr	r5, [sp, #0]
 80096ac:	2331      	movs	r3, #49	; 0x31
 80096ae:	f805 3b01 	strb.w	r3, [r5], #1
 80096b2:	f10b 0b01 	add.w	fp, fp, #1
 80096b6:	e241      	b.n	8009b3c <_dtoa_r+0x95c>
 80096b8:	07f2      	lsls	r2, r6, #31
 80096ba:	d505      	bpl.n	80096c8 <_dtoa_r+0x4e8>
 80096bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096c0:	f7f6 ffa2 	bl	8000608 <__aeabi_dmul>
 80096c4:	3501      	adds	r5, #1
 80096c6:	2301      	movs	r3, #1
 80096c8:	1076      	asrs	r6, r6, #1
 80096ca:	3708      	adds	r7, #8
 80096cc:	e773      	b.n	80095b6 <_dtoa_r+0x3d6>
 80096ce:	2502      	movs	r5, #2
 80096d0:	e775      	b.n	80095be <_dtoa_r+0x3de>
 80096d2:	9e04      	ldr	r6, [sp, #16]
 80096d4:	465f      	mov	r7, fp
 80096d6:	e792      	b.n	80095fe <_dtoa_r+0x41e>
 80096d8:	9900      	ldr	r1, [sp, #0]
 80096da:	4b50      	ldr	r3, [pc, #320]	; (800981c <_dtoa_r+0x63c>)
 80096dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096e0:	4431      	add	r1, r6
 80096e2:	9102      	str	r1, [sp, #8]
 80096e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096e6:	eeb0 9a47 	vmov.f32	s18, s14
 80096ea:	eef0 9a67 	vmov.f32	s19, s15
 80096ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80096f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80096f6:	2900      	cmp	r1, #0
 80096f8:	d044      	beq.n	8009784 <_dtoa_r+0x5a4>
 80096fa:	494e      	ldr	r1, [pc, #312]	; (8009834 <_dtoa_r+0x654>)
 80096fc:	2000      	movs	r0, #0
 80096fe:	f7f7 f8ad 	bl	800085c <__aeabi_ddiv>
 8009702:	ec53 2b19 	vmov	r2, r3, d9
 8009706:	f7f6 fdc7 	bl	8000298 <__aeabi_dsub>
 800970a:	9d00      	ldr	r5, [sp, #0]
 800970c:	ec41 0b19 	vmov	d9, r0, r1
 8009710:	4649      	mov	r1, r9
 8009712:	4640      	mov	r0, r8
 8009714:	f7f7 fa28 	bl	8000b68 <__aeabi_d2iz>
 8009718:	4606      	mov	r6, r0
 800971a:	f7f6 ff0b 	bl	8000534 <__aeabi_i2d>
 800971e:	4602      	mov	r2, r0
 8009720:	460b      	mov	r3, r1
 8009722:	4640      	mov	r0, r8
 8009724:	4649      	mov	r1, r9
 8009726:	f7f6 fdb7 	bl	8000298 <__aeabi_dsub>
 800972a:	3630      	adds	r6, #48	; 0x30
 800972c:	f805 6b01 	strb.w	r6, [r5], #1
 8009730:	ec53 2b19 	vmov	r2, r3, d9
 8009734:	4680      	mov	r8, r0
 8009736:	4689      	mov	r9, r1
 8009738:	f7f7 f9d8 	bl	8000aec <__aeabi_dcmplt>
 800973c:	2800      	cmp	r0, #0
 800973e:	d164      	bne.n	800980a <_dtoa_r+0x62a>
 8009740:	4642      	mov	r2, r8
 8009742:	464b      	mov	r3, r9
 8009744:	4937      	ldr	r1, [pc, #220]	; (8009824 <_dtoa_r+0x644>)
 8009746:	2000      	movs	r0, #0
 8009748:	f7f6 fda6 	bl	8000298 <__aeabi_dsub>
 800974c:	ec53 2b19 	vmov	r2, r3, d9
 8009750:	f7f7 f9cc 	bl	8000aec <__aeabi_dcmplt>
 8009754:	2800      	cmp	r0, #0
 8009756:	f040 80b6 	bne.w	80098c6 <_dtoa_r+0x6e6>
 800975a:	9b02      	ldr	r3, [sp, #8]
 800975c:	429d      	cmp	r5, r3
 800975e:	f43f af7c 	beq.w	800965a <_dtoa_r+0x47a>
 8009762:	4b31      	ldr	r3, [pc, #196]	; (8009828 <_dtoa_r+0x648>)
 8009764:	ec51 0b19 	vmov	r0, r1, d9
 8009768:	2200      	movs	r2, #0
 800976a:	f7f6 ff4d 	bl	8000608 <__aeabi_dmul>
 800976e:	4b2e      	ldr	r3, [pc, #184]	; (8009828 <_dtoa_r+0x648>)
 8009770:	ec41 0b19 	vmov	d9, r0, r1
 8009774:	2200      	movs	r2, #0
 8009776:	4640      	mov	r0, r8
 8009778:	4649      	mov	r1, r9
 800977a:	f7f6 ff45 	bl	8000608 <__aeabi_dmul>
 800977e:	4680      	mov	r8, r0
 8009780:	4689      	mov	r9, r1
 8009782:	e7c5      	b.n	8009710 <_dtoa_r+0x530>
 8009784:	ec51 0b17 	vmov	r0, r1, d7
 8009788:	f7f6 ff3e 	bl	8000608 <__aeabi_dmul>
 800978c:	9b02      	ldr	r3, [sp, #8]
 800978e:	9d00      	ldr	r5, [sp, #0]
 8009790:	930f      	str	r3, [sp, #60]	; 0x3c
 8009792:	ec41 0b19 	vmov	d9, r0, r1
 8009796:	4649      	mov	r1, r9
 8009798:	4640      	mov	r0, r8
 800979a:	f7f7 f9e5 	bl	8000b68 <__aeabi_d2iz>
 800979e:	4606      	mov	r6, r0
 80097a0:	f7f6 fec8 	bl	8000534 <__aeabi_i2d>
 80097a4:	3630      	adds	r6, #48	; 0x30
 80097a6:	4602      	mov	r2, r0
 80097a8:	460b      	mov	r3, r1
 80097aa:	4640      	mov	r0, r8
 80097ac:	4649      	mov	r1, r9
 80097ae:	f7f6 fd73 	bl	8000298 <__aeabi_dsub>
 80097b2:	f805 6b01 	strb.w	r6, [r5], #1
 80097b6:	9b02      	ldr	r3, [sp, #8]
 80097b8:	429d      	cmp	r5, r3
 80097ba:	4680      	mov	r8, r0
 80097bc:	4689      	mov	r9, r1
 80097be:	f04f 0200 	mov.w	r2, #0
 80097c2:	d124      	bne.n	800980e <_dtoa_r+0x62e>
 80097c4:	4b1b      	ldr	r3, [pc, #108]	; (8009834 <_dtoa_r+0x654>)
 80097c6:	ec51 0b19 	vmov	r0, r1, d9
 80097ca:	f7f6 fd67 	bl	800029c <__adddf3>
 80097ce:	4602      	mov	r2, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	4640      	mov	r0, r8
 80097d4:	4649      	mov	r1, r9
 80097d6:	f7f7 f9a7 	bl	8000b28 <__aeabi_dcmpgt>
 80097da:	2800      	cmp	r0, #0
 80097dc:	d173      	bne.n	80098c6 <_dtoa_r+0x6e6>
 80097de:	ec53 2b19 	vmov	r2, r3, d9
 80097e2:	4914      	ldr	r1, [pc, #80]	; (8009834 <_dtoa_r+0x654>)
 80097e4:	2000      	movs	r0, #0
 80097e6:	f7f6 fd57 	bl	8000298 <__aeabi_dsub>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	4640      	mov	r0, r8
 80097f0:	4649      	mov	r1, r9
 80097f2:	f7f7 f97b 	bl	8000aec <__aeabi_dcmplt>
 80097f6:	2800      	cmp	r0, #0
 80097f8:	f43f af2f 	beq.w	800965a <_dtoa_r+0x47a>
 80097fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80097fe:	1e6b      	subs	r3, r5, #1
 8009800:	930f      	str	r3, [sp, #60]	; 0x3c
 8009802:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009806:	2b30      	cmp	r3, #48	; 0x30
 8009808:	d0f8      	beq.n	80097fc <_dtoa_r+0x61c>
 800980a:	46bb      	mov	fp, r7
 800980c:	e04a      	b.n	80098a4 <_dtoa_r+0x6c4>
 800980e:	4b06      	ldr	r3, [pc, #24]	; (8009828 <_dtoa_r+0x648>)
 8009810:	f7f6 fefa 	bl	8000608 <__aeabi_dmul>
 8009814:	4680      	mov	r8, r0
 8009816:	4689      	mov	r9, r1
 8009818:	e7bd      	b.n	8009796 <_dtoa_r+0x5b6>
 800981a:	bf00      	nop
 800981c:	0800d5c8 	.word	0x0800d5c8
 8009820:	0800d5a0 	.word	0x0800d5a0
 8009824:	3ff00000 	.word	0x3ff00000
 8009828:	40240000 	.word	0x40240000
 800982c:	401c0000 	.word	0x401c0000
 8009830:	40140000 	.word	0x40140000
 8009834:	3fe00000 	.word	0x3fe00000
 8009838:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800983c:	9d00      	ldr	r5, [sp, #0]
 800983e:	4642      	mov	r2, r8
 8009840:	464b      	mov	r3, r9
 8009842:	4630      	mov	r0, r6
 8009844:	4639      	mov	r1, r7
 8009846:	f7f7 f809 	bl	800085c <__aeabi_ddiv>
 800984a:	f7f7 f98d 	bl	8000b68 <__aeabi_d2iz>
 800984e:	9001      	str	r0, [sp, #4]
 8009850:	f7f6 fe70 	bl	8000534 <__aeabi_i2d>
 8009854:	4642      	mov	r2, r8
 8009856:	464b      	mov	r3, r9
 8009858:	f7f6 fed6 	bl	8000608 <__aeabi_dmul>
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	4630      	mov	r0, r6
 8009862:	4639      	mov	r1, r7
 8009864:	f7f6 fd18 	bl	8000298 <__aeabi_dsub>
 8009868:	9e01      	ldr	r6, [sp, #4]
 800986a:	9f04      	ldr	r7, [sp, #16]
 800986c:	3630      	adds	r6, #48	; 0x30
 800986e:	f805 6b01 	strb.w	r6, [r5], #1
 8009872:	9e00      	ldr	r6, [sp, #0]
 8009874:	1bae      	subs	r6, r5, r6
 8009876:	42b7      	cmp	r7, r6
 8009878:	4602      	mov	r2, r0
 800987a:	460b      	mov	r3, r1
 800987c:	d134      	bne.n	80098e8 <_dtoa_r+0x708>
 800987e:	f7f6 fd0d 	bl	800029c <__adddf3>
 8009882:	4642      	mov	r2, r8
 8009884:	464b      	mov	r3, r9
 8009886:	4606      	mov	r6, r0
 8009888:	460f      	mov	r7, r1
 800988a:	f7f7 f94d 	bl	8000b28 <__aeabi_dcmpgt>
 800988e:	b9c8      	cbnz	r0, 80098c4 <_dtoa_r+0x6e4>
 8009890:	4642      	mov	r2, r8
 8009892:	464b      	mov	r3, r9
 8009894:	4630      	mov	r0, r6
 8009896:	4639      	mov	r1, r7
 8009898:	f7f7 f91e 	bl	8000ad8 <__aeabi_dcmpeq>
 800989c:	b110      	cbz	r0, 80098a4 <_dtoa_r+0x6c4>
 800989e:	9b01      	ldr	r3, [sp, #4]
 80098a0:	07db      	lsls	r3, r3, #31
 80098a2:	d40f      	bmi.n	80098c4 <_dtoa_r+0x6e4>
 80098a4:	4651      	mov	r1, sl
 80098a6:	4620      	mov	r0, r4
 80098a8:	f000 fbcc 	bl	800a044 <_Bfree>
 80098ac:	2300      	movs	r3, #0
 80098ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098b0:	702b      	strb	r3, [r5, #0]
 80098b2:	f10b 0301 	add.w	r3, fp, #1
 80098b6:	6013      	str	r3, [r2, #0]
 80098b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f43f ace2 	beq.w	8009284 <_dtoa_r+0xa4>
 80098c0:	601d      	str	r5, [r3, #0]
 80098c2:	e4df      	b.n	8009284 <_dtoa_r+0xa4>
 80098c4:	465f      	mov	r7, fp
 80098c6:	462b      	mov	r3, r5
 80098c8:	461d      	mov	r5, r3
 80098ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098ce:	2a39      	cmp	r2, #57	; 0x39
 80098d0:	d106      	bne.n	80098e0 <_dtoa_r+0x700>
 80098d2:	9a00      	ldr	r2, [sp, #0]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d1f7      	bne.n	80098c8 <_dtoa_r+0x6e8>
 80098d8:	9900      	ldr	r1, [sp, #0]
 80098da:	2230      	movs	r2, #48	; 0x30
 80098dc:	3701      	adds	r7, #1
 80098de:	700a      	strb	r2, [r1, #0]
 80098e0:	781a      	ldrb	r2, [r3, #0]
 80098e2:	3201      	adds	r2, #1
 80098e4:	701a      	strb	r2, [r3, #0]
 80098e6:	e790      	b.n	800980a <_dtoa_r+0x62a>
 80098e8:	4ba3      	ldr	r3, [pc, #652]	; (8009b78 <_dtoa_r+0x998>)
 80098ea:	2200      	movs	r2, #0
 80098ec:	f7f6 fe8c 	bl	8000608 <__aeabi_dmul>
 80098f0:	2200      	movs	r2, #0
 80098f2:	2300      	movs	r3, #0
 80098f4:	4606      	mov	r6, r0
 80098f6:	460f      	mov	r7, r1
 80098f8:	f7f7 f8ee 	bl	8000ad8 <__aeabi_dcmpeq>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d09e      	beq.n	800983e <_dtoa_r+0x65e>
 8009900:	e7d0      	b.n	80098a4 <_dtoa_r+0x6c4>
 8009902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009904:	2a00      	cmp	r2, #0
 8009906:	f000 80ca 	beq.w	8009a9e <_dtoa_r+0x8be>
 800990a:	9a07      	ldr	r2, [sp, #28]
 800990c:	2a01      	cmp	r2, #1
 800990e:	f300 80ad 	bgt.w	8009a6c <_dtoa_r+0x88c>
 8009912:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009914:	2a00      	cmp	r2, #0
 8009916:	f000 80a5 	beq.w	8009a64 <_dtoa_r+0x884>
 800991a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800991e:	9e08      	ldr	r6, [sp, #32]
 8009920:	9d05      	ldr	r5, [sp, #20]
 8009922:	9a05      	ldr	r2, [sp, #20]
 8009924:	441a      	add	r2, r3
 8009926:	9205      	str	r2, [sp, #20]
 8009928:	9a06      	ldr	r2, [sp, #24]
 800992a:	2101      	movs	r1, #1
 800992c:	441a      	add	r2, r3
 800992e:	4620      	mov	r0, r4
 8009930:	9206      	str	r2, [sp, #24]
 8009932:	f000 fc3d 	bl	800a1b0 <__i2b>
 8009936:	4607      	mov	r7, r0
 8009938:	b165      	cbz	r5, 8009954 <_dtoa_r+0x774>
 800993a:	9b06      	ldr	r3, [sp, #24]
 800993c:	2b00      	cmp	r3, #0
 800993e:	dd09      	ble.n	8009954 <_dtoa_r+0x774>
 8009940:	42ab      	cmp	r3, r5
 8009942:	9a05      	ldr	r2, [sp, #20]
 8009944:	bfa8      	it	ge
 8009946:	462b      	movge	r3, r5
 8009948:	1ad2      	subs	r2, r2, r3
 800994a:	9205      	str	r2, [sp, #20]
 800994c:	9a06      	ldr	r2, [sp, #24]
 800994e:	1aed      	subs	r5, r5, r3
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	9306      	str	r3, [sp, #24]
 8009954:	9b08      	ldr	r3, [sp, #32]
 8009956:	b1f3      	cbz	r3, 8009996 <_dtoa_r+0x7b6>
 8009958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800995a:	2b00      	cmp	r3, #0
 800995c:	f000 80a3 	beq.w	8009aa6 <_dtoa_r+0x8c6>
 8009960:	2e00      	cmp	r6, #0
 8009962:	dd10      	ble.n	8009986 <_dtoa_r+0x7a6>
 8009964:	4639      	mov	r1, r7
 8009966:	4632      	mov	r2, r6
 8009968:	4620      	mov	r0, r4
 800996a:	f000 fce1 	bl	800a330 <__pow5mult>
 800996e:	4652      	mov	r2, sl
 8009970:	4601      	mov	r1, r0
 8009972:	4607      	mov	r7, r0
 8009974:	4620      	mov	r0, r4
 8009976:	f000 fc31 	bl	800a1dc <__multiply>
 800997a:	4651      	mov	r1, sl
 800997c:	4680      	mov	r8, r0
 800997e:	4620      	mov	r0, r4
 8009980:	f000 fb60 	bl	800a044 <_Bfree>
 8009984:	46c2      	mov	sl, r8
 8009986:	9b08      	ldr	r3, [sp, #32]
 8009988:	1b9a      	subs	r2, r3, r6
 800998a:	d004      	beq.n	8009996 <_dtoa_r+0x7b6>
 800998c:	4651      	mov	r1, sl
 800998e:	4620      	mov	r0, r4
 8009990:	f000 fcce 	bl	800a330 <__pow5mult>
 8009994:	4682      	mov	sl, r0
 8009996:	2101      	movs	r1, #1
 8009998:	4620      	mov	r0, r4
 800999a:	f000 fc09 	bl	800a1b0 <__i2b>
 800999e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	4606      	mov	r6, r0
 80099a4:	f340 8081 	ble.w	8009aaa <_dtoa_r+0x8ca>
 80099a8:	461a      	mov	r2, r3
 80099aa:	4601      	mov	r1, r0
 80099ac:	4620      	mov	r0, r4
 80099ae:	f000 fcbf 	bl	800a330 <__pow5mult>
 80099b2:	9b07      	ldr	r3, [sp, #28]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	4606      	mov	r6, r0
 80099b8:	dd7a      	ble.n	8009ab0 <_dtoa_r+0x8d0>
 80099ba:	f04f 0800 	mov.w	r8, #0
 80099be:	6933      	ldr	r3, [r6, #16]
 80099c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80099c4:	6918      	ldr	r0, [r3, #16]
 80099c6:	f000 fba5 	bl	800a114 <__hi0bits>
 80099ca:	f1c0 0020 	rsb	r0, r0, #32
 80099ce:	9b06      	ldr	r3, [sp, #24]
 80099d0:	4418      	add	r0, r3
 80099d2:	f010 001f 	ands.w	r0, r0, #31
 80099d6:	f000 8094 	beq.w	8009b02 <_dtoa_r+0x922>
 80099da:	f1c0 0320 	rsb	r3, r0, #32
 80099de:	2b04      	cmp	r3, #4
 80099e0:	f340 8085 	ble.w	8009aee <_dtoa_r+0x90e>
 80099e4:	9b05      	ldr	r3, [sp, #20]
 80099e6:	f1c0 001c 	rsb	r0, r0, #28
 80099ea:	4403      	add	r3, r0
 80099ec:	9305      	str	r3, [sp, #20]
 80099ee:	9b06      	ldr	r3, [sp, #24]
 80099f0:	4403      	add	r3, r0
 80099f2:	4405      	add	r5, r0
 80099f4:	9306      	str	r3, [sp, #24]
 80099f6:	9b05      	ldr	r3, [sp, #20]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	dd05      	ble.n	8009a08 <_dtoa_r+0x828>
 80099fc:	4651      	mov	r1, sl
 80099fe:	461a      	mov	r2, r3
 8009a00:	4620      	mov	r0, r4
 8009a02:	f000 fcef 	bl	800a3e4 <__lshift>
 8009a06:	4682      	mov	sl, r0
 8009a08:	9b06      	ldr	r3, [sp, #24]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	dd05      	ble.n	8009a1a <_dtoa_r+0x83a>
 8009a0e:	4631      	mov	r1, r6
 8009a10:	461a      	mov	r2, r3
 8009a12:	4620      	mov	r0, r4
 8009a14:	f000 fce6 	bl	800a3e4 <__lshift>
 8009a18:	4606      	mov	r6, r0
 8009a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d072      	beq.n	8009b06 <_dtoa_r+0x926>
 8009a20:	4631      	mov	r1, r6
 8009a22:	4650      	mov	r0, sl
 8009a24:	f000 fd4a 	bl	800a4bc <__mcmp>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	da6c      	bge.n	8009b06 <_dtoa_r+0x926>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	4651      	mov	r1, sl
 8009a30:	220a      	movs	r2, #10
 8009a32:	4620      	mov	r0, r4
 8009a34:	f000 fb28 	bl	800a088 <__multadd>
 8009a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a3e:	4682      	mov	sl, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f000 81b0 	beq.w	8009da6 <_dtoa_r+0xbc6>
 8009a46:	2300      	movs	r3, #0
 8009a48:	4639      	mov	r1, r7
 8009a4a:	220a      	movs	r2, #10
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	f000 fb1b 	bl	800a088 <__multadd>
 8009a52:	9b01      	ldr	r3, [sp, #4]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	4607      	mov	r7, r0
 8009a58:	f300 8096 	bgt.w	8009b88 <_dtoa_r+0x9a8>
 8009a5c:	9b07      	ldr	r3, [sp, #28]
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	dc59      	bgt.n	8009b16 <_dtoa_r+0x936>
 8009a62:	e091      	b.n	8009b88 <_dtoa_r+0x9a8>
 8009a64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009a6a:	e758      	b.n	800991e <_dtoa_r+0x73e>
 8009a6c:	9b04      	ldr	r3, [sp, #16]
 8009a6e:	1e5e      	subs	r6, r3, #1
 8009a70:	9b08      	ldr	r3, [sp, #32]
 8009a72:	42b3      	cmp	r3, r6
 8009a74:	bfbf      	itttt	lt
 8009a76:	9b08      	ldrlt	r3, [sp, #32]
 8009a78:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009a7a:	9608      	strlt	r6, [sp, #32]
 8009a7c:	1af3      	sublt	r3, r6, r3
 8009a7e:	bfb4      	ite	lt
 8009a80:	18d2      	addlt	r2, r2, r3
 8009a82:	1b9e      	subge	r6, r3, r6
 8009a84:	9b04      	ldr	r3, [sp, #16]
 8009a86:	bfbc      	itt	lt
 8009a88:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009a8a:	2600      	movlt	r6, #0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	bfb7      	itett	lt
 8009a90:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009a94:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009a98:	1a9d      	sublt	r5, r3, r2
 8009a9a:	2300      	movlt	r3, #0
 8009a9c:	e741      	b.n	8009922 <_dtoa_r+0x742>
 8009a9e:	9e08      	ldr	r6, [sp, #32]
 8009aa0:	9d05      	ldr	r5, [sp, #20]
 8009aa2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009aa4:	e748      	b.n	8009938 <_dtoa_r+0x758>
 8009aa6:	9a08      	ldr	r2, [sp, #32]
 8009aa8:	e770      	b.n	800998c <_dtoa_r+0x7ac>
 8009aaa:	9b07      	ldr	r3, [sp, #28]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	dc19      	bgt.n	8009ae4 <_dtoa_r+0x904>
 8009ab0:	9b02      	ldr	r3, [sp, #8]
 8009ab2:	b9bb      	cbnz	r3, 8009ae4 <_dtoa_r+0x904>
 8009ab4:	9b03      	ldr	r3, [sp, #12]
 8009ab6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009aba:	b99b      	cbnz	r3, 8009ae4 <_dtoa_r+0x904>
 8009abc:	9b03      	ldr	r3, [sp, #12]
 8009abe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ac2:	0d1b      	lsrs	r3, r3, #20
 8009ac4:	051b      	lsls	r3, r3, #20
 8009ac6:	b183      	cbz	r3, 8009aea <_dtoa_r+0x90a>
 8009ac8:	9b05      	ldr	r3, [sp, #20]
 8009aca:	3301      	adds	r3, #1
 8009acc:	9305      	str	r3, [sp, #20]
 8009ace:	9b06      	ldr	r3, [sp, #24]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	9306      	str	r3, [sp, #24]
 8009ad4:	f04f 0801 	mov.w	r8, #1
 8009ad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f47f af6f 	bne.w	80099be <_dtoa_r+0x7de>
 8009ae0:	2001      	movs	r0, #1
 8009ae2:	e774      	b.n	80099ce <_dtoa_r+0x7ee>
 8009ae4:	f04f 0800 	mov.w	r8, #0
 8009ae8:	e7f6      	b.n	8009ad8 <_dtoa_r+0x8f8>
 8009aea:	4698      	mov	r8, r3
 8009aec:	e7f4      	b.n	8009ad8 <_dtoa_r+0x8f8>
 8009aee:	d082      	beq.n	80099f6 <_dtoa_r+0x816>
 8009af0:	9a05      	ldr	r2, [sp, #20]
 8009af2:	331c      	adds	r3, #28
 8009af4:	441a      	add	r2, r3
 8009af6:	9205      	str	r2, [sp, #20]
 8009af8:	9a06      	ldr	r2, [sp, #24]
 8009afa:	441a      	add	r2, r3
 8009afc:	441d      	add	r5, r3
 8009afe:	9206      	str	r2, [sp, #24]
 8009b00:	e779      	b.n	80099f6 <_dtoa_r+0x816>
 8009b02:	4603      	mov	r3, r0
 8009b04:	e7f4      	b.n	8009af0 <_dtoa_r+0x910>
 8009b06:	9b04      	ldr	r3, [sp, #16]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	dc37      	bgt.n	8009b7c <_dtoa_r+0x99c>
 8009b0c:	9b07      	ldr	r3, [sp, #28]
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	dd34      	ble.n	8009b7c <_dtoa_r+0x99c>
 8009b12:	9b04      	ldr	r3, [sp, #16]
 8009b14:	9301      	str	r3, [sp, #4]
 8009b16:	9b01      	ldr	r3, [sp, #4]
 8009b18:	b963      	cbnz	r3, 8009b34 <_dtoa_r+0x954>
 8009b1a:	4631      	mov	r1, r6
 8009b1c:	2205      	movs	r2, #5
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f000 fab2 	bl	800a088 <__multadd>
 8009b24:	4601      	mov	r1, r0
 8009b26:	4606      	mov	r6, r0
 8009b28:	4650      	mov	r0, sl
 8009b2a:	f000 fcc7 	bl	800a4bc <__mcmp>
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	f73f adbb 	bgt.w	80096aa <_dtoa_r+0x4ca>
 8009b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b36:	9d00      	ldr	r5, [sp, #0]
 8009b38:	ea6f 0b03 	mvn.w	fp, r3
 8009b3c:	f04f 0800 	mov.w	r8, #0
 8009b40:	4631      	mov	r1, r6
 8009b42:	4620      	mov	r0, r4
 8009b44:	f000 fa7e 	bl	800a044 <_Bfree>
 8009b48:	2f00      	cmp	r7, #0
 8009b4a:	f43f aeab 	beq.w	80098a4 <_dtoa_r+0x6c4>
 8009b4e:	f1b8 0f00 	cmp.w	r8, #0
 8009b52:	d005      	beq.n	8009b60 <_dtoa_r+0x980>
 8009b54:	45b8      	cmp	r8, r7
 8009b56:	d003      	beq.n	8009b60 <_dtoa_r+0x980>
 8009b58:	4641      	mov	r1, r8
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f000 fa72 	bl	800a044 <_Bfree>
 8009b60:	4639      	mov	r1, r7
 8009b62:	4620      	mov	r0, r4
 8009b64:	f000 fa6e 	bl	800a044 <_Bfree>
 8009b68:	e69c      	b.n	80098a4 <_dtoa_r+0x6c4>
 8009b6a:	2600      	movs	r6, #0
 8009b6c:	4637      	mov	r7, r6
 8009b6e:	e7e1      	b.n	8009b34 <_dtoa_r+0x954>
 8009b70:	46bb      	mov	fp, r7
 8009b72:	4637      	mov	r7, r6
 8009b74:	e599      	b.n	80096aa <_dtoa_r+0x4ca>
 8009b76:	bf00      	nop
 8009b78:	40240000 	.word	0x40240000
 8009b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	f000 80c8 	beq.w	8009d14 <_dtoa_r+0xb34>
 8009b84:	9b04      	ldr	r3, [sp, #16]
 8009b86:	9301      	str	r3, [sp, #4]
 8009b88:	2d00      	cmp	r5, #0
 8009b8a:	dd05      	ble.n	8009b98 <_dtoa_r+0x9b8>
 8009b8c:	4639      	mov	r1, r7
 8009b8e:	462a      	mov	r2, r5
 8009b90:	4620      	mov	r0, r4
 8009b92:	f000 fc27 	bl	800a3e4 <__lshift>
 8009b96:	4607      	mov	r7, r0
 8009b98:	f1b8 0f00 	cmp.w	r8, #0
 8009b9c:	d05b      	beq.n	8009c56 <_dtoa_r+0xa76>
 8009b9e:	6879      	ldr	r1, [r7, #4]
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f000 fa0f 	bl	8009fc4 <_Balloc>
 8009ba6:	4605      	mov	r5, r0
 8009ba8:	b928      	cbnz	r0, 8009bb6 <_dtoa_r+0x9d6>
 8009baa:	4b83      	ldr	r3, [pc, #524]	; (8009db8 <_dtoa_r+0xbd8>)
 8009bac:	4602      	mov	r2, r0
 8009bae:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009bb2:	f7ff bb2e 	b.w	8009212 <_dtoa_r+0x32>
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	3202      	adds	r2, #2
 8009bba:	0092      	lsls	r2, r2, #2
 8009bbc:	f107 010c 	add.w	r1, r7, #12
 8009bc0:	300c      	adds	r0, #12
 8009bc2:	f7ff fa56 	bl	8009072 <memcpy>
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	4629      	mov	r1, r5
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f000 fc0a 	bl	800a3e4 <__lshift>
 8009bd0:	9b00      	ldr	r3, [sp, #0]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	9304      	str	r3, [sp, #16]
 8009bd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bda:	4413      	add	r3, r2
 8009bdc:	9308      	str	r3, [sp, #32]
 8009bde:	9b02      	ldr	r3, [sp, #8]
 8009be0:	f003 0301 	and.w	r3, r3, #1
 8009be4:	46b8      	mov	r8, r7
 8009be6:	9306      	str	r3, [sp, #24]
 8009be8:	4607      	mov	r7, r0
 8009bea:	9b04      	ldr	r3, [sp, #16]
 8009bec:	4631      	mov	r1, r6
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	4650      	mov	r0, sl
 8009bf2:	9301      	str	r3, [sp, #4]
 8009bf4:	f7ff fa6a 	bl	80090cc <quorem>
 8009bf8:	4641      	mov	r1, r8
 8009bfa:	9002      	str	r0, [sp, #8]
 8009bfc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009c00:	4650      	mov	r0, sl
 8009c02:	f000 fc5b 	bl	800a4bc <__mcmp>
 8009c06:	463a      	mov	r2, r7
 8009c08:	9005      	str	r0, [sp, #20]
 8009c0a:	4631      	mov	r1, r6
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	f000 fc71 	bl	800a4f4 <__mdiff>
 8009c12:	68c2      	ldr	r2, [r0, #12]
 8009c14:	4605      	mov	r5, r0
 8009c16:	bb02      	cbnz	r2, 8009c5a <_dtoa_r+0xa7a>
 8009c18:	4601      	mov	r1, r0
 8009c1a:	4650      	mov	r0, sl
 8009c1c:	f000 fc4e 	bl	800a4bc <__mcmp>
 8009c20:	4602      	mov	r2, r0
 8009c22:	4629      	mov	r1, r5
 8009c24:	4620      	mov	r0, r4
 8009c26:	9209      	str	r2, [sp, #36]	; 0x24
 8009c28:	f000 fa0c 	bl	800a044 <_Bfree>
 8009c2c:	9b07      	ldr	r3, [sp, #28]
 8009c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c30:	9d04      	ldr	r5, [sp, #16]
 8009c32:	ea43 0102 	orr.w	r1, r3, r2
 8009c36:	9b06      	ldr	r3, [sp, #24]
 8009c38:	4319      	orrs	r1, r3
 8009c3a:	d110      	bne.n	8009c5e <_dtoa_r+0xa7e>
 8009c3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009c40:	d029      	beq.n	8009c96 <_dtoa_r+0xab6>
 8009c42:	9b05      	ldr	r3, [sp, #20]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	dd02      	ble.n	8009c4e <_dtoa_r+0xa6e>
 8009c48:	9b02      	ldr	r3, [sp, #8]
 8009c4a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009c4e:	9b01      	ldr	r3, [sp, #4]
 8009c50:	f883 9000 	strb.w	r9, [r3]
 8009c54:	e774      	b.n	8009b40 <_dtoa_r+0x960>
 8009c56:	4638      	mov	r0, r7
 8009c58:	e7ba      	b.n	8009bd0 <_dtoa_r+0x9f0>
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	e7e1      	b.n	8009c22 <_dtoa_r+0xa42>
 8009c5e:	9b05      	ldr	r3, [sp, #20]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	db04      	blt.n	8009c6e <_dtoa_r+0xa8e>
 8009c64:	9907      	ldr	r1, [sp, #28]
 8009c66:	430b      	orrs	r3, r1
 8009c68:	9906      	ldr	r1, [sp, #24]
 8009c6a:	430b      	orrs	r3, r1
 8009c6c:	d120      	bne.n	8009cb0 <_dtoa_r+0xad0>
 8009c6e:	2a00      	cmp	r2, #0
 8009c70:	dded      	ble.n	8009c4e <_dtoa_r+0xa6e>
 8009c72:	4651      	mov	r1, sl
 8009c74:	2201      	movs	r2, #1
 8009c76:	4620      	mov	r0, r4
 8009c78:	f000 fbb4 	bl	800a3e4 <__lshift>
 8009c7c:	4631      	mov	r1, r6
 8009c7e:	4682      	mov	sl, r0
 8009c80:	f000 fc1c 	bl	800a4bc <__mcmp>
 8009c84:	2800      	cmp	r0, #0
 8009c86:	dc03      	bgt.n	8009c90 <_dtoa_r+0xab0>
 8009c88:	d1e1      	bne.n	8009c4e <_dtoa_r+0xa6e>
 8009c8a:	f019 0f01 	tst.w	r9, #1
 8009c8e:	d0de      	beq.n	8009c4e <_dtoa_r+0xa6e>
 8009c90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009c94:	d1d8      	bne.n	8009c48 <_dtoa_r+0xa68>
 8009c96:	9a01      	ldr	r2, [sp, #4]
 8009c98:	2339      	movs	r3, #57	; 0x39
 8009c9a:	7013      	strb	r3, [r2, #0]
 8009c9c:	462b      	mov	r3, r5
 8009c9e:	461d      	mov	r5, r3
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ca6:	2a39      	cmp	r2, #57	; 0x39
 8009ca8:	d06c      	beq.n	8009d84 <_dtoa_r+0xba4>
 8009caa:	3201      	adds	r2, #1
 8009cac:	701a      	strb	r2, [r3, #0]
 8009cae:	e747      	b.n	8009b40 <_dtoa_r+0x960>
 8009cb0:	2a00      	cmp	r2, #0
 8009cb2:	dd07      	ble.n	8009cc4 <_dtoa_r+0xae4>
 8009cb4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009cb8:	d0ed      	beq.n	8009c96 <_dtoa_r+0xab6>
 8009cba:	9a01      	ldr	r2, [sp, #4]
 8009cbc:	f109 0301 	add.w	r3, r9, #1
 8009cc0:	7013      	strb	r3, [r2, #0]
 8009cc2:	e73d      	b.n	8009b40 <_dtoa_r+0x960>
 8009cc4:	9b04      	ldr	r3, [sp, #16]
 8009cc6:	9a08      	ldr	r2, [sp, #32]
 8009cc8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d043      	beq.n	8009d58 <_dtoa_r+0xb78>
 8009cd0:	4651      	mov	r1, sl
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	220a      	movs	r2, #10
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f000 f9d6 	bl	800a088 <__multadd>
 8009cdc:	45b8      	cmp	r8, r7
 8009cde:	4682      	mov	sl, r0
 8009ce0:	f04f 0300 	mov.w	r3, #0
 8009ce4:	f04f 020a 	mov.w	r2, #10
 8009ce8:	4641      	mov	r1, r8
 8009cea:	4620      	mov	r0, r4
 8009cec:	d107      	bne.n	8009cfe <_dtoa_r+0xb1e>
 8009cee:	f000 f9cb 	bl	800a088 <__multadd>
 8009cf2:	4680      	mov	r8, r0
 8009cf4:	4607      	mov	r7, r0
 8009cf6:	9b04      	ldr	r3, [sp, #16]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	9304      	str	r3, [sp, #16]
 8009cfc:	e775      	b.n	8009bea <_dtoa_r+0xa0a>
 8009cfe:	f000 f9c3 	bl	800a088 <__multadd>
 8009d02:	4639      	mov	r1, r7
 8009d04:	4680      	mov	r8, r0
 8009d06:	2300      	movs	r3, #0
 8009d08:	220a      	movs	r2, #10
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f000 f9bc 	bl	800a088 <__multadd>
 8009d10:	4607      	mov	r7, r0
 8009d12:	e7f0      	b.n	8009cf6 <_dtoa_r+0xb16>
 8009d14:	9b04      	ldr	r3, [sp, #16]
 8009d16:	9301      	str	r3, [sp, #4]
 8009d18:	9d00      	ldr	r5, [sp, #0]
 8009d1a:	4631      	mov	r1, r6
 8009d1c:	4650      	mov	r0, sl
 8009d1e:	f7ff f9d5 	bl	80090cc <quorem>
 8009d22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009d26:	9b00      	ldr	r3, [sp, #0]
 8009d28:	f805 9b01 	strb.w	r9, [r5], #1
 8009d2c:	1aea      	subs	r2, r5, r3
 8009d2e:	9b01      	ldr	r3, [sp, #4]
 8009d30:	4293      	cmp	r3, r2
 8009d32:	dd07      	ble.n	8009d44 <_dtoa_r+0xb64>
 8009d34:	4651      	mov	r1, sl
 8009d36:	2300      	movs	r3, #0
 8009d38:	220a      	movs	r2, #10
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f000 f9a4 	bl	800a088 <__multadd>
 8009d40:	4682      	mov	sl, r0
 8009d42:	e7ea      	b.n	8009d1a <_dtoa_r+0xb3a>
 8009d44:	9b01      	ldr	r3, [sp, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	bfc8      	it	gt
 8009d4a:	461d      	movgt	r5, r3
 8009d4c:	9b00      	ldr	r3, [sp, #0]
 8009d4e:	bfd8      	it	le
 8009d50:	2501      	movle	r5, #1
 8009d52:	441d      	add	r5, r3
 8009d54:	f04f 0800 	mov.w	r8, #0
 8009d58:	4651      	mov	r1, sl
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f000 fb41 	bl	800a3e4 <__lshift>
 8009d62:	4631      	mov	r1, r6
 8009d64:	4682      	mov	sl, r0
 8009d66:	f000 fba9 	bl	800a4bc <__mcmp>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	dc96      	bgt.n	8009c9c <_dtoa_r+0xabc>
 8009d6e:	d102      	bne.n	8009d76 <_dtoa_r+0xb96>
 8009d70:	f019 0f01 	tst.w	r9, #1
 8009d74:	d192      	bne.n	8009c9c <_dtoa_r+0xabc>
 8009d76:	462b      	mov	r3, r5
 8009d78:	461d      	mov	r5, r3
 8009d7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d7e:	2a30      	cmp	r2, #48	; 0x30
 8009d80:	d0fa      	beq.n	8009d78 <_dtoa_r+0xb98>
 8009d82:	e6dd      	b.n	8009b40 <_dtoa_r+0x960>
 8009d84:	9a00      	ldr	r2, [sp, #0]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d189      	bne.n	8009c9e <_dtoa_r+0xabe>
 8009d8a:	f10b 0b01 	add.w	fp, fp, #1
 8009d8e:	2331      	movs	r3, #49	; 0x31
 8009d90:	e796      	b.n	8009cc0 <_dtoa_r+0xae0>
 8009d92:	4b0a      	ldr	r3, [pc, #40]	; (8009dbc <_dtoa_r+0xbdc>)
 8009d94:	f7ff ba99 	b.w	80092ca <_dtoa_r+0xea>
 8009d98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f47f aa6d 	bne.w	800927a <_dtoa_r+0x9a>
 8009da0:	4b07      	ldr	r3, [pc, #28]	; (8009dc0 <_dtoa_r+0xbe0>)
 8009da2:	f7ff ba92 	b.w	80092ca <_dtoa_r+0xea>
 8009da6:	9b01      	ldr	r3, [sp, #4]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	dcb5      	bgt.n	8009d18 <_dtoa_r+0xb38>
 8009dac:	9b07      	ldr	r3, [sp, #28]
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	f73f aeb1 	bgt.w	8009b16 <_dtoa_r+0x936>
 8009db4:	e7b0      	b.n	8009d18 <_dtoa_r+0xb38>
 8009db6:	bf00      	nop
 8009db8:	0800d534 	.word	0x0800d534
 8009dbc:	0800d46f 	.word	0x0800d46f
 8009dc0:	0800d4cf 	.word	0x0800d4cf

08009dc4 <_free_r>:
 8009dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dc6:	2900      	cmp	r1, #0
 8009dc8:	d044      	beq.n	8009e54 <_free_r+0x90>
 8009dca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dce:	9001      	str	r0, [sp, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f1a1 0404 	sub.w	r4, r1, #4
 8009dd6:	bfb8      	it	lt
 8009dd8:	18e4      	addlt	r4, r4, r3
 8009dda:	f000 f8e7 	bl	8009fac <__malloc_lock>
 8009dde:	4a1e      	ldr	r2, [pc, #120]	; (8009e58 <_free_r+0x94>)
 8009de0:	9801      	ldr	r0, [sp, #4]
 8009de2:	6813      	ldr	r3, [r2, #0]
 8009de4:	b933      	cbnz	r3, 8009df4 <_free_r+0x30>
 8009de6:	6063      	str	r3, [r4, #4]
 8009de8:	6014      	str	r4, [r2, #0]
 8009dea:	b003      	add	sp, #12
 8009dec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009df0:	f000 b8e2 	b.w	8009fb8 <__malloc_unlock>
 8009df4:	42a3      	cmp	r3, r4
 8009df6:	d908      	bls.n	8009e0a <_free_r+0x46>
 8009df8:	6825      	ldr	r5, [r4, #0]
 8009dfa:	1961      	adds	r1, r4, r5
 8009dfc:	428b      	cmp	r3, r1
 8009dfe:	bf01      	itttt	eq
 8009e00:	6819      	ldreq	r1, [r3, #0]
 8009e02:	685b      	ldreq	r3, [r3, #4]
 8009e04:	1949      	addeq	r1, r1, r5
 8009e06:	6021      	streq	r1, [r4, #0]
 8009e08:	e7ed      	b.n	8009de6 <_free_r+0x22>
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	b10b      	cbz	r3, 8009e14 <_free_r+0x50>
 8009e10:	42a3      	cmp	r3, r4
 8009e12:	d9fa      	bls.n	8009e0a <_free_r+0x46>
 8009e14:	6811      	ldr	r1, [r2, #0]
 8009e16:	1855      	adds	r5, r2, r1
 8009e18:	42a5      	cmp	r5, r4
 8009e1a:	d10b      	bne.n	8009e34 <_free_r+0x70>
 8009e1c:	6824      	ldr	r4, [r4, #0]
 8009e1e:	4421      	add	r1, r4
 8009e20:	1854      	adds	r4, r2, r1
 8009e22:	42a3      	cmp	r3, r4
 8009e24:	6011      	str	r1, [r2, #0]
 8009e26:	d1e0      	bne.n	8009dea <_free_r+0x26>
 8009e28:	681c      	ldr	r4, [r3, #0]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	6053      	str	r3, [r2, #4]
 8009e2e:	440c      	add	r4, r1
 8009e30:	6014      	str	r4, [r2, #0]
 8009e32:	e7da      	b.n	8009dea <_free_r+0x26>
 8009e34:	d902      	bls.n	8009e3c <_free_r+0x78>
 8009e36:	230c      	movs	r3, #12
 8009e38:	6003      	str	r3, [r0, #0]
 8009e3a:	e7d6      	b.n	8009dea <_free_r+0x26>
 8009e3c:	6825      	ldr	r5, [r4, #0]
 8009e3e:	1961      	adds	r1, r4, r5
 8009e40:	428b      	cmp	r3, r1
 8009e42:	bf04      	itt	eq
 8009e44:	6819      	ldreq	r1, [r3, #0]
 8009e46:	685b      	ldreq	r3, [r3, #4]
 8009e48:	6063      	str	r3, [r4, #4]
 8009e4a:	bf04      	itt	eq
 8009e4c:	1949      	addeq	r1, r1, r5
 8009e4e:	6021      	streq	r1, [r4, #0]
 8009e50:	6054      	str	r4, [r2, #4]
 8009e52:	e7ca      	b.n	8009dea <_free_r+0x26>
 8009e54:	b003      	add	sp, #12
 8009e56:	bd30      	pop	{r4, r5, pc}
 8009e58:	2000464c 	.word	0x2000464c

08009e5c <malloc>:
 8009e5c:	4b02      	ldr	r3, [pc, #8]	; (8009e68 <malloc+0xc>)
 8009e5e:	4601      	mov	r1, r0
 8009e60:	6818      	ldr	r0, [r3, #0]
 8009e62:	f000 b823 	b.w	8009eac <_malloc_r>
 8009e66:	bf00      	nop
 8009e68:	20000070 	.word	0x20000070

08009e6c <sbrk_aligned>:
 8009e6c:	b570      	push	{r4, r5, r6, lr}
 8009e6e:	4e0e      	ldr	r6, [pc, #56]	; (8009ea8 <sbrk_aligned+0x3c>)
 8009e70:	460c      	mov	r4, r1
 8009e72:	6831      	ldr	r1, [r6, #0]
 8009e74:	4605      	mov	r5, r0
 8009e76:	b911      	cbnz	r1, 8009e7e <sbrk_aligned+0x12>
 8009e78:	f000 fe52 	bl	800ab20 <_sbrk_r>
 8009e7c:	6030      	str	r0, [r6, #0]
 8009e7e:	4621      	mov	r1, r4
 8009e80:	4628      	mov	r0, r5
 8009e82:	f000 fe4d 	bl	800ab20 <_sbrk_r>
 8009e86:	1c43      	adds	r3, r0, #1
 8009e88:	d00a      	beq.n	8009ea0 <sbrk_aligned+0x34>
 8009e8a:	1cc4      	adds	r4, r0, #3
 8009e8c:	f024 0403 	bic.w	r4, r4, #3
 8009e90:	42a0      	cmp	r0, r4
 8009e92:	d007      	beq.n	8009ea4 <sbrk_aligned+0x38>
 8009e94:	1a21      	subs	r1, r4, r0
 8009e96:	4628      	mov	r0, r5
 8009e98:	f000 fe42 	bl	800ab20 <_sbrk_r>
 8009e9c:	3001      	adds	r0, #1
 8009e9e:	d101      	bne.n	8009ea4 <sbrk_aligned+0x38>
 8009ea0:	f04f 34ff 	mov.w	r4, #4294967295
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	bd70      	pop	{r4, r5, r6, pc}
 8009ea8:	20004650 	.word	0x20004650

08009eac <_malloc_r>:
 8009eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009eb0:	1ccd      	adds	r5, r1, #3
 8009eb2:	f025 0503 	bic.w	r5, r5, #3
 8009eb6:	3508      	adds	r5, #8
 8009eb8:	2d0c      	cmp	r5, #12
 8009eba:	bf38      	it	cc
 8009ebc:	250c      	movcc	r5, #12
 8009ebe:	2d00      	cmp	r5, #0
 8009ec0:	4607      	mov	r7, r0
 8009ec2:	db01      	blt.n	8009ec8 <_malloc_r+0x1c>
 8009ec4:	42a9      	cmp	r1, r5
 8009ec6:	d905      	bls.n	8009ed4 <_malloc_r+0x28>
 8009ec8:	230c      	movs	r3, #12
 8009eca:	603b      	str	r3, [r7, #0]
 8009ecc:	2600      	movs	r6, #0
 8009ece:	4630      	mov	r0, r6
 8009ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ed4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009fa8 <_malloc_r+0xfc>
 8009ed8:	f000 f868 	bl	8009fac <__malloc_lock>
 8009edc:	f8d8 3000 	ldr.w	r3, [r8]
 8009ee0:	461c      	mov	r4, r3
 8009ee2:	bb5c      	cbnz	r4, 8009f3c <_malloc_r+0x90>
 8009ee4:	4629      	mov	r1, r5
 8009ee6:	4638      	mov	r0, r7
 8009ee8:	f7ff ffc0 	bl	8009e6c <sbrk_aligned>
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	4604      	mov	r4, r0
 8009ef0:	d155      	bne.n	8009f9e <_malloc_r+0xf2>
 8009ef2:	f8d8 4000 	ldr.w	r4, [r8]
 8009ef6:	4626      	mov	r6, r4
 8009ef8:	2e00      	cmp	r6, #0
 8009efa:	d145      	bne.n	8009f88 <_malloc_r+0xdc>
 8009efc:	2c00      	cmp	r4, #0
 8009efe:	d048      	beq.n	8009f92 <_malloc_r+0xe6>
 8009f00:	6823      	ldr	r3, [r4, #0]
 8009f02:	4631      	mov	r1, r6
 8009f04:	4638      	mov	r0, r7
 8009f06:	eb04 0903 	add.w	r9, r4, r3
 8009f0a:	f000 fe09 	bl	800ab20 <_sbrk_r>
 8009f0e:	4581      	cmp	r9, r0
 8009f10:	d13f      	bne.n	8009f92 <_malloc_r+0xe6>
 8009f12:	6821      	ldr	r1, [r4, #0]
 8009f14:	1a6d      	subs	r5, r5, r1
 8009f16:	4629      	mov	r1, r5
 8009f18:	4638      	mov	r0, r7
 8009f1a:	f7ff ffa7 	bl	8009e6c <sbrk_aligned>
 8009f1e:	3001      	adds	r0, #1
 8009f20:	d037      	beq.n	8009f92 <_malloc_r+0xe6>
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	442b      	add	r3, r5
 8009f26:	6023      	str	r3, [r4, #0]
 8009f28:	f8d8 3000 	ldr.w	r3, [r8]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d038      	beq.n	8009fa2 <_malloc_r+0xf6>
 8009f30:	685a      	ldr	r2, [r3, #4]
 8009f32:	42a2      	cmp	r2, r4
 8009f34:	d12b      	bne.n	8009f8e <_malloc_r+0xe2>
 8009f36:	2200      	movs	r2, #0
 8009f38:	605a      	str	r2, [r3, #4]
 8009f3a:	e00f      	b.n	8009f5c <_malloc_r+0xb0>
 8009f3c:	6822      	ldr	r2, [r4, #0]
 8009f3e:	1b52      	subs	r2, r2, r5
 8009f40:	d41f      	bmi.n	8009f82 <_malloc_r+0xd6>
 8009f42:	2a0b      	cmp	r2, #11
 8009f44:	d917      	bls.n	8009f76 <_malloc_r+0xca>
 8009f46:	1961      	adds	r1, r4, r5
 8009f48:	42a3      	cmp	r3, r4
 8009f4a:	6025      	str	r5, [r4, #0]
 8009f4c:	bf18      	it	ne
 8009f4e:	6059      	strne	r1, [r3, #4]
 8009f50:	6863      	ldr	r3, [r4, #4]
 8009f52:	bf08      	it	eq
 8009f54:	f8c8 1000 	streq.w	r1, [r8]
 8009f58:	5162      	str	r2, [r4, r5]
 8009f5a:	604b      	str	r3, [r1, #4]
 8009f5c:	4638      	mov	r0, r7
 8009f5e:	f104 060b 	add.w	r6, r4, #11
 8009f62:	f000 f829 	bl	8009fb8 <__malloc_unlock>
 8009f66:	f026 0607 	bic.w	r6, r6, #7
 8009f6a:	1d23      	adds	r3, r4, #4
 8009f6c:	1af2      	subs	r2, r6, r3
 8009f6e:	d0ae      	beq.n	8009ece <_malloc_r+0x22>
 8009f70:	1b9b      	subs	r3, r3, r6
 8009f72:	50a3      	str	r3, [r4, r2]
 8009f74:	e7ab      	b.n	8009ece <_malloc_r+0x22>
 8009f76:	42a3      	cmp	r3, r4
 8009f78:	6862      	ldr	r2, [r4, #4]
 8009f7a:	d1dd      	bne.n	8009f38 <_malloc_r+0x8c>
 8009f7c:	f8c8 2000 	str.w	r2, [r8]
 8009f80:	e7ec      	b.n	8009f5c <_malloc_r+0xb0>
 8009f82:	4623      	mov	r3, r4
 8009f84:	6864      	ldr	r4, [r4, #4]
 8009f86:	e7ac      	b.n	8009ee2 <_malloc_r+0x36>
 8009f88:	4634      	mov	r4, r6
 8009f8a:	6876      	ldr	r6, [r6, #4]
 8009f8c:	e7b4      	b.n	8009ef8 <_malloc_r+0x4c>
 8009f8e:	4613      	mov	r3, r2
 8009f90:	e7cc      	b.n	8009f2c <_malloc_r+0x80>
 8009f92:	230c      	movs	r3, #12
 8009f94:	603b      	str	r3, [r7, #0]
 8009f96:	4638      	mov	r0, r7
 8009f98:	f000 f80e 	bl	8009fb8 <__malloc_unlock>
 8009f9c:	e797      	b.n	8009ece <_malloc_r+0x22>
 8009f9e:	6025      	str	r5, [r4, #0]
 8009fa0:	e7dc      	b.n	8009f5c <_malloc_r+0xb0>
 8009fa2:	605b      	str	r3, [r3, #4]
 8009fa4:	deff      	udf	#255	; 0xff
 8009fa6:	bf00      	nop
 8009fa8:	2000464c 	.word	0x2000464c

08009fac <__malloc_lock>:
 8009fac:	4801      	ldr	r0, [pc, #4]	; (8009fb4 <__malloc_lock+0x8>)
 8009fae:	f7ff b85e 	b.w	800906e <__retarget_lock_acquire_recursive>
 8009fb2:	bf00      	nop
 8009fb4:	20004648 	.word	0x20004648

08009fb8 <__malloc_unlock>:
 8009fb8:	4801      	ldr	r0, [pc, #4]	; (8009fc0 <__malloc_unlock+0x8>)
 8009fba:	f7ff b859 	b.w	8009070 <__retarget_lock_release_recursive>
 8009fbe:	bf00      	nop
 8009fc0:	20004648 	.word	0x20004648

08009fc4 <_Balloc>:
 8009fc4:	b570      	push	{r4, r5, r6, lr}
 8009fc6:	69c6      	ldr	r6, [r0, #28]
 8009fc8:	4604      	mov	r4, r0
 8009fca:	460d      	mov	r5, r1
 8009fcc:	b976      	cbnz	r6, 8009fec <_Balloc+0x28>
 8009fce:	2010      	movs	r0, #16
 8009fd0:	f7ff ff44 	bl	8009e5c <malloc>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	61e0      	str	r0, [r4, #28]
 8009fd8:	b920      	cbnz	r0, 8009fe4 <_Balloc+0x20>
 8009fda:	4b18      	ldr	r3, [pc, #96]	; (800a03c <_Balloc+0x78>)
 8009fdc:	4818      	ldr	r0, [pc, #96]	; (800a040 <_Balloc+0x7c>)
 8009fde:	216b      	movs	r1, #107	; 0x6b
 8009fe0:	f7ff f856 	bl	8009090 <__assert_func>
 8009fe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fe8:	6006      	str	r6, [r0, #0]
 8009fea:	60c6      	str	r6, [r0, #12]
 8009fec:	69e6      	ldr	r6, [r4, #28]
 8009fee:	68f3      	ldr	r3, [r6, #12]
 8009ff0:	b183      	cbz	r3, 800a014 <_Balloc+0x50>
 8009ff2:	69e3      	ldr	r3, [r4, #28]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ffa:	b9b8      	cbnz	r0, 800a02c <_Balloc+0x68>
 8009ffc:	2101      	movs	r1, #1
 8009ffe:	fa01 f605 	lsl.w	r6, r1, r5
 800a002:	1d72      	adds	r2, r6, #5
 800a004:	0092      	lsls	r2, r2, #2
 800a006:	4620      	mov	r0, r4
 800a008:	f000 fda1 	bl	800ab4e <_calloc_r>
 800a00c:	b160      	cbz	r0, 800a028 <_Balloc+0x64>
 800a00e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a012:	e00e      	b.n	800a032 <_Balloc+0x6e>
 800a014:	2221      	movs	r2, #33	; 0x21
 800a016:	2104      	movs	r1, #4
 800a018:	4620      	mov	r0, r4
 800a01a:	f000 fd98 	bl	800ab4e <_calloc_r>
 800a01e:	69e3      	ldr	r3, [r4, #28]
 800a020:	60f0      	str	r0, [r6, #12]
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d1e4      	bne.n	8009ff2 <_Balloc+0x2e>
 800a028:	2000      	movs	r0, #0
 800a02a:	bd70      	pop	{r4, r5, r6, pc}
 800a02c:	6802      	ldr	r2, [r0, #0]
 800a02e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a032:	2300      	movs	r3, #0
 800a034:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a038:	e7f7      	b.n	800a02a <_Balloc+0x66>
 800a03a:	bf00      	nop
 800a03c:	0800d3f0 	.word	0x0800d3f0
 800a040:	0800d545 	.word	0x0800d545

0800a044 <_Bfree>:
 800a044:	b570      	push	{r4, r5, r6, lr}
 800a046:	69c6      	ldr	r6, [r0, #28]
 800a048:	4605      	mov	r5, r0
 800a04a:	460c      	mov	r4, r1
 800a04c:	b976      	cbnz	r6, 800a06c <_Bfree+0x28>
 800a04e:	2010      	movs	r0, #16
 800a050:	f7ff ff04 	bl	8009e5c <malloc>
 800a054:	4602      	mov	r2, r0
 800a056:	61e8      	str	r0, [r5, #28]
 800a058:	b920      	cbnz	r0, 800a064 <_Bfree+0x20>
 800a05a:	4b09      	ldr	r3, [pc, #36]	; (800a080 <_Bfree+0x3c>)
 800a05c:	4809      	ldr	r0, [pc, #36]	; (800a084 <_Bfree+0x40>)
 800a05e:	218f      	movs	r1, #143	; 0x8f
 800a060:	f7ff f816 	bl	8009090 <__assert_func>
 800a064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a068:	6006      	str	r6, [r0, #0]
 800a06a:	60c6      	str	r6, [r0, #12]
 800a06c:	b13c      	cbz	r4, 800a07e <_Bfree+0x3a>
 800a06e:	69eb      	ldr	r3, [r5, #28]
 800a070:	6862      	ldr	r2, [r4, #4]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a078:	6021      	str	r1, [r4, #0]
 800a07a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a07e:	bd70      	pop	{r4, r5, r6, pc}
 800a080:	0800d3f0 	.word	0x0800d3f0
 800a084:	0800d545 	.word	0x0800d545

0800a088 <__multadd>:
 800a088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a08c:	690d      	ldr	r5, [r1, #16]
 800a08e:	4607      	mov	r7, r0
 800a090:	460c      	mov	r4, r1
 800a092:	461e      	mov	r6, r3
 800a094:	f101 0c14 	add.w	ip, r1, #20
 800a098:	2000      	movs	r0, #0
 800a09a:	f8dc 3000 	ldr.w	r3, [ip]
 800a09e:	b299      	uxth	r1, r3
 800a0a0:	fb02 6101 	mla	r1, r2, r1, r6
 800a0a4:	0c1e      	lsrs	r6, r3, #16
 800a0a6:	0c0b      	lsrs	r3, r1, #16
 800a0a8:	fb02 3306 	mla	r3, r2, r6, r3
 800a0ac:	b289      	uxth	r1, r1
 800a0ae:	3001      	adds	r0, #1
 800a0b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a0b4:	4285      	cmp	r5, r0
 800a0b6:	f84c 1b04 	str.w	r1, [ip], #4
 800a0ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a0be:	dcec      	bgt.n	800a09a <__multadd+0x12>
 800a0c0:	b30e      	cbz	r6, 800a106 <__multadd+0x7e>
 800a0c2:	68a3      	ldr	r3, [r4, #8]
 800a0c4:	42ab      	cmp	r3, r5
 800a0c6:	dc19      	bgt.n	800a0fc <__multadd+0x74>
 800a0c8:	6861      	ldr	r1, [r4, #4]
 800a0ca:	4638      	mov	r0, r7
 800a0cc:	3101      	adds	r1, #1
 800a0ce:	f7ff ff79 	bl	8009fc4 <_Balloc>
 800a0d2:	4680      	mov	r8, r0
 800a0d4:	b928      	cbnz	r0, 800a0e2 <__multadd+0x5a>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	4b0c      	ldr	r3, [pc, #48]	; (800a10c <__multadd+0x84>)
 800a0da:	480d      	ldr	r0, [pc, #52]	; (800a110 <__multadd+0x88>)
 800a0dc:	21ba      	movs	r1, #186	; 0xba
 800a0de:	f7fe ffd7 	bl	8009090 <__assert_func>
 800a0e2:	6922      	ldr	r2, [r4, #16]
 800a0e4:	3202      	adds	r2, #2
 800a0e6:	f104 010c 	add.w	r1, r4, #12
 800a0ea:	0092      	lsls	r2, r2, #2
 800a0ec:	300c      	adds	r0, #12
 800a0ee:	f7fe ffc0 	bl	8009072 <memcpy>
 800a0f2:	4621      	mov	r1, r4
 800a0f4:	4638      	mov	r0, r7
 800a0f6:	f7ff ffa5 	bl	800a044 <_Bfree>
 800a0fa:	4644      	mov	r4, r8
 800a0fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a100:	3501      	adds	r5, #1
 800a102:	615e      	str	r6, [r3, #20]
 800a104:	6125      	str	r5, [r4, #16]
 800a106:	4620      	mov	r0, r4
 800a108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a10c:	0800d534 	.word	0x0800d534
 800a110:	0800d545 	.word	0x0800d545

0800a114 <__hi0bits>:
 800a114:	0c03      	lsrs	r3, r0, #16
 800a116:	041b      	lsls	r3, r3, #16
 800a118:	b9d3      	cbnz	r3, 800a150 <__hi0bits+0x3c>
 800a11a:	0400      	lsls	r0, r0, #16
 800a11c:	2310      	movs	r3, #16
 800a11e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a122:	bf04      	itt	eq
 800a124:	0200      	lsleq	r0, r0, #8
 800a126:	3308      	addeq	r3, #8
 800a128:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a12c:	bf04      	itt	eq
 800a12e:	0100      	lsleq	r0, r0, #4
 800a130:	3304      	addeq	r3, #4
 800a132:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a136:	bf04      	itt	eq
 800a138:	0080      	lsleq	r0, r0, #2
 800a13a:	3302      	addeq	r3, #2
 800a13c:	2800      	cmp	r0, #0
 800a13e:	db05      	blt.n	800a14c <__hi0bits+0x38>
 800a140:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a144:	f103 0301 	add.w	r3, r3, #1
 800a148:	bf08      	it	eq
 800a14a:	2320      	moveq	r3, #32
 800a14c:	4618      	mov	r0, r3
 800a14e:	4770      	bx	lr
 800a150:	2300      	movs	r3, #0
 800a152:	e7e4      	b.n	800a11e <__hi0bits+0xa>

0800a154 <__lo0bits>:
 800a154:	6803      	ldr	r3, [r0, #0]
 800a156:	f013 0207 	ands.w	r2, r3, #7
 800a15a:	d00c      	beq.n	800a176 <__lo0bits+0x22>
 800a15c:	07d9      	lsls	r1, r3, #31
 800a15e:	d422      	bmi.n	800a1a6 <__lo0bits+0x52>
 800a160:	079a      	lsls	r2, r3, #30
 800a162:	bf49      	itett	mi
 800a164:	085b      	lsrmi	r3, r3, #1
 800a166:	089b      	lsrpl	r3, r3, #2
 800a168:	6003      	strmi	r3, [r0, #0]
 800a16a:	2201      	movmi	r2, #1
 800a16c:	bf5c      	itt	pl
 800a16e:	6003      	strpl	r3, [r0, #0]
 800a170:	2202      	movpl	r2, #2
 800a172:	4610      	mov	r0, r2
 800a174:	4770      	bx	lr
 800a176:	b299      	uxth	r1, r3
 800a178:	b909      	cbnz	r1, 800a17e <__lo0bits+0x2a>
 800a17a:	0c1b      	lsrs	r3, r3, #16
 800a17c:	2210      	movs	r2, #16
 800a17e:	b2d9      	uxtb	r1, r3
 800a180:	b909      	cbnz	r1, 800a186 <__lo0bits+0x32>
 800a182:	3208      	adds	r2, #8
 800a184:	0a1b      	lsrs	r3, r3, #8
 800a186:	0719      	lsls	r1, r3, #28
 800a188:	bf04      	itt	eq
 800a18a:	091b      	lsreq	r3, r3, #4
 800a18c:	3204      	addeq	r2, #4
 800a18e:	0799      	lsls	r1, r3, #30
 800a190:	bf04      	itt	eq
 800a192:	089b      	lsreq	r3, r3, #2
 800a194:	3202      	addeq	r2, #2
 800a196:	07d9      	lsls	r1, r3, #31
 800a198:	d403      	bmi.n	800a1a2 <__lo0bits+0x4e>
 800a19a:	085b      	lsrs	r3, r3, #1
 800a19c:	f102 0201 	add.w	r2, r2, #1
 800a1a0:	d003      	beq.n	800a1aa <__lo0bits+0x56>
 800a1a2:	6003      	str	r3, [r0, #0]
 800a1a4:	e7e5      	b.n	800a172 <__lo0bits+0x1e>
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	e7e3      	b.n	800a172 <__lo0bits+0x1e>
 800a1aa:	2220      	movs	r2, #32
 800a1ac:	e7e1      	b.n	800a172 <__lo0bits+0x1e>
	...

0800a1b0 <__i2b>:
 800a1b0:	b510      	push	{r4, lr}
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	2101      	movs	r1, #1
 800a1b6:	f7ff ff05 	bl	8009fc4 <_Balloc>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	b928      	cbnz	r0, 800a1ca <__i2b+0x1a>
 800a1be:	4b05      	ldr	r3, [pc, #20]	; (800a1d4 <__i2b+0x24>)
 800a1c0:	4805      	ldr	r0, [pc, #20]	; (800a1d8 <__i2b+0x28>)
 800a1c2:	f240 1145 	movw	r1, #325	; 0x145
 800a1c6:	f7fe ff63 	bl	8009090 <__assert_func>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	6144      	str	r4, [r0, #20]
 800a1ce:	6103      	str	r3, [r0, #16]
 800a1d0:	bd10      	pop	{r4, pc}
 800a1d2:	bf00      	nop
 800a1d4:	0800d534 	.word	0x0800d534
 800a1d8:	0800d545 	.word	0x0800d545

0800a1dc <__multiply>:
 800a1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e0:	4691      	mov	r9, r2
 800a1e2:	690a      	ldr	r2, [r1, #16]
 800a1e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	bfb8      	it	lt
 800a1ec:	460b      	movlt	r3, r1
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	bfbc      	itt	lt
 800a1f2:	464c      	movlt	r4, r9
 800a1f4:	4699      	movlt	r9, r3
 800a1f6:	6927      	ldr	r7, [r4, #16]
 800a1f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a1fc:	68a3      	ldr	r3, [r4, #8]
 800a1fe:	6861      	ldr	r1, [r4, #4]
 800a200:	eb07 060a 	add.w	r6, r7, sl
 800a204:	42b3      	cmp	r3, r6
 800a206:	b085      	sub	sp, #20
 800a208:	bfb8      	it	lt
 800a20a:	3101      	addlt	r1, #1
 800a20c:	f7ff feda 	bl	8009fc4 <_Balloc>
 800a210:	b930      	cbnz	r0, 800a220 <__multiply+0x44>
 800a212:	4602      	mov	r2, r0
 800a214:	4b44      	ldr	r3, [pc, #272]	; (800a328 <__multiply+0x14c>)
 800a216:	4845      	ldr	r0, [pc, #276]	; (800a32c <__multiply+0x150>)
 800a218:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a21c:	f7fe ff38 	bl	8009090 <__assert_func>
 800a220:	f100 0514 	add.w	r5, r0, #20
 800a224:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a228:	462b      	mov	r3, r5
 800a22a:	2200      	movs	r2, #0
 800a22c:	4543      	cmp	r3, r8
 800a22e:	d321      	bcc.n	800a274 <__multiply+0x98>
 800a230:	f104 0314 	add.w	r3, r4, #20
 800a234:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a238:	f109 0314 	add.w	r3, r9, #20
 800a23c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a240:	9202      	str	r2, [sp, #8]
 800a242:	1b3a      	subs	r2, r7, r4
 800a244:	3a15      	subs	r2, #21
 800a246:	f022 0203 	bic.w	r2, r2, #3
 800a24a:	3204      	adds	r2, #4
 800a24c:	f104 0115 	add.w	r1, r4, #21
 800a250:	428f      	cmp	r7, r1
 800a252:	bf38      	it	cc
 800a254:	2204      	movcc	r2, #4
 800a256:	9201      	str	r2, [sp, #4]
 800a258:	9a02      	ldr	r2, [sp, #8]
 800a25a:	9303      	str	r3, [sp, #12]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d80c      	bhi.n	800a27a <__multiply+0x9e>
 800a260:	2e00      	cmp	r6, #0
 800a262:	dd03      	ble.n	800a26c <__multiply+0x90>
 800a264:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d05b      	beq.n	800a324 <__multiply+0x148>
 800a26c:	6106      	str	r6, [r0, #16]
 800a26e:	b005      	add	sp, #20
 800a270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a274:	f843 2b04 	str.w	r2, [r3], #4
 800a278:	e7d8      	b.n	800a22c <__multiply+0x50>
 800a27a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a27e:	f1ba 0f00 	cmp.w	sl, #0
 800a282:	d024      	beq.n	800a2ce <__multiply+0xf2>
 800a284:	f104 0e14 	add.w	lr, r4, #20
 800a288:	46a9      	mov	r9, r5
 800a28a:	f04f 0c00 	mov.w	ip, #0
 800a28e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a292:	f8d9 1000 	ldr.w	r1, [r9]
 800a296:	fa1f fb82 	uxth.w	fp, r2
 800a29a:	b289      	uxth	r1, r1
 800a29c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a2a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a2a4:	f8d9 2000 	ldr.w	r2, [r9]
 800a2a8:	4461      	add	r1, ip
 800a2aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a2ae:	fb0a c20b 	mla	r2, sl, fp, ip
 800a2b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a2b6:	b289      	uxth	r1, r1
 800a2b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a2bc:	4577      	cmp	r7, lr
 800a2be:	f849 1b04 	str.w	r1, [r9], #4
 800a2c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a2c6:	d8e2      	bhi.n	800a28e <__multiply+0xb2>
 800a2c8:	9a01      	ldr	r2, [sp, #4]
 800a2ca:	f845 c002 	str.w	ip, [r5, r2]
 800a2ce:	9a03      	ldr	r2, [sp, #12]
 800a2d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a2d4:	3304      	adds	r3, #4
 800a2d6:	f1b9 0f00 	cmp.w	r9, #0
 800a2da:	d021      	beq.n	800a320 <__multiply+0x144>
 800a2dc:	6829      	ldr	r1, [r5, #0]
 800a2de:	f104 0c14 	add.w	ip, r4, #20
 800a2e2:	46ae      	mov	lr, r5
 800a2e4:	f04f 0a00 	mov.w	sl, #0
 800a2e8:	f8bc b000 	ldrh.w	fp, [ip]
 800a2ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a2f0:	fb09 220b 	mla	r2, r9, fp, r2
 800a2f4:	4452      	add	r2, sl
 800a2f6:	b289      	uxth	r1, r1
 800a2f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a2fc:	f84e 1b04 	str.w	r1, [lr], #4
 800a300:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a304:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a308:	f8be 1000 	ldrh.w	r1, [lr]
 800a30c:	fb09 110a 	mla	r1, r9, sl, r1
 800a310:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a314:	4567      	cmp	r7, ip
 800a316:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a31a:	d8e5      	bhi.n	800a2e8 <__multiply+0x10c>
 800a31c:	9a01      	ldr	r2, [sp, #4]
 800a31e:	50a9      	str	r1, [r5, r2]
 800a320:	3504      	adds	r5, #4
 800a322:	e799      	b.n	800a258 <__multiply+0x7c>
 800a324:	3e01      	subs	r6, #1
 800a326:	e79b      	b.n	800a260 <__multiply+0x84>
 800a328:	0800d534 	.word	0x0800d534
 800a32c:	0800d545 	.word	0x0800d545

0800a330 <__pow5mult>:
 800a330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a334:	4615      	mov	r5, r2
 800a336:	f012 0203 	ands.w	r2, r2, #3
 800a33a:	4606      	mov	r6, r0
 800a33c:	460f      	mov	r7, r1
 800a33e:	d007      	beq.n	800a350 <__pow5mult+0x20>
 800a340:	4c25      	ldr	r4, [pc, #148]	; (800a3d8 <__pow5mult+0xa8>)
 800a342:	3a01      	subs	r2, #1
 800a344:	2300      	movs	r3, #0
 800a346:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a34a:	f7ff fe9d 	bl	800a088 <__multadd>
 800a34e:	4607      	mov	r7, r0
 800a350:	10ad      	asrs	r5, r5, #2
 800a352:	d03d      	beq.n	800a3d0 <__pow5mult+0xa0>
 800a354:	69f4      	ldr	r4, [r6, #28]
 800a356:	b97c      	cbnz	r4, 800a378 <__pow5mult+0x48>
 800a358:	2010      	movs	r0, #16
 800a35a:	f7ff fd7f 	bl	8009e5c <malloc>
 800a35e:	4602      	mov	r2, r0
 800a360:	61f0      	str	r0, [r6, #28]
 800a362:	b928      	cbnz	r0, 800a370 <__pow5mult+0x40>
 800a364:	4b1d      	ldr	r3, [pc, #116]	; (800a3dc <__pow5mult+0xac>)
 800a366:	481e      	ldr	r0, [pc, #120]	; (800a3e0 <__pow5mult+0xb0>)
 800a368:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a36c:	f7fe fe90 	bl	8009090 <__assert_func>
 800a370:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a374:	6004      	str	r4, [r0, #0]
 800a376:	60c4      	str	r4, [r0, #12]
 800a378:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a37c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a380:	b94c      	cbnz	r4, 800a396 <__pow5mult+0x66>
 800a382:	f240 2171 	movw	r1, #625	; 0x271
 800a386:	4630      	mov	r0, r6
 800a388:	f7ff ff12 	bl	800a1b0 <__i2b>
 800a38c:	2300      	movs	r3, #0
 800a38e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a392:	4604      	mov	r4, r0
 800a394:	6003      	str	r3, [r0, #0]
 800a396:	f04f 0900 	mov.w	r9, #0
 800a39a:	07eb      	lsls	r3, r5, #31
 800a39c:	d50a      	bpl.n	800a3b4 <__pow5mult+0x84>
 800a39e:	4639      	mov	r1, r7
 800a3a0:	4622      	mov	r2, r4
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	f7ff ff1a 	bl	800a1dc <__multiply>
 800a3a8:	4639      	mov	r1, r7
 800a3aa:	4680      	mov	r8, r0
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	f7ff fe49 	bl	800a044 <_Bfree>
 800a3b2:	4647      	mov	r7, r8
 800a3b4:	106d      	asrs	r5, r5, #1
 800a3b6:	d00b      	beq.n	800a3d0 <__pow5mult+0xa0>
 800a3b8:	6820      	ldr	r0, [r4, #0]
 800a3ba:	b938      	cbnz	r0, 800a3cc <__pow5mult+0x9c>
 800a3bc:	4622      	mov	r2, r4
 800a3be:	4621      	mov	r1, r4
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	f7ff ff0b 	bl	800a1dc <__multiply>
 800a3c6:	6020      	str	r0, [r4, #0]
 800a3c8:	f8c0 9000 	str.w	r9, [r0]
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	e7e4      	b.n	800a39a <__pow5mult+0x6a>
 800a3d0:	4638      	mov	r0, r7
 800a3d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3d6:	bf00      	nop
 800a3d8:	0800d690 	.word	0x0800d690
 800a3dc:	0800d3f0 	.word	0x0800d3f0
 800a3e0:	0800d545 	.word	0x0800d545

0800a3e4 <__lshift>:
 800a3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e8:	460c      	mov	r4, r1
 800a3ea:	6849      	ldr	r1, [r1, #4]
 800a3ec:	6923      	ldr	r3, [r4, #16]
 800a3ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a3f2:	68a3      	ldr	r3, [r4, #8]
 800a3f4:	4607      	mov	r7, r0
 800a3f6:	4691      	mov	r9, r2
 800a3f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a3fc:	f108 0601 	add.w	r6, r8, #1
 800a400:	42b3      	cmp	r3, r6
 800a402:	db0b      	blt.n	800a41c <__lshift+0x38>
 800a404:	4638      	mov	r0, r7
 800a406:	f7ff fddd 	bl	8009fc4 <_Balloc>
 800a40a:	4605      	mov	r5, r0
 800a40c:	b948      	cbnz	r0, 800a422 <__lshift+0x3e>
 800a40e:	4602      	mov	r2, r0
 800a410:	4b28      	ldr	r3, [pc, #160]	; (800a4b4 <__lshift+0xd0>)
 800a412:	4829      	ldr	r0, [pc, #164]	; (800a4b8 <__lshift+0xd4>)
 800a414:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a418:	f7fe fe3a 	bl	8009090 <__assert_func>
 800a41c:	3101      	adds	r1, #1
 800a41e:	005b      	lsls	r3, r3, #1
 800a420:	e7ee      	b.n	800a400 <__lshift+0x1c>
 800a422:	2300      	movs	r3, #0
 800a424:	f100 0114 	add.w	r1, r0, #20
 800a428:	f100 0210 	add.w	r2, r0, #16
 800a42c:	4618      	mov	r0, r3
 800a42e:	4553      	cmp	r3, sl
 800a430:	db33      	blt.n	800a49a <__lshift+0xb6>
 800a432:	6920      	ldr	r0, [r4, #16]
 800a434:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a438:	f104 0314 	add.w	r3, r4, #20
 800a43c:	f019 091f 	ands.w	r9, r9, #31
 800a440:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a444:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a448:	d02b      	beq.n	800a4a2 <__lshift+0xbe>
 800a44a:	f1c9 0e20 	rsb	lr, r9, #32
 800a44e:	468a      	mov	sl, r1
 800a450:	2200      	movs	r2, #0
 800a452:	6818      	ldr	r0, [r3, #0]
 800a454:	fa00 f009 	lsl.w	r0, r0, r9
 800a458:	4310      	orrs	r0, r2
 800a45a:	f84a 0b04 	str.w	r0, [sl], #4
 800a45e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a462:	459c      	cmp	ip, r3
 800a464:	fa22 f20e 	lsr.w	r2, r2, lr
 800a468:	d8f3      	bhi.n	800a452 <__lshift+0x6e>
 800a46a:	ebac 0304 	sub.w	r3, ip, r4
 800a46e:	3b15      	subs	r3, #21
 800a470:	f023 0303 	bic.w	r3, r3, #3
 800a474:	3304      	adds	r3, #4
 800a476:	f104 0015 	add.w	r0, r4, #21
 800a47a:	4584      	cmp	ip, r0
 800a47c:	bf38      	it	cc
 800a47e:	2304      	movcc	r3, #4
 800a480:	50ca      	str	r2, [r1, r3]
 800a482:	b10a      	cbz	r2, 800a488 <__lshift+0xa4>
 800a484:	f108 0602 	add.w	r6, r8, #2
 800a488:	3e01      	subs	r6, #1
 800a48a:	4638      	mov	r0, r7
 800a48c:	612e      	str	r6, [r5, #16]
 800a48e:	4621      	mov	r1, r4
 800a490:	f7ff fdd8 	bl	800a044 <_Bfree>
 800a494:	4628      	mov	r0, r5
 800a496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a49a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a49e:	3301      	adds	r3, #1
 800a4a0:	e7c5      	b.n	800a42e <__lshift+0x4a>
 800a4a2:	3904      	subs	r1, #4
 800a4a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4ac:	459c      	cmp	ip, r3
 800a4ae:	d8f9      	bhi.n	800a4a4 <__lshift+0xc0>
 800a4b0:	e7ea      	b.n	800a488 <__lshift+0xa4>
 800a4b2:	bf00      	nop
 800a4b4:	0800d534 	.word	0x0800d534
 800a4b8:	0800d545 	.word	0x0800d545

0800a4bc <__mcmp>:
 800a4bc:	b530      	push	{r4, r5, lr}
 800a4be:	6902      	ldr	r2, [r0, #16]
 800a4c0:	690c      	ldr	r4, [r1, #16]
 800a4c2:	1b12      	subs	r2, r2, r4
 800a4c4:	d10e      	bne.n	800a4e4 <__mcmp+0x28>
 800a4c6:	f100 0314 	add.w	r3, r0, #20
 800a4ca:	3114      	adds	r1, #20
 800a4cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a4d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a4d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a4d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a4dc:	42a5      	cmp	r5, r4
 800a4de:	d003      	beq.n	800a4e8 <__mcmp+0x2c>
 800a4e0:	d305      	bcc.n	800a4ee <__mcmp+0x32>
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	4610      	mov	r0, r2
 800a4e6:	bd30      	pop	{r4, r5, pc}
 800a4e8:	4283      	cmp	r3, r0
 800a4ea:	d3f3      	bcc.n	800a4d4 <__mcmp+0x18>
 800a4ec:	e7fa      	b.n	800a4e4 <__mcmp+0x28>
 800a4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f2:	e7f7      	b.n	800a4e4 <__mcmp+0x28>

0800a4f4 <__mdiff>:
 800a4f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f8:	460c      	mov	r4, r1
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	4611      	mov	r1, r2
 800a4fe:	4620      	mov	r0, r4
 800a500:	4690      	mov	r8, r2
 800a502:	f7ff ffdb 	bl	800a4bc <__mcmp>
 800a506:	1e05      	subs	r5, r0, #0
 800a508:	d110      	bne.n	800a52c <__mdiff+0x38>
 800a50a:	4629      	mov	r1, r5
 800a50c:	4630      	mov	r0, r6
 800a50e:	f7ff fd59 	bl	8009fc4 <_Balloc>
 800a512:	b930      	cbnz	r0, 800a522 <__mdiff+0x2e>
 800a514:	4b3a      	ldr	r3, [pc, #232]	; (800a600 <__mdiff+0x10c>)
 800a516:	4602      	mov	r2, r0
 800a518:	f240 2137 	movw	r1, #567	; 0x237
 800a51c:	4839      	ldr	r0, [pc, #228]	; (800a604 <__mdiff+0x110>)
 800a51e:	f7fe fdb7 	bl	8009090 <__assert_func>
 800a522:	2301      	movs	r3, #1
 800a524:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a528:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a52c:	bfa4      	itt	ge
 800a52e:	4643      	movge	r3, r8
 800a530:	46a0      	movge	r8, r4
 800a532:	4630      	mov	r0, r6
 800a534:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a538:	bfa6      	itte	ge
 800a53a:	461c      	movge	r4, r3
 800a53c:	2500      	movge	r5, #0
 800a53e:	2501      	movlt	r5, #1
 800a540:	f7ff fd40 	bl	8009fc4 <_Balloc>
 800a544:	b920      	cbnz	r0, 800a550 <__mdiff+0x5c>
 800a546:	4b2e      	ldr	r3, [pc, #184]	; (800a600 <__mdiff+0x10c>)
 800a548:	4602      	mov	r2, r0
 800a54a:	f240 2145 	movw	r1, #581	; 0x245
 800a54e:	e7e5      	b.n	800a51c <__mdiff+0x28>
 800a550:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a554:	6926      	ldr	r6, [r4, #16]
 800a556:	60c5      	str	r5, [r0, #12]
 800a558:	f104 0914 	add.w	r9, r4, #20
 800a55c:	f108 0514 	add.w	r5, r8, #20
 800a560:	f100 0e14 	add.w	lr, r0, #20
 800a564:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a568:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a56c:	f108 0210 	add.w	r2, r8, #16
 800a570:	46f2      	mov	sl, lr
 800a572:	2100      	movs	r1, #0
 800a574:	f859 3b04 	ldr.w	r3, [r9], #4
 800a578:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a57c:	fa11 f88b 	uxtah	r8, r1, fp
 800a580:	b299      	uxth	r1, r3
 800a582:	0c1b      	lsrs	r3, r3, #16
 800a584:	eba8 0801 	sub.w	r8, r8, r1
 800a588:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a58c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a590:	fa1f f888 	uxth.w	r8, r8
 800a594:	1419      	asrs	r1, r3, #16
 800a596:	454e      	cmp	r6, r9
 800a598:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a59c:	f84a 3b04 	str.w	r3, [sl], #4
 800a5a0:	d8e8      	bhi.n	800a574 <__mdiff+0x80>
 800a5a2:	1b33      	subs	r3, r6, r4
 800a5a4:	3b15      	subs	r3, #21
 800a5a6:	f023 0303 	bic.w	r3, r3, #3
 800a5aa:	3304      	adds	r3, #4
 800a5ac:	3415      	adds	r4, #21
 800a5ae:	42a6      	cmp	r6, r4
 800a5b0:	bf38      	it	cc
 800a5b2:	2304      	movcc	r3, #4
 800a5b4:	441d      	add	r5, r3
 800a5b6:	4473      	add	r3, lr
 800a5b8:	469e      	mov	lr, r3
 800a5ba:	462e      	mov	r6, r5
 800a5bc:	4566      	cmp	r6, ip
 800a5be:	d30e      	bcc.n	800a5de <__mdiff+0xea>
 800a5c0:	f10c 0203 	add.w	r2, ip, #3
 800a5c4:	1b52      	subs	r2, r2, r5
 800a5c6:	f022 0203 	bic.w	r2, r2, #3
 800a5ca:	3d03      	subs	r5, #3
 800a5cc:	45ac      	cmp	ip, r5
 800a5ce:	bf38      	it	cc
 800a5d0:	2200      	movcc	r2, #0
 800a5d2:	4413      	add	r3, r2
 800a5d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a5d8:	b17a      	cbz	r2, 800a5fa <__mdiff+0x106>
 800a5da:	6107      	str	r7, [r0, #16]
 800a5dc:	e7a4      	b.n	800a528 <__mdiff+0x34>
 800a5de:	f856 8b04 	ldr.w	r8, [r6], #4
 800a5e2:	fa11 f288 	uxtah	r2, r1, r8
 800a5e6:	1414      	asrs	r4, r2, #16
 800a5e8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a5ec:	b292      	uxth	r2, r2
 800a5ee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a5f2:	f84e 2b04 	str.w	r2, [lr], #4
 800a5f6:	1421      	asrs	r1, r4, #16
 800a5f8:	e7e0      	b.n	800a5bc <__mdiff+0xc8>
 800a5fa:	3f01      	subs	r7, #1
 800a5fc:	e7ea      	b.n	800a5d4 <__mdiff+0xe0>
 800a5fe:	bf00      	nop
 800a600:	0800d534 	.word	0x0800d534
 800a604:	0800d545 	.word	0x0800d545

0800a608 <__d2b>:
 800a608:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a60c:	460f      	mov	r7, r1
 800a60e:	2101      	movs	r1, #1
 800a610:	ec59 8b10 	vmov	r8, r9, d0
 800a614:	4616      	mov	r6, r2
 800a616:	f7ff fcd5 	bl	8009fc4 <_Balloc>
 800a61a:	4604      	mov	r4, r0
 800a61c:	b930      	cbnz	r0, 800a62c <__d2b+0x24>
 800a61e:	4602      	mov	r2, r0
 800a620:	4b24      	ldr	r3, [pc, #144]	; (800a6b4 <__d2b+0xac>)
 800a622:	4825      	ldr	r0, [pc, #148]	; (800a6b8 <__d2b+0xb0>)
 800a624:	f240 310f 	movw	r1, #783	; 0x30f
 800a628:	f7fe fd32 	bl	8009090 <__assert_func>
 800a62c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a630:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a634:	bb2d      	cbnz	r5, 800a682 <__d2b+0x7a>
 800a636:	9301      	str	r3, [sp, #4]
 800a638:	f1b8 0300 	subs.w	r3, r8, #0
 800a63c:	d026      	beq.n	800a68c <__d2b+0x84>
 800a63e:	4668      	mov	r0, sp
 800a640:	9300      	str	r3, [sp, #0]
 800a642:	f7ff fd87 	bl	800a154 <__lo0bits>
 800a646:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a64a:	b1e8      	cbz	r0, 800a688 <__d2b+0x80>
 800a64c:	f1c0 0320 	rsb	r3, r0, #32
 800a650:	fa02 f303 	lsl.w	r3, r2, r3
 800a654:	430b      	orrs	r3, r1
 800a656:	40c2      	lsrs	r2, r0
 800a658:	6163      	str	r3, [r4, #20]
 800a65a:	9201      	str	r2, [sp, #4]
 800a65c:	9b01      	ldr	r3, [sp, #4]
 800a65e:	61a3      	str	r3, [r4, #24]
 800a660:	2b00      	cmp	r3, #0
 800a662:	bf14      	ite	ne
 800a664:	2202      	movne	r2, #2
 800a666:	2201      	moveq	r2, #1
 800a668:	6122      	str	r2, [r4, #16]
 800a66a:	b1bd      	cbz	r5, 800a69c <__d2b+0x94>
 800a66c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a670:	4405      	add	r5, r0
 800a672:	603d      	str	r5, [r7, #0]
 800a674:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a678:	6030      	str	r0, [r6, #0]
 800a67a:	4620      	mov	r0, r4
 800a67c:	b003      	add	sp, #12
 800a67e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a686:	e7d6      	b.n	800a636 <__d2b+0x2e>
 800a688:	6161      	str	r1, [r4, #20]
 800a68a:	e7e7      	b.n	800a65c <__d2b+0x54>
 800a68c:	a801      	add	r0, sp, #4
 800a68e:	f7ff fd61 	bl	800a154 <__lo0bits>
 800a692:	9b01      	ldr	r3, [sp, #4]
 800a694:	6163      	str	r3, [r4, #20]
 800a696:	3020      	adds	r0, #32
 800a698:	2201      	movs	r2, #1
 800a69a:	e7e5      	b.n	800a668 <__d2b+0x60>
 800a69c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a6a4:	6038      	str	r0, [r7, #0]
 800a6a6:	6918      	ldr	r0, [r3, #16]
 800a6a8:	f7ff fd34 	bl	800a114 <__hi0bits>
 800a6ac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6b0:	e7e2      	b.n	800a678 <__d2b+0x70>
 800a6b2:	bf00      	nop
 800a6b4:	0800d534 	.word	0x0800d534
 800a6b8:	0800d545 	.word	0x0800d545

0800a6bc <__ssputs_r>:
 800a6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c0:	688e      	ldr	r6, [r1, #8]
 800a6c2:	461f      	mov	r7, r3
 800a6c4:	42be      	cmp	r6, r7
 800a6c6:	680b      	ldr	r3, [r1, #0]
 800a6c8:	4682      	mov	sl, r0
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	4690      	mov	r8, r2
 800a6ce:	d82c      	bhi.n	800a72a <__ssputs_r+0x6e>
 800a6d0:	898a      	ldrh	r2, [r1, #12]
 800a6d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6d6:	d026      	beq.n	800a726 <__ssputs_r+0x6a>
 800a6d8:	6965      	ldr	r5, [r4, #20]
 800a6da:	6909      	ldr	r1, [r1, #16]
 800a6dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6e0:	eba3 0901 	sub.w	r9, r3, r1
 800a6e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6e8:	1c7b      	adds	r3, r7, #1
 800a6ea:	444b      	add	r3, r9
 800a6ec:	106d      	asrs	r5, r5, #1
 800a6ee:	429d      	cmp	r5, r3
 800a6f0:	bf38      	it	cc
 800a6f2:	461d      	movcc	r5, r3
 800a6f4:	0553      	lsls	r3, r2, #21
 800a6f6:	d527      	bpl.n	800a748 <__ssputs_r+0x8c>
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	f7ff fbd7 	bl	8009eac <_malloc_r>
 800a6fe:	4606      	mov	r6, r0
 800a700:	b360      	cbz	r0, 800a75c <__ssputs_r+0xa0>
 800a702:	6921      	ldr	r1, [r4, #16]
 800a704:	464a      	mov	r2, r9
 800a706:	f7fe fcb4 	bl	8009072 <memcpy>
 800a70a:	89a3      	ldrh	r3, [r4, #12]
 800a70c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a714:	81a3      	strh	r3, [r4, #12]
 800a716:	6126      	str	r6, [r4, #16]
 800a718:	6165      	str	r5, [r4, #20]
 800a71a:	444e      	add	r6, r9
 800a71c:	eba5 0509 	sub.w	r5, r5, r9
 800a720:	6026      	str	r6, [r4, #0]
 800a722:	60a5      	str	r5, [r4, #8]
 800a724:	463e      	mov	r6, r7
 800a726:	42be      	cmp	r6, r7
 800a728:	d900      	bls.n	800a72c <__ssputs_r+0x70>
 800a72a:	463e      	mov	r6, r7
 800a72c:	6820      	ldr	r0, [r4, #0]
 800a72e:	4632      	mov	r2, r6
 800a730:	4641      	mov	r1, r8
 800a732:	f000 f9db 	bl	800aaec <memmove>
 800a736:	68a3      	ldr	r3, [r4, #8]
 800a738:	1b9b      	subs	r3, r3, r6
 800a73a:	60a3      	str	r3, [r4, #8]
 800a73c:	6823      	ldr	r3, [r4, #0]
 800a73e:	4433      	add	r3, r6
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	2000      	movs	r0, #0
 800a744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a748:	462a      	mov	r2, r5
 800a74a:	f000 fa28 	bl	800ab9e <_realloc_r>
 800a74e:	4606      	mov	r6, r0
 800a750:	2800      	cmp	r0, #0
 800a752:	d1e0      	bne.n	800a716 <__ssputs_r+0x5a>
 800a754:	6921      	ldr	r1, [r4, #16]
 800a756:	4650      	mov	r0, sl
 800a758:	f7ff fb34 	bl	8009dc4 <_free_r>
 800a75c:	230c      	movs	r3, #12
 800a75e:	f8ca 3000 	str.w	r3, [sl]
 800a762:	89a3      	ldrh	r3, [r4, #12]
 800a764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a768:	81a3      	strh	r3, [r4, #12]
 800a76a:	f04f 30ff 	mov.w	r0, #4294967295
 800a76e:	e7e9      	b.n	800a744 <__ssputs_r+0x88>

0800a770 <_svfiprintf_r>:
 800a770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a774:	4698      	mov	r8, r3
 800a776:	898b      	ldrh	r3, [r1, #12]
 800a778:	061b      	lsls	r3, r3, #24
 800a77a:	b09d      	sub	sp, #116	; 0x74
 800a77c:	4607      	mov	r7, r0
 800a77e:	460d      	mov	r5, r1
 800a780:	4614      	mov	r4, r2
 800a782:	d50e      	bpl.n	800a7a2 <_svfiprintf_r+0x32>
 800a784:	690b      	ldr	r3, [r1, #16]
 800a786:	b963      	cbnz	r3, 800a7a2 <_svfiprintf_r+0x32>
 800a788:	2140      	movs	r1, #64	; 0x40
 800a78a:	f7ff fb8f 	bl	8009eac <_malloc_r>
 800a78e:	6028      	str	r0, [r5, #0]
 800a790:	6128      	str	r0, [r5, #16]
 800a792:	b920      	cbnz	r0, 800a79e <_svfiprintf_r+0x2e>
 800a794:	230c      	movs	r3, #12
 800a796:	603b      	str	r3, [r7, #0]
 800a798:	f04f 30ff 	mov.w	r0, #4294967295
 800a79c:	e0d0      	b.n	800a940 <_svfiprintf_r+0x1d0>
 800a79e:	2340      	movs	r3, #64	; 0x40
 800a7a0:	616b      	str	r3, [r5, #20]
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a6:	2320      	movs	r3, #32
 800a7a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7b0:	2330      	movs	r3, #48	; 0x30
 800a7b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a958 <_svfiprintf_r+0x1e8>
 800a7b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7ba:	f04f 0901 	mov.w	r9, #1
 800a7be:	4623      	mov	r3, r4
 800a7c0:	469a      	mov	sl, r3
 800a7c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7c6:	b10a      	cbz	r2, 800a7cc <_svfiprintf_r+0x5c>
 800a7c8:	2a25      	cmp	r2, #37	; 0x25
 800a7ca:	d1f9      	bne.n	800a7c0 <_svfiprintf_r+0x50>
 800a7cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a7d0:	d00b      	beq.n	800a7ea <_svfiprintf_r+0x7a>
 800a7d2:	465b      	mov	r3, fp
 800a7d4:	4622      	mov	r2, r4
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	4638      	mov	r0, r7
 800a7da:	f7ff ff6f 	bl	800a6bc <__ssputs_r>
 800a7de:	3001      	adds	r0, #1
 800a7e0:	f000 80a9 	beq.w	800a936 <_svfiprintf_r+0x1c6>
 800a7e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7e6:	445a      	add	r2, fp
 800a7e8:	9209      	str	r2, [sp, #36]	; 0x24
 800a7ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f000 80a1 	beq.w	800a936 <_svfiprintf_r+0x1c6>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7fe:	f10a 0a01 	add.w	sl, sl, #1
 800a802:	9304      	str	r3, [sp, #16]
 800a804:	9307      	str	r3, [sp, #28]
 800a806:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a80a:	931a      	str	r3, [sp, #104]	; 0x68
 800a80c:	4654      	mov	r4, sl
 800a80e:	2205      	movs	r2, #5
 800a810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a814:	4850      	ldr	r0, [pc, #320]	; (800a958 <_svfiprintf_r+0x1e8>)
 800a816:	f7f5 fce3 	bl	80001e0 <memchr>
 800a81a:	9a04      	ldr	r2, [sp, #16]
 800a81c:	b9d8      	cbnz	r0, 800a856 <_svfiprintf_r+0xe6>
 800a81e:	06d0      	lsls	r0, r2, #27
 800a820:	bf44      	itt	mi
 800a822:	2320      	movmi	r3, #32
 800a824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a828:	0711      	lsls	r1, r2, #28
 800a82a:	bf44      	itt	mi
 800a82c:	232b      	movmi	r3, #43	; 0x2b
 800a82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a832:	f89a 3000 	ldrb.w	r3, [sl]
 800a836:	2b2a      	cmp	r3, #42	; 0x2a
 800a838:	d015      	beq.n	800a866 <_svfiprintf_r+0xf6>
 800a83a:	9a07      	ldr	r2, [sp, #28]
 800a83c:	4654      	mov	r4, sl
 800a83e:	2000      	movs	r0, #0
 800a840:	f04f 0c0a 	mov.w	ip, #10
 800a844:	4621      	mov	r1, r4
 800a846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a84a:	3b30      	subs	r3, #48	; 0x30
 800a84c:	2b09      	cmp	r3, #9
 800a84e:	d94d      	bls.n	800a8ec <_svfiprintf_r+0x17c>
 800a850:	b1b0      	cbz	r0, 800a880 <_svfiprintf_r+0x110>
 800a852:	9207      	str	r2, [sp, #28]
 800a854:	e014      	b.n	800a880 <_svfiprintf_r+0x110>
 800a856:	eba0 0308 	sub.w	r3, r0, r8
 800a85a:	fa09 f303 	lsl.w	r3, r9, r3
 800a85e:	4313      	orrs	r3, r2
 800a860:	9304      	str	r3, [sp, #16]
 800a862:	46a2      	mov	sl, r4
 800a864:	e7d2      	b.n	800a80c <_svfiprintf_r+0x9c>
 800a866:	9b03      	ldr	r3, [sp, #12]
 800a868:	1d19      	adds	r1, r3, #4
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	9103      	str	r1, [sp, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	bfbb      	ittet	lt
 800a872:	425b      	neglt	r3, r3
 800a874:	f042 0202 	orrlt.w	r2, r2, #2
 800a878:	9307      	strge	r3, [sp, #28]
 800a87a:	9307      	strlt	r3, [sp, #28]
 800a87c:	bfb8      	it	lt
 800a87e:	9204      	strlt	r2, [sp, #16]
 800a880:	7823      	ldrb	r3, [r4, #0]
 800a882:	2b2e      	cmp	r3, #46	; 0x2e
 800a884:	d10c      	bne.n	800a8a0 <_svfiprintf_r+0x130>
 800a886:	7863      	ldrb	r3, [r4, #1]
 800a888:	2b2a      	cmp	r3, #42	; 0x2a
 800a88a:	d134      	bne.n	800a8f6 <_svfiprintf_r+0x186>
 800a88c:	9b03      	ldr	r3, [sp, #12]
 800a88e:	1d1a      	adds	r2, r3, #4
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	9203      	str	r2, [sp, #12]
 800a894:	2b00      	cmp	r3, #0
 800a896:	bfb8      	it	lt
 800a898:	f04f 33ff 	movlt.w	r3, #4294967295
 800a89c:	3402      	adds	r4, #2
 800a89e:	9305      	str	r3, [sp, #20]
 800a8a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a968 <_svfiprintf_r+0x1f8>
 800a8a4:	7821      	ldrb	r1, [r4, #0]
 800a8a6:	2203      	movs	r2, #3
 800a8a8:	4650      	mov	r0, sl
 800a8aa:	f7f5 fc99 	bl	80001e0 <memchr>
 800a8ae:	b138      	cbz	r0, 800a8c0 <_svfiprintf_r+0x150>
 800a8b0:	9b04      	ldr	r3, [sp, #16]
 800a8b2:	eba0 000a 	sub.w	r0, r0, sl
 800a8b6:	2240      	movs	r2, #64	; 0x40
 800a8b8:	4082      	lsls	r2, r0
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	3401      	adds	r4, #1
 800a8be:	9304      	str	r3, [sp, #16]
 800a8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8c4:	4825      	ldr	r0, [pc, #148]	; (800a95c <_svfiprintf_r+0x1ec>)
 800a8c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8ca:	2206      	movs	r2, #6
 800a8cc:	f7f5 fc88 	bl	80001e0 <memchr>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d038      	beq.n	800a946 <_svfiprintf_r+0x1d6>
 800a8d4:	4b22      	ldr	r3, [pc, #136]	; (800a960 <_svfiprintf_r+0x1f0>)
 800a8d6:	bb1b      	cbnz	r3, 800a920 <_svfiprintf_r+0x1b0>
 800a8d8:	9b03      	ldr	r3, [sp, #12]
 800a8da:	3307      	adds	r3, #7
 800a8dc:	f023 0307 	bic.w	r3, r3, #7
 800a8e0:	3308      	adds	r3, #8
 800a8e2:	9303      	str	r3, [sp, #12]
 800a8e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e6:	4433      	add	r3, r6
 800a8e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ea:	e768      	b.n	800a7be <_svfiprintf_r+0x4e>
 800a8ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8f0:	460c      	mov	r4, r1
 800a8f2:	2001      	movs	r0, #1
 800a8f4:	e7a6      	b.n	800a844 <_svfiprintf_r+0xd4>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	3401      	adds	r4, #1
 800a8fa:	9305      	str	r3, [sp, #20]
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	f04f 0c0a 	mov.w	ip, #10
 800a902:	4620      	mov	r0, r4
 800a904:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a908:	3a30      	subs	r2, #48	; 0x30
 800a90a:	2a09      	cmp	r2, #9
 800a90c:	d903      	bls.n	800a916 <_svfiprintf_r+0x1a6>
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d0c6      	beq.n	800a8a0 <_svfiprintf_r+0x130>
 800a912:	9105      	str	r1, [sp, #20]
 800a914:	e7c4      	b.n	800a8a0 <_svfiprintf_r+0x130>
 800a916:	fb0c 2101 	mla	r1, ip, r1, r2
 800a91a:	4604      	mov	r4, r0
 800a91c:	2301      	movs	r3, #1
 800a91e:	e7f0      	b.n	800a902 <_svfiprintf_r+0x192>
 800a920:	ab03      	add	r3, sp, #12
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	462a      	mov	r2, r5
 800a926:	4b0f      	ldr	r3, [pc, #60]	; (800a964 <_svfiprintf_r+0x1f4>)
 800a928:	a904      	add	r1, sp, #16
 800a92a:	4638      	mov	r0, r7
 800a92c:	f7fd fe22 	bl	8008574 <_printf_float>
 800a930:	1c42      	adds	r2, r0, #1
 800a932:	4606      	mov	r6, r0
 800a934:	d1d6      	bne.n	800a8e4 <_svfiprintf_r+0x174>
 800a936:	89ab      	ldrh	r3, [r5, #12]
 800a938:	065b      	lsls	r3, r3, #25
 800a93a:	f53f af2d 	bmi.w	800a798 <_svfiprintf_r+0x28>
 800a93e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a940:	b01d      	add	sp, #116	; 0x74
 800a942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a946:	ab03      	add	r3, sp, #12
 800a948:	9300      	str	r3, [sp, #0]
 800a94a:	462a      	mov	r2, r5
 800a94c:	4b05      	ldr	r3, [pc, #20]	; (800a964 <_svfiprintf_r+0x1f4>)
 800a94e:	a904      	add	r1, sp, #16
 800a950:	4638      	mov	r0, r7
 800a952:	f7fe f8b3 	bl	8008abc <_printf_i>
 800a956:	e7eb      	b.n	800a930 <_svfiprintf_r+0x1c0>
 800a958:	0800d69c 	.word	0x0800d69c
 800a95c:	0800d6a6 	.word	0x0800d6a6
 800a960:	08008575 	.word	0x08008575
 800a964:	0800a6bd 	.word	0x0800a6bd
 800a968:	0800d6a2 	.word	0x0800d6a2

0800a96c <__sflush_r>:
 800a96c:	898a      	ldrh	r2, [r1, #12]
 800a96e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a972:	4605      	mov	r5, r0
 800a974:	0710      	lsls	r0, r2, #28
 800a976:	460c      	mov	r4, r1
 800a978:	d458      	bmi.n	800aa2c <__sflush_r+0xc0>
 800a97a:	684b      	ldr	r3, [r1, #4]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	dc05      	bgt.n	800a98c <__sflush_r+0x20>
 800a980:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a982:	2b00      	cmp	r3, #0
 800a984:	dc02      	bgt.n	800a98c <__sflush_r+0x20>
 800a986:	2000      	movs	r0, #0
 800a988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a98c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a98e:	2e00      	cmp	r6, #0
 800a990:	d0f9      	beq.n	800a986 <__sflush_r+0x1a>
 800a992:	2300      	movs	r3, #0
 800a994:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a998:	682f      	ldr	r7, [r5, #0]
 800a99a:	6a21      	ldr	r1, [r4, #32]
 800a99c:	602b      	str	r3, [r5, #0]
 800a99e:	d032      	beq.n	800aa06 <__sflush_r+0x9a>
 800a9a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9a2:	89a3      	ldrh	r3, [r4, #12]
 800a9a4:	075a      	lsls	r2, r3, #29
 800a9a6:	d505      	bpl.n	800a9b4 <__sflush_r+0x48>
 800a9a8:	6863      	ldr	r3, [r4, #4]
 800a9aa:	1ac0      	subs	r0, r0, r3
 800a9ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9ae:	b10b      	cbz	r3, 800a9b4 <__sflush_r+0x48>
 800a9b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9b2:	1ac0      	subs	r0, r0, r3
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9ba:	6a21      	ldr	r1, [r4, #32]
 800a9bc:	4628      	mov	r0, r5
 800a9be:	47b0      	blx	r6
 800a9c0:	1c43      	adds	r3, r0, #1
 800a9c2:	89a3      	ldrh	r3, [r4, #12]
 800a9c4:	d106      	bne.n	800a9d4 <__sflush_r+0x68>
 800a9c6:	6829      	ldr	r1, [r5, #0]
 800a9c8:	291d      	cmp	r1, #29
 800a9ca:	d82b      	bhi.n	800aa24 <__sflush_r+0xb8>
 800a9cc:	4a29      	ldr	r2, [pc, #164]	; (800aa74 <__sflush_r+0x108>)
 800a9ce:	410a      	asrs	r2, r1
 800a9d0:	07d6      	lsls	r6, r2, #31
 800a9d2:	d427      	bmi.n	800aa24 <__sflush_r+0xb8>
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	6062      	str	r2, [r4, #4]
 800a9d8:	04d9      	lsls	r1, r3, #19
 800a9da:	6922      	ldr	r2, [r4, #16]
 800a9dc:	6022      	str	r2, [r4, #0]
 800a9de:	d504      	bpl.n	800a9ea <__sflush_r+0x7e>
 800a9e0:	1c42      	adds	r2, r0, #1
 800a9e2:	d101      	bne.n	800a9e8 <__sflush_r+0x7c>
 800a9e4:	682b      	ldr	r3, [r5, #0]
 800a9e6:	b903      	cbnz	r3, 800a9ea <__sflush_r+0x7e>
 800a9e8:	6560      	str	r0, [r4, #84]	; 0x54
 800a9ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9ec:	602f      	str	r7, [r5, #0]
 800a9ee:	2900      	cmp	r1, #0
 800a9f0:	d0c9      	beq.n	800a986 <__sflush_r+0x1a>
 800a9f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9f6:	4299      	cmp	r1, r3
 800a9f8:	d002      	beq.n	800aa00 <__sflush_r+0x94>
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	f7ff f9e2 	bl	8009dc4 <_free_r>
 800aa00:	2000      	movs	r0, #0
 800aa02:	6360      	str	r0, [r4, #52]	; 0x34
 800aa04:	e7c0      	b.n	800a988 <__sflush_r+0x1c>
 800aa06:	2301      	movs	r3, #1
 800aa08:	4628      	mov	r0, r5
 800aa0a:	47b0      	blx	r6
 800aa0c:	1c41      	adds	r1, r0, #1
 800aa0e:	d1c8      	bne.n	800a9a2 <__sflush_r+0x36>
 800aa10:	682b      	ldr	r3, [r5, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d0c5      	beq.n	800a9a2 <__sflush_r+0x36>
 800aa16:	2b1d      	cmp	r3, #29
 800aa18:	d001      	beq.n	800aa1e <__sflush_r+0xb2>
 800aa1a:	2b16      	cmp	r3, #22
 800aa1c:	d101      	bne.n	800aa22 <__sflush_r+0xb6>
 800aa1e:	602f      	str	r7, [r5, #0]
 800aa20:	e7b1      	b.n	800a986 <__sflush_r+0x1a>
 800aa22:	89a3      	ldrh	r3, [r4, #12]
 800aa24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa28:	81a3      	strh	r3, [r4, #12]
 800aa2a:	e7ad      	b.n	800a988 <__sflush_r+0x1c>
 800aa2c:	690f      	ldr	r7, [r1, #16]
 800aa2e:	2f00      	cmp	r7, #0
 800aa30:	d0a9      	beq.n	800a986 <__sflush_r+0x1a>
 800aa32:	0793      	lsls	r3, r2, #30
 800aa34:	680e      	ldr	r6, [r1, #0]
 800aa36:	bf08      	it	eq
 800aa38:	694b      	ldreq	r3, [r1, #20]
 800aa3a:	600f      	str	r7, [r1, #0]
 800aa3c:	bf18      	it	ne
 800aa3e:	2300      	movne	r3, #0
 800aa40:	eba6 0807 	sub.w	r8, r6, r7
 800aa44:	608b      	str	r3, [r1, #8]
 800aa46:	f1b8 0f00 	cmp.w	r8, #0
 800aa4a:	dd9c      	ble.n	800a986 <__sflush_r+0x1a>
 800aa4c:	6a21      	ldr	r1, [r4, #32]
 800aa4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa50:	4643      	mov	r3, r8
 800aa52:	463a      	mov	r2, r7
 800aa54:	4628      	mov	r0, r5
 800aa56:	47b0      	blx	r6
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	dc06      	bgt.n	800aa6a <__sflush_r+0xfe>
 800aa5c:	89a3      	ldrh	r3, [r4, #12]
 800aa5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa62:	81a3      	strh	r3, [r4, #12]
 800aa64:	f04f 30ff 	mov.w	r0, #4294967295
 800aa68:	e78e      	b.n	800a988 <__sflush_r+0x1c>
 800aa6a:	4407      	add	r7, r0
 800aa6c:	eba8 0800 	sub.w	r8, r8, r0
 800aa70:	e7e9      	b.n	800aa46 <__sflush_r+0xda>
 800aa72:	bf00      	nop
 800aa74:	dfbffffe 	.word	0xdfbffffe

0800aa78 <_fflush_r>:
 800aa78:	b538      	push	{r3, r4, r5, lr}
 800aa7a:	690b      	ldr	r3, [r1, #16]
 800aa7c:	4605      	mov	r5, r0
 800aa7e:	460c      	mov	r4, r1
 800aa80:	b913      	cbnz	r3, 800aa88 <_fflush_r+0x10>
 800aa82:	2500      	movs	r5, #0
 800aa84:	4628      	mov	r0, r5
 800aa86:	bd38      	pop	{r3, r4, r5, pc}
 800aa88:	b118      	cbz	r0, 800aa92 <_fflush_r+0x1a>
 800aa8a:	6a03      	ldr	r3, [r0, #32]
 800aa8c:	b90b      	cbnz	r3, 800aa92 <_fflush_r+0x1a>
 800aa8e:	f7fe f9c3 	bl	8008e18 <__sinit>
 800aa92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d0f3      	beq.n	800aa82 <_fflush_r+0xa>
 800aa9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa9c:	07d0      	lsls	r0, r2, #31
 800aa9e:	d404      	bmi.n	800aaaa <_fflush_r+0x32>
 800aaa0:	0599      	lsls	r1, r3, #22
 800aaa2:	d402      	bmi.n	800aaaa <_fflush_r+0x32>
 800aaa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaa6:	f7fe fae2 	bl	800906e <__retarget_lock_acquire_recursive>
 800aaaa:	4628      	mov	r0, r5
 800aaac:	4621      	mov	r1, r4
 800aaae:	f7ff ff5d 	bl	800a96c <__sflush_r>
 800aab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aab4:	07da      	lsls	r2, r3, #31
 800aab6:	4605      	mov	r5, r0
 800aab8:	d4e4      	bmi.n	800aa84 <_fflush_r+0xc>
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	059b      	lsls	r3, r3, #22
 800aabe:	d4e1      	bmi.n	800aa84 <_fflush_r+0xc>
 800aac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aac2:	f7fe fad5 	bl	8009070 <__retarget_lock_release_recursive>
 800aac6:	e7dd      	b.n	800aa84 <_fflush_r+0xc>

0800aac8 <fiprintf>:
 800aac8:	b40e      	push	{r1, r2, r3}
 800aaca:	b503      	push	{r0, r1, lr}
 800aacc:	4601      	mov	r1, r0
 800aace:	ab03      	add	r3, sp, #12
 800aad0:	4805      	ldr	r0, [pc, #20]	; (800aae8 <fiprintf+0x20>)
 800aad2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aad6:	6800      	ldr	r0, [r0, #0]
 800aad8:	9301      	str	r3, [sp, #4]
 800aada:	f000 f8c5 	bl	800ac68 <_vfiprintf_r>
 800aade:	b002      	add	sp, #8
 800aae0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aae4:	b003      	add	sp, #12
 800aae6:	4770      	bx	lr
 800aae8:	20000070 	.word	0x20000070

0800aaec <memmove>:
 800aaec:	4288      	cmp	r0, r1
 800aaee:	b510      	push	{r4, lr}
 800aaf0:	eb01 0402 	add.w	r4, r1, r2
 800aaf4:	d902      	bls.n	800aafc <memmove+0x10>
 800aaf6:	4284      	cmp	r4, r0
 800aaf8:	4623      	mov	r3, r4
 800aafa:	d807      	bhi.n	800ab0c <memmove+0x20>
 800aafc:	1e43      	subs	r3, r0, #1
 800aafe:	42a1      	cmp	r1, r4
 800ab00:	d008      	beq.n	800ab14 <memmove+0x28>
 800ab02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab0a:	e7f8      	b.n	800aafe <memmove+0x12>
 800ab0c:	4402      	add	r2, r0
 800ab0e:	4601      	mov	r1, r0
 800ab10:	428a      	cmp	r2, r1
 800ab12:	d100      	bne.n	800ab16 <memmove+0x2a>
 800ab14:	bd10      	pop	{r4, pc}
 800ab16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab1e:	e7f7      	b.n	800ab10 <memmove+0x24>

0800ab20 <_sbrk_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4d06      	ldr	r5, [pc, #24]	; (800ab3c <_sbrk_r+0x1c>)
 800ab24:	2300      	movs	r3, #0
 800ab26:	4604      	mov	r4, r0
 800ab28:	4608      	mov	r0, r1
 800ab2a:	602b      	str	r3, [r5, #0]
 800ab2c:	f7f8 f8c8 	bl	8002cc0 <_sbrk>
 800ab30:	1c43      	adds	r3, r0, #1
 800ab32:	d102      	bne.n	800ab3a <_sbrk_r+0x1a>
 800ab34:	682b      	ldr	r3, [r5, #0]
 800ab36:	b103      	cbz	r3, 800ab3a <_sbrk_r+0x1a>
 800ab38:	6023      	str	r3, [r4, #0]
 800ab3a:	bd38      	pop	{r3, r4, r5, pc}
 800ab3c:	20004644 	.word	0x20004644

0800ab40 <abort>:
 800ab40:	b508      	push	{r3, lr}
 800ab42:	2006      	movs	r0, #6
 800ab44:	f000 fa68 	bl	800b018 <raise>
 800ab48:	2001      	movs	r0, #1
 800ab4a:	f7f8 f841 	bl	8002bd0 <_exit>

0800ab4e <_calloc_r>:
 800ab4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab50:	fba1 2402 	umull	r2, r4, r1, r2
 800ab54:	b94c      	cbnz	r4, 800ab6a <_calloc_r+0x1c>
 800ab56:	4611      	mov	r1, r2
 800ab58:	9201      	str	r2, [sp, #4]
 800ab5a:	f7ff f9a7 	bl	8009eac <_malloc_r>
 800ab5e:	9a01      	ldr	r2, [sp, #4]
 800ab60:	4605      	mov	r5, r0
 800ab62:	b930      	cbnz	r0, 800ab72 <_calloc_r+0x24>
 800ab64:	4628      	mov	r0, r5
 800ab66:	b003      	add	sp, #12
 800ab68:	bd30      	pop	{r4, r5, pc}
 800ab6a:	220c      	movs	r2, #12
 800ab6c:	6002      	str	r2, [r0, #0]
 800ab6e:	2500      	movs	r5, #0
 800ab70:	e7f8      	b.n	800ab64 <_calloc_r+0x16>
 800ab72:	4621      	mov	r1, r4
 800ab74:	f7fe f9fd 	bl	8008f72 <memset>
 800ab78:	e7f4      	b.n	800ab64 <_calloc_r+0x16>

0800ab7a <__ascii_mbtowc>:
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	b901      	cbnz	r1, 800ab80 <__ascii_mbtowc+0x6>
 800ab7e:	a901      	add	r1, sp, #4
 800ab80:	b142      	cbz	r2, 800ab94 <__ascii_mbtowc+0x1a>
 800ab82:	b14b      	cbz	r3, 800ab98 <__ascii_mbtowc+0x1e>
 800ab84:	7813      	ldrb	r3, [r2, #0]
 800ab86:	600b      	str	r3, [r1, #0]
 800ab88:	7812      	ldrb	r2, [r2, #0]
 800ab8a:	1e10      	subs	r0, r2, #0
 800ab8c:	bf18      	it	ne
 800ab8e:	2001      	movne	r0, #1
 800ab90:	b002      	add	sp, #8
 800ab92:	4770      	bx	lr
 800ab94:	4610      	mov	r0, r2
 800ab96:	e7fb      	b.n	800ab90 <__ascii_mbtowc+0x16>
 800ab98:	f06f 0001 	mvn.w	r0, #1
 800ab9c:	e7f8      	b.n	800ab90 <__ascii_mbtowc+0x16>

0800ab9e <_realloc_r>:
 800ab9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba2:	4680      	mov	r8, r0
 800aba4:	4614      	mov	r4, r2
 800aba6:	460e      	mov	r6, r1
 800aba8:	b921      	cbnz	r1, 800abb4 <_realloc_r+0x16>
 800abaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abae:	4611      	mov	r1, r2
 800abb0:	f7ff b97c 	b.w	8009eac <_malloc_r>
 800abb4:	b92a      	cbnz	r2, 800abc2 <_realloc_r+0x24>
 800abb6:	f7ff f905 	bl	8009dc4 <_free_r>
 800abba:	4625      	mov	r5, r4
 800abbc:	4628      	mov	r0, r5
 800abbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abc2:	f000 fa45 	bl	800b050 <_malloc_usable_size_r>
 800abc6:	4284      	cmp	r4, r0
 800abc8:	4607      	mov	r7, r0
 800abca:	d802      	bhi.n	800abd2 <_realloc_r+0x34>
 800abcc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800abd0:	d812      	bhi.n	800abf8 <_realloc_r+0x5a>
 800abd2:	4621      	mov	r1, r4
 800abd4:	4640      	mov	r0, r8
 800abd6:	f7ff f969 	bl	8009eac <_malloc_r>
 800abda:	4605      	mov	r5, r0
 800abdc:	2800      	cmp	r0, #0
 800abde:	d0ed      	beq.n	800abbc <_realloc_r+0x1e>
 800abe0:	42bc      	cmp	r4, r7
 800abe2:	4622      	mov	r2, r4
 800abe4:	4631      	mov	r1, r6
 800abe6:	bf28      	it	cs
 800abe8:	463a      	movcs	r2, r7
 800abea:	f7fe fa42 	bl	8009072 <memcpy>
 800abee:	4631      	mov	r1, r6
 800abf0:	4640      	mov	r0, r8
 800abf2:	f7ff f8e7 	bl	8009dc4 <_free_r>
 800abf6:	e7e1      	b.n	800abbc <_realloc_r+0x1e>
 800abf8:	4635      	mov	r5, r6
 800abfa:	e7df      	b.n	800abbc <_realloc_r+0x1e>

0800abfc <__ascii_wctomb>:
 800abfc:	b149      	cbz	r1, 800ac12 <__ascii_wctomb+0x16>
 800abfe:	2aff      	cmp	r2, #255	; 0xff
 800ac00:	bf85      	ittet	hi
 800ac02:	238a      	movhi	r3, #138	; 0x8a
 800ac04:	6003      	strhi	r3, [r0, #0]
 800ac06:	700a      	strbls	r2, [r1, #0]
 800ac08:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac0c:	bf98      	it	ls
 800ac0e:	2001      	movls	r0, #1
 800ac10:	4770      	bx	lr
 800ac12:	4608      	mov	r0, r1
 800ac14:	4770      	bx	lr

0800ac16 <__sfputc_r>:
 800ac16:	6893      	ldr	r3, [r2, #8]
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	b410      	push	{r4}
 800ac1e:	6093      	str	r3, [r2, #8]
 800ac20:	da08      	bge.n	800ac34 <__sfputc_r+0x1e>
 800ac22:	6994      	ldr	r4, [r2, #24]
 800ac24:	42a3      	cmp	r3, r4
 800ac26:	db01      	blt.n	800ac2c <__sfputc_r+0x16>
 800ac28:	290a      	cmp	r1, #10
 800ac2a:	d103      	bne.n	800ac34 <__sfputc_r+0x1e>
 800ac2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac30:	f000 b934 	b.w	800ae9c <__swbuf_r>
 800ac34:	6813      	ldr	r3, [r2, #0]
 800ac36:	1c58      	adds	r0, r3, #1
 800ac38:	6010      	str	r0, [r2, #0]
 800ac3a:	7019      	strb	r1, [r3, #0]
 800ac3c:	4608      	mov	r0, r1
 800ac3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <__sfputs_r>:
 800ac44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac46:	4606      	mov	r6, r0
 800ac48:	460f      	mov	r7, r1
 800ac4a:	4614      	mov	r4, r2
 800ac4c:	18d5      	adds	r5, r2, r3
 800ac4e:	42ac      	cmp	r4, r5
 800ac50:	d101      	bne.n	800ac56 <__sfputs_r+0x12>
 800ac52:	2000      	movs	r0, #0
 800ac54:	e007      	b.n	800ac66 <__sfputs_r+0x22>
 800ac56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac5a:	463a      	mov	r2, r7
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	f7ff ffda 	bl	800ac16 <__sfputc_r>
 800ac62:	1c43      	adds	r3, r0, #1
 800ac64:	d1f3      	bne.n	800ac4e <__sfputs_r+0xa>
 800ac66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ac68 <_vfiprintf_r>:
 800ac68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6c:	460d      	mov	r5, r1
 800ac6e:	b09d      	sub	sp, #116	; 0x74
 800ac70:	4614      	mov	r4, r2
 800ac72:	4698      	mov	r8, r3
 800ac74:	4606      	mov	r6, r0
 800ac76:	b118      	cbz	r0, 800ac80 <_vfiprintf_r+0x18>
 800ac78:	6a03      	ldr	r3, [r0, #32]
 800ac7a:	b90b      	cbnz	r3, 800ac80 <_vfiprintf_r+0x18>
 800ac7c:	f7fe f8cc 	bl	8008e18 <__sinit>
 800ac80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac82:	07d9      	lsls	r1, r3, #31
 800ac84:	d405      	bmi.n	800ac92 <_vfiprintf_r+0x2a>
 800ac86:	89ab      	ldrh	r3, [r5, #12]
 800ac88:	059a      	lsls	r2, r3, #22
 800ac8a:	d402      	bmi.n	800ac92 <_vfiprintf_r+0x2a>
 800ac8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac8e:	f7fe f9ee 	bl	800906e <__retarget_lock_acquire_recursive>
 800ac92:	89ab      	ldrh	r3, [r5, #12]
 800ac94:	071b      	lsls	r3, r3, #28
 800ac96:	d501      	bpl.n	800ac9c <_vfiprintf_r+0x34>
 800ac98:	692b      	ldr	r3, [r5, #16]
 800ac9a:	b99b      	cbnz	r3, 800acc4 <_vfiprintf_r+0x5c>
 800ac9c:	4629      	mov	r1, r5
 800ac9e:	4630      	mov	r0, r6
 800aca0:	f000 f93a 	bl	800af18 <__swsetup_r>
 800aca4:	b170      	cbz	r0, 800acc4 <_vfiprintf_r+0x5c>
 800aca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aca8:	07dc      	lsls	r4, r3, #31
 800acaa:	d504      	bpl.n	800acb6 <_vfiprintf_r+0x4e>
 800acac:	f04f 30ff 	mov.w	r0, #4294967295
 800acb0:	b01d      	add	sp, #116	; 0x74
 800acb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb6:	89ab      	ldrh	r3, [r5, #12]
 800acb8:	0598      	lsls	r0, r3, #22
 800acba:	d4f7      	bmi.n	800acac <_vfiprintf_r+0x44>
 800acbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acbe:	f7fe f9d7 	bl	8009070 <__retarget_lock_release_recursive>
 800acc2:	e7f3      	b.n	800acac <_vfiprintf_r+0x44>
 800acc4:	2300      	movs	r3, #0
 800acc6:	9309      	str	r3, [sp, #36]	; 0x24
 800acc8:	2320      	movs	r3, #32
 800acca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acce:	f8cd 800c 	str.w	r8, [sp, #12]
 800acd2:	2330      	movs	r3, #48	; 0x30
 800acd4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ae88 <_vfiprintf_r+0x220>
 800acd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800acdc:	f04f 0901 	mov.w	r9, #1
 800ace0:	4623      	mov	r3, r4
 800ace2:	469a      	mov	sl, r3
 800ace4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ace8:	b10a      	cbz	r2, 800acee <_vfiprintf_r+0x86>
 800acea:	2a25      	cmp	r2, #37	; 0x25
 800acec:	d1f9      	bne.n	800ace2 <_vfiprintf_r+0x7a>
 800acee:	ebba 0b04 	subs.w	fp, sl, r4
 800acf2:	d00b      	beq.n	800ad0c <_vfiprintf_r+0xa4>
 800acf4:	465b      	mov	r3, fp
 800acf6:	4622      	mov	r2, r4
 800acf8:	4629      	mov	r1, r5
 800acfa:	4630      	mov	r0, r6
 800acfc:	f7ff ffa2 	bl	800ac44 <__sfputs_r>
 800ad00:	3001      	adds	r0, #1
 800ad02:	f000 80a9 	beq.w	800ae58 <_vfiprintf_r+0x1f0>
 800ad06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad08:	445a      	add	r2, fp
 800ad0a:	9209      	str	r2, [sp, #36]	; 0x24
 800ad0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f000 80a1 	beq.w	800ae58 <_vfiprintf_r+0x1f0>
 800ad16:	2300      	movs	r3, #0
 800ad18:	f04f 32ff 	mov.w	r2, #4294967295
 800ad1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad20:	f10a 0a01 	add.w	sl, sl, #1
 800ad24:	9304      	str	r3, [sp, #16]
 800ad26:	9307      	str	r3, [sp, #28]
 800ad28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad2c:	931a      	str	r3, [sp, #104]	; 0x68
 800ad2e:	4654      	mov	r4, sl
 800ad30:	2205      	movs	r2, #5
 800ad32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad36:	4854      	ldr	r0, [pc, #336]	; (800ae88 <_vfiprintf_r+0x220>)
 800ad38:	f7f5 fa52 	bl	80001e0 <memchr>
 800ad3c:	9a04      	ldr	r2, [sp, #16]
 800ad3e:	b9d8      	cbnz	r0, 800ad78 <_vfiprintf_r+0x110>
 800ad40:	06d1      	lsls	r1, r2, #27
 800ad42:	bf44      	itt	mi
 800ad44:	2320      	movmi	r3, #32
 800ad46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad4a:	0713      	lsls	r3, r2, #28
 800ad4c:	bf44      	itt	mi
 800ad4e:	232b      	movmi	r3, #43	; 0x2b
 800ad50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad54:	f89a 3000 	ldrb.w	r3, [sl]
 800ad58:	2b2a      	cmp	r3, #42	; 0x2a
 800ad5a:	d015      	beq.n	800ad88 <_vfiprintf_r+0x120>
 800ad5c:	9a07      	ldr	r2, [sp, #28]
 800ad5e:	4654      	mov	r4, sl
 800ad60:	2000      	movs	r0, #0
 800ad62:	f04f 0c0a 	mov.w	ip, #10
 800ad66:	4621      	mov	r1, r4
 800ad68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad6c:	3b30      	subs	r3, #48	; 0x30
 800ad6e:	2b09      	cmp	r3, #9
 800ad70:	d94d      	bls.n	800ae0e <_vfiprintf_r+0x1a6>
 800ad72:	b1b0      	cbz	r0, 800ada2 <_vfiprintf_r+0x13a>
 800ad74:	9207      	str	r2, [sp, #28]
 800ad76:	e014      	b.n	800ada2 <_vfiprintf_r+0x13a>
 800ad78:	eba0 0308 	sub.w	r3, r0, r8
 800ad7c:	fa09 f303 	lsl.w	r3, r9, r3
 800ad80:	4313      	orrs	r3, r2
 800ad82:	9304      	str	r3, [sp, #16]
 800ad84:	46a2      	mov	sl, r4
 800ad86:	e7d2      	b.n	800ad2e <_vfiprintf_r+0xc6>
 800ad88:	9b03      	ldr	r3, [sp, #12]
 800ad8a:	1d19      	adds	r1, r3, #4
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	9103      	str	r1, [sp, #12]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	bfbb      	ittet	lt
 800ad94:	425b      	neglt	r3, r3
 800ad96:	f042 0202 	orrlt.w	r2, r2, #2
 800ad9a:	9307      	strge	r3, [sp, #28]
 800ad9c:	9307      	strlt	r3, [sp, #28]
 800ad9e:	bfb8      	it	lt
 800ada0:	9204      	strlt	r2, [sp, #16]
 800ada2:	7823      	ldrb	r3, [r4, #0]
 800ada4:	2b2e      	cmp	r3, #46	; 0x2e
 800ada6:	d10c      	bne.n	800adc2 <_vfiprintf_r+0x15a>
 800ada8:	7863      	ldrb	r3, [r4, #1]
 800adaa:	2b2a      	cmp	r3, #42	; 0x2a
 800adac:	d134      	bne.n	800ae18 <_vfiprintf_r+0x1b0>
 800adae:	9b03      	ldr	r3, [sp, #12]
 800adb0:	1d1a      	adds	r2, r3, #4
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	9203      	str	r2, [sp, #12]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	bfb8      	it	lt
 800adba:	f04f 33ff 	movlt.w	r3, #4294967295
 800adbe:	3402      	adds	r4, #2
 800adc0:	9305      	str	r3, [sp, #20]
 800adc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ae98 <_vfiprintf_r+0x230>
 800adc6:	7821      	ldrb	r1, [r4, #0]
 800adc8:	2203      	movs	r2, #3
 800adca:	4650      	mov	r0, sl
 800adcc:	f7f5 fa08 	bl	80001e0 <memchr>
 800add0:	b138      	cbz	r0, 800ade2 <_vfiprintf_r+0x17a>
 800add2:	9b04      	ldr	r3, [sp, #16]
 800add4:	eba0 000a 	sub.w	r0, r0, sl
 800add8:	2240      	movs	r2, #64	; 0x40
 800adda:	4082      	lsls	r2, r0
 800addc:	4313      	orrs	r3, r2
 800adde:	3401      	adds	r4, #1
 800ade0:	9304      	str	r3, [sp, #16]
 800ade2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ade6:	4829      	ldr	r0, [pc, #164]	; (800ae8c <_vfiprintf_r+0x224>)
 800ade8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800adec:	2206      	movs	r2, #6
 800adee:	f7f5 f9f7 	bl	80001e0 <memchr>
 800adf2:	2800      	cmp	r0, #0
 800adf4:	d03f      	beq.n	800ae76 <_vfiprintf_r+0x20e>
 800adf6:	4b26      	ldr	r3, [pc, #152]	; (800ae90 <_vfiprintf_r+0x228>)
 800adf8:	bb1b      	cbnz	r3, 800ae42 <_vfiprintf_r+0x1da>
 800adfa:	9b03      	ldr	r3, [sp, #12]
 800adfc:	3307      	adds	r3, #7
 800adfe:	f023 0307 	bic.w	r3, r3, #7
 800ae02:	3308      	adds	r3, #8
 800ae04:	9303      	str	r3, [sp, #12]
 800ae06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae08:	443b      	add	r3, r7
 800ae0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae0c:	e768      	b.n	800ace0 <_vfiprintf_r+0x78>
 800ae0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae12:	460c      	mov	r4, r1
 800ae14:	2001      	movs	r0, #1
 800ae16:	e7a6      	b.n	800ad66 <_vfiprintf_r+0xfe>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	3401      	adds	r4, #1
 800ae1c:	9305      	str	r3, [sp, #20]
 800ae1e:	4619      	mov	r1, r3
 800ae20:	f04f 0c0a 	mov.w	ip, #10
 800ae24:	4620      	mov	r0, r4
 800ae26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae2a:	3a30      	subs	r2, #48	; 0x30
 800ae2c:	2a09      	cmp	r2, #9
 800ae2e:	d903      	bls.n	800ae38 <_vfiprintf_r+0x1d0>
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d0c6      	beq.n	800adc2 <_vfiprintf_r+0x15a>
 800ae34:	9105      	str	r1, [sp, #20]
 800ae36:	e7c4      	b.n	800adc2 <_vfiprintf_r+0x15a>
 800ae38:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e7f0      	b.n	800ae24 <_vfiprintf_r+0x1bc>
 800ae42:	ab03      	add	r3, sp, #12
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	462a      	mov	r2, r5
 800ae48:	4b12      	ldr	r3, [pc, #72]	; (800ae94 <_vfiprintf_r+0x22c>)
 800ae4a:	a904      	add	r1, sp, #16
 800ae4c:	4630      	mov	r0, r6
 800ae4e:	f7fd fb91 	bl	8008574 <_printf_float>
 800ae52:	4607      	mov	r7, r0
 800ae54:	1c78      	adds	r0, r7, #1
 800ae56:	d1d6      	bne.n	800ae06 <_vfiprintf_r+0x19e>
 800ae58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae5a:	07d9      	lsls	r1, r3, #31
 800ae5c:	d405      	bmi.n	800ae6a <_vfiprintf_r+0x202>
 800ae5e:	89ab      	ldrh	r3, [r5, #12]
 800ae60:	059a      	lsls	r2, r3, #22
 800ae62:	d402      	bmi.n	800ae6a <_vfiprintf_r+0x202>
 800ae64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae66:	f7fe f903 	bl	8009070 <__retarget_lock_release_recursive>
 800ae6a:	89ab      	ldrh	r3, [r5, #12]
 800ae6c:	065b      	lsls	r3, r3, #25
 800ae6e:	f53f af1d 	bmi.w	800acac <_vfiprintf_r+0x44>
 800ae72:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae74:	e71c      	b.n	800acb0 <_vfiprintf_r+0x48>
 800ae76:	ab03      	add	r3, sp, #12
 800ae78:	9300      	str	r3, [sp, #0]
 800ae7a:	462a      	mov	r2, r5
 800ae7c:	4b05      	ldr	r3, [pc, #20]	; (800ae94 <_vfiprintf_r+0x22c>)
 800ae7e:	a904      	add	r1, sp, #16
 800ae80:	4630      	mov	r0, r6
 800ae82:	f7fd fe1b 	bl	8008abc <_printf_i>
 800ae86:	e7e4      	b.n	800ae52 <_vfiprintf_r+0x1ea>
 800ae88:	0800d69c 	.word	0x0800d69c
 800ae8c:	0800d6a6 	.word	0x0800d6a6
 800ae90:	08008575 	.word	0x08008575
 800ae94:	0800ac45 	.word	0x0800ac45
 800ae98:	0800d6a2 	.word	0x0800d6a2

0800ae9c <__swbuf_r>:
 800ae9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae9e:	460e      	mov	r6, r1
 800aea0:	4614      	mov	r4, r2
 800aea2:	4605      	mov	r5, r0
 800aea4:	b118      	cbz	r0, 800aeae <__swbuf_r+0x12>
 800aea6:	6a03      	ldr	r3, [r0, #32]
 800aea8:	b90b      	cbnz	r3, 800aeae <__swbuf_r+0x12>
 800aeaa:	f7fd ffb5 	bl	8008e18 <__sinit>
 800aeae:	69a3      	ldr	r3, [r4, #24]
 800aeb0:	60a3      	str	r3, [r4, #8]
 800aeb2:	89a3      	ldrh	r3, [r4, #12]
 800aeb4:	071a      	lsls	r2, r3, #28
 800aeb6:	d525      	bpl.n	800af04 <__swbuf_r+0x68>
 800aeb8:	6923      	ldr	r3, [r4, #16]
 800aeba:	b31b      	cbz	r3, 800af04 <__swbuf_r+0x68>
 800aebc:	6823      	ldr	r3, [r4, #0]
 800aebe:	6922      	ldr	r2, [r4, #16]
 800aec0:	1a98      	subs	r0, r3, r2
 800aec2:	6963      	ldr	r3, [r4, #20]
 800aec4:	b2f6      	uxtb	r6, r6
 800aec6:	4283      	cmp	r3, r0
 800aec8:	4637      	mov	r7, r6
 800aeca:	dc04      	bgt.n	800aed6 <__swbuf_r+0x3a>
 800aecc:	4621      	mov	r1, r4
 800aece:	4628      	mov	r0, r5
 800aed0:	f7ff fdd2 	bl	800aa78 <_fflush_r>
 800aed4:	b9e0      	cbnz	r0, 800af10 <__swbuf_r+0x74>
 800aed6:	68a3      	ldr	r3, [r4, #8]
 800aed8:	3b01      	subs	r3, #1
 800aeda:	60a3      	str	r3, [r4, #8]
 800aedc:	6823      	ldr	r3, [r4, #0]
 800aede:	1c5a      	adds	r2, r3, #1
 800aee0:	6022      	str	r2, [r4, #0]
 800aee2:	701e      	strb	r6, [r3, #0]
 800aee4:	6962      	ldr	r2, [r4, #20]
 800aee6:	1c43      	adds	r3, r0, #1
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d004      	beq.n	800aef6 <__swbuf_r+0x5a>
 800aeec:	89a3      	ldrh	r3, [r4, #12]
 800aeee:	07db      	lsls	r3, r3, #31
 800aef0:	d506      	bpl.n	800af00 <__swbuf_r+0x64>
 800aef2:	2e0a      	cmp	r6, #10
 800aef4:	d104      	bne.n	800af00 <__swbuf_r+0x64>
 800aef6:	4621      	mov	r1, r4
 800aef8:	4628      	mov	r0, r5
 800aefa:	f7ff fdbd 	bl	800aa78 <_fflush_r>
 800aefe:	b938      	cbnz	r0, 800af10 <__swbuf_r+0x74>
 800af00:	4638      	mov	r0, r7
 800af02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af04:	4621      	mov	r1, r4
 800af06:	4628      	mov	r0, r5
 800af08:	f000 f806 	bl	800af18 <__swsetup_r>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	d0d5      	beq.n	800aebc <__swbuf_r+0x20>
 800af10:	f04f 37ff 	mov.w	r7, #4294967295
 800af14:	e7f4      	b.n	800af00 <__swbuf_r+0x64>
	...

0800af18 <__swsetup_r>:
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	4b2a      	ldr	r3, [pc, #168]	; (800afc4 <__swsetup_r+0xac>)
 800af1c:	4605      	mov	r5, r0
 800af1e:	6818      	ldr	r0, [r3, #0]
 800af20:	460c      	mov	r4, r1
 800af22:	b118      	cbz	r0, 800af2c <__swsetup_r+0x14>
 800af24:	6a03      	ldr	r3, [r0, #32]
 800af26:	b90b      	cbnz	r3, 800af2c <__swsetup_r+0x14>
 800af28:	f7fd ff76 	bl	8008e18 <__sinit>
 800af2c:	89a3      	ldrh	r3, [r4, #12]
 800af2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af32:	0718      	lsls	r0, r3, #28
 800af34:	d422      	bmi.n	800af7c <__swsetup_r+0x64>
 800af36:	06d9      	lsls	r1, r3, #27
 800af38:	d407      	bmi.n	800af4a <__swsetup_r+0x32>
 800af3a:	2309      	movs	r3, #9
 800af3c:	602b      	str	r3, [r5, #0]
 800af3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af42:	81a3      	strh	r3, [r4, #12]
 800af44:	f04f 30ff 	mov.w	r0, #4294967295
 800af48:	e034      	b.n	800afb4 <__swsetup_r+0x9c>
 800af4a:	0758      	lsls	r0, r3, #29
 800af4c:	d512      	bpl.n	800af74 <__swsetup_r+0x5c>
 800af4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af50:	b141      	cbz	r1, 800af64 <__swsetup_r+0x4c>
 800af52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af56:	4299      	cmp	r1, r3
 800af58:	d002      	beq.n	800af60 <__swsetup_r+0x48>
 800af5a:	4628      	mov	r0, r5
 800af5c:	f7fe ff32 	bl	8009dc4 <_free_r>
 800af60:	2300      	movs	r3, #0
 800af62:	6363      	str	r3, [r4, #52]	; 0x34
 800af64:	89a3      	ldrh	r3, [r4, #12]
 800af66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af6a:	81a3      	strh	r3, [r4, #12]
 800af6c:	2300      	movs	r3, #0
 800af6e:	6063      	str	r3, [r4, #4]
 800af70:	6923      	ldr	r3, [r4, #16]
 800af72:	6023      	str	r3, [r4, #0]
 800af74:	89a3      	ldrh	r3, [r4, #12]
 800af76:	f043 0308 	orr.w	r3, r3, #8
 800af7a:	81a3      	strh	r3, [r4, #12]
 800af7c:	6923      	ldr	r3, [r4, #16]
 800af7e:	b94b      	cbnz	r3, 800af94 <__swsetup_r+0x7c>
 800af80:	89a3      	ldrh	r3, [r4, #12]
 800af82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af8a:	d003      	beq.n	800af94 <__swsetup_r+0x7c>
 800af8c:	4621      	mov	r1, r4
 800af8e:	4628      	mov	r0, r5
 800af90:	f000 f88c 	bl	800b0ac <__smakebuf_r>
 800af94:	89a0      	ldrh	r0, [r4, #12]
 800af96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af9a:	f010 0301 	ands.w	r3, r0, #1
 800af9e:	d00a      	beq.n	800afb6 <__swsetup_r+0x9e>
 800afa0:	2300      	movs	r3, #0
 800afa2:	60a3      	str	r3, [r4, #8]
 800afa4:	6963      	ldr	r3, [r4, #20]
 800afa6:	425b      	negs	r3, r3
 800afa8:	61a3      	str	r3, [r4, #24]
 800afaa:	6923      	ldr	r3, [r4, #16]
 800afac:	b943      	cbnz	r3, 800afc0 <__swsetup_r+0xa8>
 800afae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800afb2:	d1c4      	bne.n	800af3e <__swsetup_r+0x26>
 800afb4:	bd38      	pop	{r3, r4, r5, pc}
 800afb6:	0781      	lsls	r1, r0, #30
 800afb8:	bf58      	it	pl
 800afba:	6963      	ldrpl	r3, [r4, #20]
 800afbc:	60a3      	str	r3, [r4, #8]
 800afbe:	e7f4      	b.n	800afaa <__swsetup_r+0x92>
 800afc0:	2000      	movs	r0, #0
 800afc2:	e7f7      	b.n	800afb4 <__swsetup_r+0x9c>
 800afc4:	20000070 	.word	0x20000070

0800afc8 <_raise_r>:
 800afc8:	291f      	cmp	r1, #31
 800afca:	b538      	push	{r3, r4, r5, lr}
 800afcc:	4604      	mov	r4, r0
 800afce:	460d      	mov	r5, r1
 800afd0:	d904      	bls.n	800afdc <_raise_r+0x14>
 800afd2:	2316      	movs	r3, #22
 800afd4:	6003      	str	r3, [r0, #0]
 800afd6:	f04f 30ff 	mov.w	r0, #4294967295
 800afda:	bd38      	pop	{r3, r4, r5, pc}
 800afdc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800afde:	b112      	cbz	r2, 800afe6 <_raise_r+0x1e>
 800afe0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afe4:	b94b      	cbnz	r3, 800affa <_raise_r+0x32>
 800afe6:	4620      	mov	r0, r4
 800afe8:	f000 f830 	bl	800b04c <_getpid_r>
 800afec:	462a      	mov	r2, r5
 800afee:	4601      	mov	r1, r0
 800aff0:	4620      	mov	r0, r4
 800aff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aff6:	f000 b817 	b.w	800b028 <_kill_r>
 800affa:	2b01      	cmp	r3, #1
 800affc:	d00a      	beq.n	800b014 <_raise_r+0x4c>
 800affe:	1c59      	adds	r1, r3, #1
 800b000:	d103      	bne.n	800b00a <_raise_r+0x42>
 800b002:	2316      	movs	r3, #22
 800b004:	6003      	str	r3, [r0, #0]
 800b006:	2001      	movs	r0, #1
 800b008:	e7e7      	b.n	800afda <_raise_r+0x12>
 800b00a:	2400      	movs	r4, #0
 800b00c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b010:	4628      	mov	r0, r5
 800b012:	4798      	blx	r3
 800b014:	2000      	movs	r0, #0
 800b016:	e7e0      	b.n	800afda <_raise_r+0x12>

0800b018 <raise>:
 800b018:	4b02      	ldr	r3, [pc, #8]	; (800b024 <raise+0xc>)
 800b01a:	4601      	mov	r1, r0
 800b01c:	6818      	ldr	r0, [r3, #0]
 800b01e:	f7ff bfd3 	b.w	800afc8 <_raise_r>
 800b022:	bf00      	nop
 800b024:	20000070 	.word	0x20000070

0800b028 <_kill_r>:
 800b028:	b538      	push	{r3, r4, r5, lr}
 800b02a:	4d07      	ldr	r5, [pc, #28]	; (800b048 <_kill_r+0x20>)
 800b02c:	2300      	movs	r3, #0
 800b02e:	4604      	mov	r4, r0
 800b030:	4608      	mov	r0, r1
 800b032:	4611      	mov	r1, r2
 800b034:	602b      	str	r3, [r5, #0]
 800b036:	f7f7 fdbb 	bl	8002bb0 <_kill>
 800b03a:	1c43      	adds	r3, r0, #1
 800b03c:	d102      	bne.n	800b044 <_kill_r+0x1c>
 800b03e:	682b      	ldr	r3, [r5, #0]
 800b040:	b103      	cbz	r3, 800b044 <_kill_r+0x1c>
 800b042:	6023      	str	r3, [r4, #0]
 800b044:	bd38      	pop	{r3, r4, r5, pc}
 800b046:	bf00      	nop
 800b048:	20004644 	.word	0x20004644

0800b04c <_getpid_r>:
 800b04c:	f7f7 bda8 	b.w	8002ba0 <_getpid>

0800b050 <_malloc_usable_size_r>:
 800b050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b054:	1f18      	subs	r0, r3, #4
 800b056:	2b00      	cmp	r3, #0
 800b058:	bfbc      	itt	lt
 800b05a:	580b      	ldrlt	r3, [r1, r0]
 800b05c:	18c0      	addlt	r0, r0, r3
 800b05e:	4770      	bx	lr

0800b060 <__swhatbuf_r>:
 800b060:	b570      	push	{r4, r5, r6, lr}
 800b062:	460c      	mov	r4, r1
 800b064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b068:	2900      	cmp	r1, #0
 800b06a:	b096      	sub	sp, #88	; 0x58
 800b06c:	4615      	mov	r5, r2
 800b06e:	461e      	mov	r6, r3
 800b070:	da0d      	bge.n	800b08e <__swhatbuf_r+0x2e>
 800b072:	89a3      	ldrh	r3, [r4, #12]
 800b074:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b078:	f04f 0100 	mov.w	r1, #0
 800b07c:	bf0c      	ite	eq
 800b07e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b082:	2340      	movne	r3, #64	; 0x40
 800b084:	2000      	movs	r0, #0
 800b086:	6031      	str	r1, [r6, #0]
 800b088:	602b      	str	r3, [r5, #0]
 800b08a:	b016      	add	sp, #88	; 0x58
 800b08c:	bd70      	pop	{r4, r5, r6, pc}
 800b08e:	466a      	mov	r2, sp
 800b090:	f000 f848 	bl	800b124 <_fstat_r>
 800b094:	2800      	cmp	r0, #0
 800b096:	dbec      	blt.n	800b072 <__swhatbuf_r+0x12>
 800b098:	9901      	ldr	r1, [sp, #4]
 800b09a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b09e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b0a2:	4259      	negs	r1, r3
 800b0a4:	4159      	adcs	r1, r3
 800b0a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0aa:	e7eb      	b.n	800b084 <__swhatbuf_r+0x24>

0800b0ac <__smakebuf_r>:
 800b0ac:	898b      	ldrh	r3, [r1, #12]
 800b0ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0b0:	079d      	lsls	r5, r3, #30
 800b0b2:	4606      	mov	r6, r0
 800b0b4:	460c      	mov	r4, r1
 800b0b6:	d507      	bpl.n	800b0c8 <__smakebuf_r+0x1c>
 800b0b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0bc:	6023      	str	r3, [r4, #0]
 800b0be:	6123      	str	r3, [r4, #16]
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	6163      	str	r3, [r4, #20]
 800b0c4:	b002      	add	sp, #8
 800b0c6:	bd70      	pop	{r4, r5, r6, pc}
 800b0c8:	ab01      	add	r3, sp, #4
 800b0ca:	466a      	mov	r2, sp
 800b0cc:	f7ff ffc8 	bl	800b060 <__swhatbuf_r>
 800b0d0:	9900      	ldr	r1, [sp, #0]
 800b0d2:	4605      	mov	r5, r0
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f7fe fee9 	bl	8009eac <_malloc_r>
 800b0da:	b948      	cbnz	r0, 800b0f0 <__smakebuf_r+0x44>
 800b0dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0e0:	059a      	lsls	r2, r3, #22
 800b0e2:	d4ef      	bmi.n	800b0c4 <__smakebuf_r+0x18>
 800b0e4:	f023 0303 	bic.w	r3, r3, #3
 800b0e8:	f043 0302 	orr.w	r3, r3, #2
 800b0ec:	81a3      	strh	r3, [r4, #12]
 800b0ee:	e7e3      	b.n	800b0b8 <__smakebuf_r+0xc>
 800b0f0:	89a3      	ldrh	r3, [r4, #12]
 800b0f2:	6020      	str	r0, [r4, #0]
 800b0f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0f8:	81a3      	strh	r3, [r4, #12]
 800b0fa:	9b00      	ldr	r3, [sp, #0]
 800b0fc:	6163      	str	r3, [r4, #20]
 800b0fe:	9b01      	ldr	r3, [sp, #4]
 800b100:	6120      	str	r0, [r4, #16]
 800b102:	b15b      	cbz	r3, 800b11c <__smakebuf_r+0x70>
 800b104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b108:	4630      	mov	r0, r6
 800b10a:	f000 f81d 	bl	800b148 <_isatty_r>
 800b10e:	b128      	cbz	r0, 800b11c <__smakebuf_r+0x70>
 800b110:	89a3      	ldrh	r3, [r4, #12]
 800b112:	f023 0303 	bic.w	r3, r3, #3
 800b116:	f043 0301 	orr.w	r3, r3, #1
 800b11a:	81a3      	strh	r3, [r4, #12]
 800b11c:	89a3      	ldrh	r3, [r4, #12]
 800b11e:	431d      	orrs	r5, r3
 800b120:	81a5      	strh	r5, [r4, #12]
 800b122:	e7cf      	b.n	800b0c4 <__smakebuf_r+0x18>

0800b124 <_fstat_r>:
 800b124:	b538      	push	{r3, r4, r5, lr}
 800b126:	4d07      	ldr	r5, [pc, #28]	; (800b144 <_fstat_r+0x20>)
 800b128:	2300      	movs	r3, #0
 800b12a:	4604      	mov	r4, r0
 800b12c:	4608      	mov	r0, r1
 800b12e:	4611      	mov	r1, r2
 800b130:	602b      	str	r3, [r5, #0]
 800b132:	f7f7 fd9c 	bl	8002c6e <_fstat>
 800b136:	1c43      	adds	r3, r0, #1
 800b138:	d102      	bne.n	800b140 <_fstat_r+0x1c>
 800b13a:	682b      	ldr	r3, [r5, #0]
 800b13c:	b103      	cbz	r3, 800b140 <_fstat_r+0x1c>
 800b13e:	6023      	str	r3, [r4, #0]
 800b140:	bd38      	pop	{r3, r4, r5, pc}
 800b142:	bf00      	nop
 800b144:	20004644 	.word	0x20004644

0800b148 <_isatty_r>:
 800b148:	b538      	push	{r3, r4, r5, lr}
 800b14a:	4d06      	ldr	r5, [pc, #24]	; (800b164 <_isatty_r+0x1c>)
 800b14c:	2300      	movs	r3, #0
 800b14e:	4604      	mov	r4, r0
 800b150:	4608      	mov	r0, r1
 800b152:	602b      	str	r3, [r5, #0]
 800b154:	f7f7 fd9b 	bl	8002c8e <_isatty>
 800b158:	1c43      	adds	r3, r0, #1
 800b15a:	d102      	bne.n	800b162 <_isatty_r+0x1a>
 800b15c:	682b      	ldr	r3, [r5, #0]
 800b15e:	b103      	cbz	r3, 800b162 <_isatty_r+0x1a>
 800b160:	6023      	str	r3, [r4, #0]
 800b162:	bd38      	pop	{r3, r4, r5, pc}
 800b164:	20004644 	.word	0x20004644

0800b168 <_init>:
 800b168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16a:	bf00      	nop
 800b16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b16e:	bc08      	pop	{r3}
 800b170:	469e      	mov	lr, r3
 800b172:	4770      	bx	lr

0800b174 <_fini>:
 800b174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b176:	bf00      	nop
 800b178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b17a:	bc08      	pop	{r3}
 800b17c:	469e      	mov	lr, r3
 800b17e:	4770      	bx	lr
